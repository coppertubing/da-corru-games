// ---- –§–£–ù–ö–¶–ò–ò -----
// –¥–µ–ª–∞—é—Ç —Å–º–µ—à–Ω—ã–µ –∫–æ–¥–æ—à—Ç—É—á–∫–∏ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ

function updateDataBeforeUse() {
    for (var i = 0; i < characters.length; i++) {
        doubleCheck();
        characters[i][`beenUsed`] = false;
        currentUnusedCharacterNumber = currentCharacterNumber;
        diedThisCycle = 0;
    }
    if (paraffinChecker == true) {
        paraffinChecker = false;
        paraffinCycles.push(currentState);
    }
} // –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á—Ç–æ–±—ã –∏—Ö —Å–Ω–æ–≤–∞ –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –ø—Ä–æ—á–µ–µ

function getRandomAliveCharacter() {
    var randomCharacter;
    do {
        randomCharacter = Math.floor(Math.random() * initialCharacterNumber);
    } while (characters[randomCharacter].alive === false || characters[randomCharacter].beenUsed === true);
    return characters[randomCharacter];
} // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ñ–ò–í–û–ì–û –∏ –ù–ï–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ù–û–ì–û –ø–µ—Ä—Å–∞

function getRandomDeadCharacter() {
    var randomCharacter;
    for (var i = 0; i < initialCharacterNumber; i++) {
        randomCharacter = Math.floor(Math.random() * initialCharacterNumber);
        if (characters[randomCharacter].alive === false && characters[randomCharacter].beenUsed === false) return characters[randomCharacter];
    }
    console.error("[getRandomDeadCharacter] Tried to get a dead character when no dead characters were present; returning a stop")
    return "stop";
} // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ú–ï–†–¢–í–û–ì–û –∏ –ù–ï–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ù–û–ì–û –ø–µ—Ä—Å–∞

function declareTheDiedThisCycleNumber() {
    const strings = [
        [
            "only 1s participants died todays. Poor guy.",
            "let us congratulate the only participant who died!!",
            "YAYAYAYA 1 guy dead!!",
            "i hope that was not akizet?",
            "only 1 character was dealt with cruelly",
            "rip 1 person",
            "how did they die? Tell me",
            "wow. 1 whole guy died. Thats action",
            "maybe turn up the chance of lethality?",
            "i would call out that murdered guy by their name, but that would be rude",
            "death (singular)",
            "1 (one, unit, unity) is a number, numeral, and glyph. It is the first and smallest positive integer of the infinite sequence of natural numbers. This fundamental property has led to its unique uses in other fields, ranging from science to sports, where it commonly denotes the first, leading, or top thing in a group. 1 is th",
            "we will remember you, dead one (threat) /silly",
            "did you know that 1 is",
            "haha h a <i>ONE</i> /ref",
            "oooooooooooooooone",
            "ONE- *intro music plays* /ref"
        ],
        [
            diedThisCycle + "!!!!!! " + diedThisCycle + "!!!!!!!!!!!!!!",
            "today " + diedThisCycle + " died üëç",
            "oops (" + diedThisCycle + ")",
            "do you think that " + diedThisCycle + " dead is enough?",
            "still, " + diedThisCycle + " is not enough for a real bloodbath",
            diedThisCycle + " will not live to see the next gaze",
            diedThisCycle + " have left velzie's stage",
            "UHhhhhhhUh,ammsnfgh " + diedThisCycle,
            "my favorite number is " + diedThisCycle + ".",
            "every day someone dies. but today " + diedThisCycle + " more guys died",
            "just " + diedThisCycle + "? really?",
            "how sad! " + diedThisCycle + " participants died. they will be back...",
            diedThisCycle,
            diedThisCycle + " participants are a dissapointment today",
            "hehehe. " + diedThisCycle + ".",
            diedThisCycle + " are not there anymore",
            "Guess how many. " + diedThisCycle + "!!!!",
            "wow! " + diedThisCycle + " do not exist anymore!",
            "cruel and unusual punishment for " + diedThisCycle + " people",
            diedThisCycle + " peoples",
            diedThisCycle + " participants are sludgy",
            "damn, " + diedThisCycle + " died",
            "eating " + diedThisCycle + " participants"
        ],
        [
            "cruel and unusual punishment for " + diedThisCycle + " people",
            diedThisCycle + " peoples",
            diedThisCycle + " are not there anymore",
            "mmmmmmmmmmmmmmmmmmmmm " + diedThisCycle,
            "anyways, " + diedThisCycle + ".",
            "someone dies every gaze. but today " + diedThisCycle + " more guys died",
            "today " + diedThisCycle + " died üëç",
            "kill kill die die kill kill die die (" + diedThisCycle + " died)",
            "i think " + diedThisCycle + " died. i think. dunno for sure",
            "awwwwwwwwwwww (" + diedThisCycle + ")",
            "people say " + diedThisCycle + " is a lucky number",
            "the losses: " + (diedThisCycle - 1) + " qou and 1 funny",
            "being alive >>>>>>>>>>> those " + diedThisCycle + " dudes (stupids) (why die) (-" + (Math.round(Math.random() * 100) + 33) + " respect)",
            "hey todays a nice harvest. " + diedThisCycle + " pretty silly guys",
            diedThisCycle + " participants are a dissapointment today",
            diedThisCycle + " are not there anymore",
            "wow! " + diedThisCycle + " do not exist anymore!",
            diedThisCycle + " " + diedThisCycle + " " + diedThisCycle,
            "damn, " + diedThisCycle + " died"
        ],
        [
            diedThisCycle + "!!!!!! " + diedThisCycle + "!!!!!!!!!!!!!!",
            "heeeeehehehehehee. " + diedThisCycle + ".",
            "anyways, " + diedThisCycle + ".",
            "huh. " + diedThisCycle + " died.",
            "what action! what battle! what " + diedThisCycle + " dead participants!",
            "listen, the corru games are just like that, the corru games just kill " + diedThisCycle + " people a day",
            diedThisCycle + " okidoiad",
            "..." + diedThisCycle + ". could be better.",
            "lets play a game!!!!!!! how many died? %>)<br/>A) " + (Math.round(Math.random() * 100) + 83) + "; B) " + (Math.round(Math.random() * 100)) + "; C) " + diedThisCycle + " (worng answrr)",
            "THE CORRU GAMES RECEIVED AN OFFERING OF " + diedThisCycle + " PARTICIPANTS. THE CORRU GAMES DEMAND MORE.",
            diedThisCycle + " " + diedThisCycle + " " + diedThisCycle + " " + diedThisCycle + " " + diedThisCycle + " " + diedThisCycle + " " + diedThisCycle,
            "winning!!! " + diedThisCycle + " character dead",
            "do you know what happens after death? ask " + diedThisCycle + " dead",
            "well someone died. why do you need to know how many? im not a deathfriend",
            "byeeeeeee, " + diedThisCycle + "!!!",
            "muy sillies................. i.......... " + diedThisCycle + " ... .",
            "wow! " + diedThisCycle + " do not exist anymore! in fact they do not exist so hard i forgor uhhh what was i ralking about here? AH YES the ",
            "eatin popcorn; " + diedThisCycle + " die a horrible death",
            "HA now we know that " + diedThisCycle + "% of corru game participants are loooosrs (yes this is how percentages work. trust)",
            "someone died! " + diedThisCycle + " times!",
            diedThisCycle + " participants are sludgy",
            "mfw " + diedThisCycle + " participants die",
            "ultrakilling " + diedThisCycle,
            "the corru games are on a roll today! " + diedThisCycle + " dead, " + currentCharacterNumber - (Math.round(Math.random() * 6) + 5) + " injured"
        ],
        [
            diedThisCycle + "?????!!!!!! " + diedThisCycle + "?????????????!!!!!!!!!!!!!!",
            "AHAHAHA okay okay. (" + diedThisCycle + ")",
            "okay but " + diedThisCycle + " is pretty big? nuber?",
            "horrible. " + diedThisCycle + " poor. gys. are not. in corru. games. anymore. cause. they dead.",
            "the corru games are on a roll today! " + diedThisCycle + " dead, " + currentCharacterNumber + " injured",
            "what a great gaze. " + diedThisCycle + " d-",
            "eatin popcorn; " + diedThisCycle + " die a horrible death",
            diedThisCycle + " participants are sludgy",
            "being alive >>>>>>>>>>> those " + diedThisCycle + " dudes (stupids) (why die) (why so many) (bad) (-" + (Math.round(Math.random() * 100) + 43) + " respect)",
            "no no no that is too many deaths. i am cloning gakvu now (" + diedThisCycle + ")",
            "mmmmmmmmmmmmmmmmmmmmm " + diedThisCycle,
            "well what do i say when " + diedThisCycle + " participants die",
            "HA now we know that " + diedThisCycle + "% of corru game participants are loooosrs (yes this is how percentages work. trust)",
            "lol count it yourself",
            "it killed " + diedThisCycle + " people and doesnt even think about stopping",
            "ultrakilling " + diedThisCycle,
            "someone died! " + diedThisCycle + " times!",
            "mfw " + diedThisCycle + " participants die",
            "did you know that corru games are a rewrite of the much more ancient 'RWHG'? did you know i wrote them in two days of nonstop coding in a row? did you know that " + diedThisCycle + " participants died? did you know that i am cool? did you know that you are cool?",
            "insert funny joke about number " + diedThisCycle
        ],
        [
            "!!!!!!!!!!!!!!!!!!" + diedThisCycle + "!!!!!!!!!!!!!!!",
            "WHAT THE FUCK (" + diedThisCycle + ")",
            "man. i even gakvu cloning wont help (" + diedThisCycle + ")",
            "???????how many died again- " + diedThisCycle + " WHAT?????",
            "we will beat the record soon here?- like. " + diedThisCycle + " is not that far away from " + record + "-",
            "KI-" + diedThisCycle + "-LL",
            diedThisCycle + " deaths........ thats. thats. thats carnage",
            "live tozik.observer reaction (" + diedThisCycle + ")",
            "THE CORRU GAMES RECEIVED AN OFFERING OF " + diedThisCycle + " PARTICIPANTS. THE CORRU GAMES ARE PLEASED.",
            "YO- " + diedThisCycle + "-"
        ]
    ];

    if (diedThisCycle === 0) return ``
    else if (diedThisCycle === 1) return `<br/>` + strings[0][Math.floor(Math.random() * strings[0].length)] + `<br/>`
    else if (diedThisCycle === 3 && Math.random() < 0.2) return "<br/>triple affirmative<br/>"
    else if (diedThisCycle === 4 && Math.random() < 0.2) return "<br/>fourp<br/>"
    else if (diedThisCycle === 12 && Math.random() < 0.2) return "<br/>twolve<br/>"
    else if (diedThisCycle === 13 && Math.random() < 0.2) return "<br/>is it friday today?<br/>"
    else if (1 < diedThisCycle && diedThisCycle <= 4) return `<br/>` + strings[1][Math.floor(Math.random() * strings[1].length)] + `<br/>`
    else if (4 < diedThisCycle && diedThisCycle <= 10) return `<br/>` + strings[2][Math.floor(Math.random() * strings[2].length)] + `<br/>`
    else if (10 < diedThisCycle && diedThisCycle <= 16) return `<br/>` + strings[3][Math.floor(Math.random() * strings[3].length)] + `<br/>`
    else if (16 < diedThisCycle && diedThisCycle <= 24) return `<br/>` + strings[4][Math.floor(Math.random() * strings[4].length)] + `<br/>`
    else if (24 < diedThisCycle && diedThisCycle < record) return `<br/>` + strings[5][Math.floor(Math.random() * strings[5].length)] + `<br/>`
    else if (diedThisCycle >= record) return `<br/>guys????????? the fuck???<br/>we've beat the fucking record<br/>` + diedThisCycle + `<br/>yeaaaaaaaaaaaa...<br/>`
}

function sortCharactersByKills() {
    var sortedCharacters = characters.sort(function (a, b) {
        return b.kills - a.kills;
    });
    sortedCharacters = sortedCharacters.filter(function (character) {
        return character.kills > 0;
    });
    return sortedCharacters;
}

function sortCharactersByRevivals() {
    var sortedCharacters = characters.sort(function (a, b) {
        return b.revived - a.revived;
    });
    sortedCharacters = sortedCharacters.filter(function (character) {
        return character.revived > 0;
    });
    return sortedCharacters;
}

function getKillArray(where) {
    var stringified = where.hasKilled.toString();
    for (var i = 0; i < 500; i++) {
        stringified = stringified.replace(/,/g, '<font color="ffffff">\';\'</font>');
    }
    return stringified;
}

function getKilledBysArray(where) {
    var stringified = where.oldKilledBys.toString();
    stringified = stringified.replaceAll('</font>', '');
    stringified = stringified.replaceAll(',', '<font color="ffffff">\';\'</font>');
    stringified = stringified.replaceAll('<font color="ffff00">', '');
    return stringified;
}

function hasKills(character) {
    if (character.kills == 0) return `Peaceful :)`
        else if (character.kills == 1) return character.kills + ` Kill`
    else if (character.kills <= 5) return character.kills + ` Kills`
    else return character.kills + ` KILLS`
}

function doubleCheck() {
    for (var i = 0; i < initialCharacterNumber; i++) {
        var index = placements.findIndex(obj => obj === characters[i]);
        if (index !== -1) {
            if (placements[index].alive) {
                console.error("[doubleCheck] - Spliced out of the Placements Array: " + placements[index].name);
                placements.splice(index, 1);
            }
        } else if (characters[i].alive === false) {
            console.error("[doubleCheck] - Pushed into the Placements Array: " + characters[i].name)
            placements.push(characters[i]);
        }
    };

    const uniqueObjects = [];
    for (const obj of placements) {
        const isDuplicate = uniqueObjects.some(item => item === obj);
        if (!isDuplicate) {
            uniqueObjects.push(obj);
        }
        if (isDuplicate) {
            console.error("[doubleCheck] - Found and removed duplicate: " + obj)
        }
    }
    placements.length = 0;
    placements.push(...uniqueObjects);

    let count = 0;
    for (let i = 0; i < initialCharacterNumber; i++) {
        if (characters[i].alive === true) {
            count++;
        }
    }
    currentCharacterNumber = count;
}


// –ø–∏–∑–¥–µ—Ü —Å –∏–≤–µ–Ω—Ç–∞–º–∏
// –∫—Ä–∞—Ç–∫–∏–π —Å–ª–æ–≤–∞—Ä–∏–∫ –¥–ª—è –∞—Ö—É–µ–≤–∞—é—â–∏—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –∞–∫–∞ –µ–±–∞—Ç—å —Ç–∞–∫—Å–æ–Ω–æ–º–∏—è –∏–≤–µ–Ω—Ç–æ–≤. –¥—É—Ç–æ —Ç—ã —Å –¥—É–±–∞ —Ä—É—Ö–Ω—É–ª
// —Ä–æ–¥ (genus) - —ç—Ç–æ —Ç–æ, –æ—Ç–∫—É–¥–∞ –∏–≤–µ–Ω—Ç –≤–æ–æ–±—â–µ (–≥–æ–Ω–∫–∞, —Ü–∏–∫–ª, –¥–æ–∂–¥—å, —Å–æ–±—ã—Ç–∏–µ...)
// —Ç–∏–ø (type) - —ç—Ç–æ –Ω—É (–æ–±—ã—á–Ω—ã–π, –ª–µ—Ç–∞–ª—å–Ω—ã–π, –≤–æ–∑—Ä–æ–∂–¥–∞—é—â–∏–π, afflicted)
// –æ–±—ä–µ–∫—Ç (object) - —Å–∞–º –∏–≤–µ–Ω—Ç, —Å–∞–º–∞—è –º–µ–ª–∫–∞—è –µ–¥–∏–Ω–∏—Ü–∞

function generateEvents(eventGenus) {
    var returnData = ``;
    var addData;
    while (currentUnusedCharacterNumber != 0) {
        console.log("%c-", 'color: #666666');
        console.log("%c[generateEvents] - CURRENT CHARACTER NUMBER: " + currentCharacterNumber, 'color: #b3b3b3')
        console.log("%c[generateEvents] - UNUSED CHARACTER NUMBER: " + currentUnusedCharacterNumber, 'color: #b3b3b3')
        doubleCheck();

        addData = generateEvent(eventGenus);
        if (addData != "stop") returnData += addData;
        console.log("%c-", 'color: #666666');
    };
    return returnData;
}

function generateEvent(eventGenus) {
    console.log("",);
    var random = Math.random();

    var lethalChecker = chanceLethal;
    var revivalChecker = chanceRevival;

    if (!('revival' in eventGenus['array']) || currentCharacterNumber == initialCharacterNumber) revivalChecker = 0; // –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É —Ä–æ–¥–∞ —Ç–∏–ø –≤–æ–∑—Ä–æ–∂–¥–∞—é—â–∏–π –∏ —É–º–∏—Ä–∞–ª–∏ –ª–∏ —É–∂–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
    if (currentCharacterNumber == 1) lethalChecker = 0; // –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –≤—Å–µ–≥–æ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫, –Ω–∞–¥–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –ª–µ—Ç–∞–ª—å–Ω—ã–µ –∏–≤–µ–Ω—Ç—ã

    if (random > lethalChecker + revivalChecker) {
        console.log("Chose the regular event type!");
        return eventGenus['regular']();
    } else if (random > revivalChecker) {
        console.log("Chose the lethal event type!");
        return eventGenus['lethal']();
    } else {
        console.log("Chose the revival event type!");
        return eventGenus['revival']();
    }
}

function decideEventObject(eventArrayType) {
    var object;
    var index;
    for (var i = 0; i < 73792; i++) {
        index = Math.floor(Math.random() * eventArrayType.length)
        object = eventArrayType[index];
        if (object.playerCount <= currentUnusedCharacterNumber) return object;
    };
}

function decideEventGenus() {
    var eventGenus;
    for (var i = 0; i < 737; i++) {
        eventGenus = eventsRandom[Math.floor(Math.random() * eventsRandom.length)];
        if (eventGenus.used == false) {
            eventGenus.used = true;
            return eventGenus;
        };
    };
    for (var i = 0; i < eventsRandom.length; i++) {
        eventsRandom[i].used = false;
    };
    for (var i = 0; i < 73792; i++) {
        eventGenus = eventsRandom[Math.floor(Math.random() * eventsRandom.length)];
        if (eventGenus.used == false) return eventGenus;
    };
}

function decidePlayers(playerCount) {
    var players = [];
    // var lookForParaffin = 0;
    for (var i = 0; i < playerCount; i++) {
        var player = getRandomAliveCharacter();
        player.beenUsed = true;
        players.push(player);
        // if (player.name == "–ë–µ—Å–ø–æ–¥–æ–±–Ω–∞—è –ù–µ–≤–∏–Ω–Ω–æ—Å—Ç—å") lookForParaffin++;
        // if (player.name == "–ü–∞—Ä–∞ –ü—É—Å—Ç—è–∫–æ–≤") lookForParaffin++;
    };
    /* if (lookForParaffin == 2) {
        paraffinIndex++;
        paraffinChecker = true;
    } */
    return players;
}

function decideRevivedPlayers(playerCount) {
    var players = [];
    for (var i = 0; i < playerCount; i++) {
        var player = getRandomDeadCharacter();
        if (player == "stop") return "stop";
        player.beenUsed = true;
        players.push(player);
    };
    return players;
}

function parseAllNamesAndPronouns(string, characters) {

    for (let i = 1; i <= characters.length; i++) {
        string = parseNamesAndPronouns(string, i, characters[i - 1])
    }

    return string;
}

function parseNamesAndPronouns(string, number, character) {

    function capitalizeFirstLetter(val) {
        return String(val).charAt(0).toUpperCase() + String(val).slice(1);
    }

    string = string.replaceAll(`<` + number + `>`, `<strong><font color="ffff0">` + character.name + `</font></strong>`);

    string = string.replaceAll(`<die` + number + `>`, `<strong><font color="` + nicknamecolor_died + `">` + character.name + `</font></strong>`);

    string = string.replaceAll(`<rev` + number + `>`, `<strong><font color="` + nicknamecolor_revived + `">` + character.name + `</font></strong>`);

    string = string.replaceAll(`. <` + number + `they>`, `. ` + capitalizeFirstLetter(character.pronoun[0]));
    string = string.replaceAll(`. <` + number + `them>`, `. ` + capitalizeFirstLetter(character.pronoun[1]));
    string = string.replaceAll(`. <` + number + `their>`, `. ` + capitalizeFirstLetter(character.pronoun[2]));
    string = string.replaceAll(`. <` + number + `theirs>`, `. ` + capitalizeFirstLetter(character.pronoun[3]));
    string = string.replaceAll(`. <` + number + `themself>`, `. ` + capitalizeFirstLetter(character.pronoun[4]));

    string = string.replaceAll(`<` + number + `they>`, character.pronoun[0]);
    string = string.replaceAll(`<` + number + `them>`, character.pronoun[1]);
    string = string.replaceAll(`<` + number + `their>`, character.pronoun[2]);
    string = string.replaceAll(`<` + number + `theirs>`, character.pronoun[3]);
    string = string.replaceAll(`<` + number + `themself>`, character.pronoun[4]);

    if (character.singular == true) {
        string = string.replaceAll(`<` + number + `are>`, `is`);
        string = string.replaceAll(`<` + number + `have>`, `has`);
        string = string.replaceAll(`<` + number + `do>`, `does`);
        string = string.replaceAll(number + 'e>', `es`);
        string = string.replaceAll(number + '>', `s`);
    } else {
        string = string.replaceAll(`<` + number + `are>`, `are`);
        string = string.replaceAll(`<` + number + `have>`, `have`);
        string = string.replaceAll(`<` + number + `do>`, `do`);
        string = string.replaceAll(number + 'e>', ``);
        string = string.replaceAll(number + '>', ``);
    }

    return string;
}


function makeImages(image1, image2, image3, image4, image5, image6) {
    if (image6 != undefined) {
        var imageMade = `<table class="tribute">
        <tbody>
           <tr>
              <td><img src="` + image1 + `" height="90" width="90"></td>
              <td><img src="` + image2 + `" height="90" width="90"></td>
              <td><img src="` + image3 + `" height="90" width="90"></td>
              <td><img src="` + image4 + `" height="90" width="90"></td>
              <td><img src="` + image5 + `" height="90" width="90"></td>
              <td><img src="` + image6 + `" height="90" width="90"></td>
           </tr>
        </tbody>
     </table>
     <br>`
    } else if (image5 != undefined) {
        var imageMade = `<table class="five">
        <tbody>
           <tr>
              <td><img src="` + image1 + `" height="90" width="90"></td>
              <td><img src="` + image2 + `" height="90" width="90"></td>
              <td><img src="` + image3 + `" height="90" width="90"></td>
              <td><img src="` + image4 + `" height="90" width="90"></td>
              <td><img src="` + image5 + `" height="90" width="90"></td>
           </tr>
        </tbody>
     </table>
     <br>`
    } else if (image4 != undefined) {
        var imageMade = `<table class="four">
        <tbody>
           <tr>
              <td><img src="` + image1 + `" height="90" width="90"></td>
              <td><img src="` + image2 + `" height="90" width="90"></td>
              <td><img src="` + image3 + `" height="90" width="90"></td>
              <td><img src="` + image4 + `" height="90" width="90"></td>
           </tr>
        </tbody>
     </table>
     <br>`
    } else if (image3 != undefined) {
        var imageMade = `<table class="three">
        <tbody>
           <tr>
              <td><img src="` + image1 + `" height="90" width="90"></td>
              <td><img src="` + image2 + `" height="90" width="90"></td>
              <td><img src="` + image3 + `" height="90" width="90"></td>
           </tr>
        </tbody>
     </table>
     <br>`
    } else if (image2 != undefined) {
        var imageMade = `<table class="two">
        <tbody>
           <tr>
              <td><img src="` + image1 + `" height="90" width="90"></td>
              <td><img src="` + image2 + `" height="90" width="90"></td>
           </tr>
        </tbody>
     </table>
     <br>`
    } else {
        var imageMade = `<table class="one">
        <tbody>
           <tr>
              <td><img src="` + image1 + `" height="90" width="90"></td>
           </tr>
        </tbody>
     </table>
     <br>`
    }
    return imageMade;
}

//—à—Ç—É–∫–∏ –¥–ª—è updateData –∏–≤–µ–Ω—Ç–æ–≤
function theFunnyKillFunction(who, why, whoKiller1, whoKiller2, whoKiller3, whoKiller4, whoKiller5) {
    placements.push(who);
    who.alive = false;
    who.killedBy = why;
    if (whoKiller1 != undefined) {
        whoKiller1.kills++;
        whoKiller1.hasKilled.push(who.name)
        if (whoKiller2 != undefined) {
            whoKiller2.kills++;
            whoKiller2.hasKilled.push(who.name)
            if (whoKiller3 != undefined) {
                whoKiller3.kills++;
                whoKiller3.hasKilled.push(who.name)
                if (whoKiller4 != undefined) {
                    whoKiller4.kills++;
                    whoKiller4.hasKilled.push(who.name)
                    if (whoKiller5 != undefined) {
                        whoKiller5.kills++;
                        whoKiller5.hasKilled.push(who.name)
                    }
                }
            }
        }
    }
}

// —Å–∞–º–∏ –∏–≤–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤–∞—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –∫ –Ω–∏–º –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è
var eventRace = {
    regular: function () {
        var eventObject = decideEventObject(eventRace[`array`][`regular`]);

        var playerCount = eventObject.playerCount;

        var players = decidePlayers(playerCount);
        currentUnusedCharacterNumber -= playerCount;

        var eventString = parseAllNamesAndPronouns(eventObject.string, players)
        console.log(eventString, players);

        if (playerCount === 1) var eventImage = makeImages(players[0].image)
        else if (playerCount === 2) var eventImage = makeImages(players[0].image, players[1].image)
        else if (playerCount === 3) var eventImage = makeImages(players[0].image, players[1].image, players[2].image)
        else if (playerCount === 4) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image)
        else if (playerCount === 5) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image)
        else if (playerCount === 6) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image, players[5].image);

        var event = eventImage + eventString + `<br><br>`;

        return event;
    },
    lethal: function () {
        do var eventObject = decideEventObject(eventRace[`array`][`lethal`])
        while (eventObject.howManyDeaths >= currentCharacterNumber);

        var playerCount = eventObject.playerCount;

        var players = decidePlayers(playerCount);
        currentUnusedCharacterNumber -= playerCount;

        var eventString = parseAllNamesAndPronouns(eventObject.string, players)
        console.log(eventString, players);

        if (playerCount === 1) var eventImage = makeImages(players[0].image)
        else if (playerCount === 2) var eventImage = makeImages(players[0].image, players[1].image)
        else if (playerCount === 3) var eventImage = makeImages(players[0].image, players[1].image, players[2].image)
        else if (playerCount === 4) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image)
        else if (playerCount === 5) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image)
        else if (playerCount === 6) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image, players[5].image);

        var event = eventImage + eventString + `<br><br>`;

        eventObject.updateData.apply(eventObject, players);

        return event;
    },
    array: {
        regular: [
            {
                string: "<1> somehow just does not notice the start of the collapse",
                playerCount: 1
            },
            {
                string: "<1> thinks that this is a very weird prank but promptly changes <1their> mind upon seeing a horde of rabid containers",
                playerCount: 1
            },
            {
                string: "<1> is startled by the announcement",
                playerCount: 1
            },
            {
                string: "<1> is immediately attacked by a golem but manages to escape",
                playerCount: 1
            },
            {
                string: "<1> gets a bad headache from the signal",
                playerCount: 1
            },
            {
                string: "One of <1>'s limbs almost turns to sludge from the signal",
                playerCount: 1
            },
            {
                string: "<1> wants to activate communications, but <1their> communicator is sludged!",
                playerCount: 1
            },
            {
                string: "<1> activates communications but does not hear anything good...",
                playerCount: 1
            },
            {
                string: "<1> goes to look for <1their> friends right away",
                playerCount: 1
            },
            {
                string: "<1> is frustrated that <1they> <1have> to stop <1their> work",
                playerCount: 1
            },
            {
                string: "<1> watches the chaos unfold",
                playerCount: 1
            },

            {
                string: "<1> ",
                playerCount: 1
            },

        ],
        lethal: [
            {
                string: "<die1> just dies",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `Because I said so`;
                },
            },
        ]
        /*regular: [
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –µ–¥—É –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –∫–æ–ø—å–µ –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –±–æ–º–±—É –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) —É–º—É–¥—Ä—è–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –±–æ–º–±—É —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) —É—Å–ø–µ–≤–∞–µ—Ç –≤—ã—Ö–≤–∞—Ç–∏—Ç—å —Ñ–æ–Ω–∞—Ä—å –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–Ω–∏–∫–Ω—É—Ç—å –≤ –∫–æ—Ä–ø—É—Å –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞, –≥–¥–µ –Ω–µ—Ç –¥–æ–∂–¥—è",
                playerCount: 1
            },
            {
                string: "(Player1) –±–µ—Ä—ë—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–µ—â–µ–π –∏ —Ç–µ—Ä—è–µ—Ç –∏—Ö –≤—Å–µ –Ω–∞ –ø—É—Ç–∏ –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –∂–µ–º—á—É–≥ –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –∑–∞–¥—É–º—ã–≤–∞–µ—Ç—Å—è –æ —Ç–æ–º, —á—Ç–æ–±—ã –¥–∞—Ç—å –¥–æ–∂–¥—é —Å–º—ã—Ç—å —Å–µ–±—è, –Ω–æ —Ä–µ—à–∞–µ—Ç –Ω–µ –¥–µ–ª–∞—Ç—å —ç—Ç–æ–≥–æ",
                playerCount: 1
            },
            {
                string: "(Player1) –ø–æ–ª—É—á–∞–µ—Ç —É–∫–∞–∑–∞–Ω–∏—è –æ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∏ –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç —É–±–µ–∂–∏—â–µ",
                playerCount: 1
            },
            {
                string: "(Player1) –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç —É—Å–ø–µ–≤–∞–µ—Ç –≤ —É–±–µ–∂–∏—â–µ, –ø—Ä–æ–ø–ª—ã–≤ —á–∞—Å—Ç—å –ø—É—Ç–∏ –ø–æ –∑–∞—Ç–æ–ø–ª–µ–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –≥—Ä–∏–±—ã –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –¥—ã–º–æ–≤—É—é –±–æ–º–±—É –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π –Ω–∞ –ø—è—Ç—É—é —Ç–æ—á–∫—É –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É –∏ —Ä–∞–¥—É–µ—Ç—Å—è, —á—Ç–æ –Ω–µ —É–º–µ—Ä —Å–∞–º—ã–º –ø–µ—Ä–≤—ã–º",
                playerCount: 1
            },
            {
                string: "(Player1) —Ö–æ—á–µ—Ç –¥–æ–±–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ —Å–≤–æ–∏—Ö —É–±–∏–π—Å—Ç–≤ –¥–æ –º–∞–∫—Å–∏–º—É–º–∞",
                playerCount: 1
            },
            {
                string: "(Player1) —Ç–µ—Ä—è–µ—Ç –Ω–∞–¥–µ–∂–¥—É, —á—Ç–æ —Å–º–æ–∂–µ—Ç –ø–æ–±–µ–¥–∏—Ç—å",
                playerCount: 1
            },
            {
                string: "(Player1) –±–µ–∑—É—Å–ø–µ—à–Ω–æ –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Å–µ–±–µ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –¥–æ–±–µ–≥–∞–µ—Ç –¥–æ —É–±–µ–∂–∏—â–∞, –Ω–æ –æ–Ω–æ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–ª–æ–º–∞–Ω–Ω—ã–º, –∏ (Player1) –µ–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Ç–æ—Ä–æ–µ —Ä–∞–±–æ—á–µ–µ",
                playerCount: 1
            },
            {
                string: "(Player1) —Å–æ–±–∏—Ä–∞–µ—Ç —Ö–æ—Ä–æ—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –∏ —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤—ã–º –∫ –ø–æ–±–µ–¥–µ",
                playerCount: 1
            },
            {
                string: "(Player1) –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫—É–ø–∏—Ç—å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–∫–∞–∑–∞–Ω–∏—è –∫ –±–ª–∏–∂–∞–π—à–µ–º—É —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –¥–µ–ª–∞–µ—Ç –∑–∞–Ω–∞—á–∫—É –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –ø–æ—á—Ç–∏ —Å—ä–µ–¥–µ–Ω —è—â–µ—Ä–æ–º, –Ω–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç —Å–ø–∞—Å–∞–µ—Ç—Å—è",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –≤–∏–Ω–æ –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –°—Ç–µ–ø–∞–Ω–∞ –∏ –±–µ–∂–∏—Ç –≤ —É–±–µ–∂–∏—â–µ",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –∫–∞—Ä—Ç—É —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –Ω–µ–π—Ä–æ–Ω—ã –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç —è–π—Ü–æ –ª–∞–ø—à–µ–º—É—Ö–∏ –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç —Ü–µ–ª–æ–µ –Ω–∏—á–µ–≥–æ –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) —Ä–∞–∑–¥–∞—ë—Ç –≤—Å–µ–º –∫–æ–º—É –ø–æ–ø–∞–ª–æ –ª–µ—â–∞ –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç‚Ä¶ –Ω–µ—Ç, —à–ª—ë–ø–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç (Player1) –∏ –±–µ–≥—É—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –∑–¥—Ä–∞–≤—ã–π —Å–º—ã—Å–ª –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –∑–∞–∫—Ä–µ–ø—ã –º–æ–¥—á–∞—Ç–∞ –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –ø—Ä–∏—á–∏–Ω—É –∂–∏—Ç—å –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –¥–≤–∏–∂–æ–∫ –†–í–ì–ò –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(–†layer1) –Ω–∞—Ö–æ–¥–∏—Ç –∫–∞–∫–æ–π-—Ç–æ –±–∞–≥ –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç —Å–ª–æ–≤–∞—Ä–∏–∫ –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç —Ä–µ—à–µ–Ω–∏–µ –í–µ–ª–∏–∫–æ–π –ó–∞–¥–∞—á–∏ –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–π –ª–æ—Ä –ø–∞–Ω—Ç–µ–æ–Ω–∞ –†–í–†–ü –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –¥—Ä–µ–≤–Ω–µ–µ –ø—Ä–æ–∫–ª—è—Ç–∏–µ –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1
            },
            {
                string: "(Player1) –∫–∏–¥–∞–µ—Ç –±–æ–º–±—É –≤ —Ü–µ–Ω—Ç—Ä –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ, –Ω–æ –≤—Å–µ —á—É–¥–æ–º –æ—Ç–¥–µ–ª—ã–≤–∞—é—Ç—Å—è —Ä–∞–∑–≤–µ —á—Ç–æ –æ–≥–ª—É—à–µ–Ω–∏–µ–º –∏ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏",
                playerCount: 1
            },

            {
                string: "(Player1) –∏ (Player2) –¥–µ—Ä—É—Ç—Å—è –∑–∞ –µ–¥—É",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –æ–±–∞ –Ω–∞—Ö–æ–¥—è—Ç —ç–ª–µ–∫—Ç—Ä–æ–∫–æ–ø—å—ë, –Ω–æ –Ω–µ –º–æ–≥—É—Ç –µ–≥–æ –ø–æ–¥–µ–ª–∏—Ç—å. –í –∏—Ç–æ–≥–µ –æ–Ω–æ –ª–æ–º–∞–µ—Ç—Å—è –∏ –æ–Ω–∏ —Ä–∞—Å—Ö–æ–¥—è—Ç—Å—è",
                playerCount: 2
            },
            {
                string: "(Player1) –ø–æ—á—Ç–∏ —Å—ä–µ–¥–∞–µ—Ç—Å—è —è—â–µ—Ä–æ–º, –Ω–æ (Player2) –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞ –ø–æ–º–æ—â—å",
                playerCount: 2
            },
            {
                string: "(Player1) –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ —Ç–≤–æ—Ä—è—â–∏–º—Å—è —Ö–∞–æ—Å–æ–º –≤–º–µ—Å—Ç–µ —Å (Player2)",
                playerCount: 2
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç (Player2) –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 2
            },
            {
                string: "(Player1) –Ω–∞–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ (Player2) –∏ –∫—Ä–∞–¥—ë—Ç –≤—Å—ë –µ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –æ–±–º–µ–Ω–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏–ø–∞—Å–∞–º–∏",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –∑–∞–∫–ª—é—á–∞—é—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ —É–±–∏–≤–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –¥–æ —Å–∞–º–æ–≥–æ —Ñ–∏–Ω–∏—à–∞",
                playerCount: 2
            },
            {
                string: "(Player1) –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è —Å (Player2) –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Ü–∏–∫–ª–æ–≤ –∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥—É –æ –ø–µ—Ä–µ–∂–∏—Ç–æ–º",
                playerCount: 2
            },
            {
                string: "(Player1) –Ω–∞–ø–∞–¥–∞–µ—Ç –Ω–∞ (Player2), –Ω–æ –æ–±–∞ –≤—ã–∂–∏–≤–∞—é—Ç",
                playerCount: 2
            },
            {
                string: "(Player1) –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–æ–±—Ä–∞—Ç—å —É (Player2) –±–æ–º–±—É, –Ω–æ (Player2) –∫–∏–¥–∞–µ—Ç –µ—ë –≤ —Å—Ç–æ—Ä–æ–Ω—É –∏ –≤–∑—Ä—ã–≤–∞–µ—Ç",
                playerCount: 2
            },
            {
                string: "(Player1) —Å–ª–µ–¥—É–µ—Ç –∑–∞ (Player2), –Ω–∞–¥–µ—è—Å—å, —á—Ç–æ —Ç–∞–∫ –æ–Ω —Å–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —É–±–µ–∂–∏—â–µ",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) —Ä–µ—à–∞—é—Ç –Ω–µ –¥—Ä–∞—Ç—å—Å—è –∑–∞ –µ–¥—É, –∞ –ø–æ–¥–µ–ª–∏—Ç—å –µ—ë –ø–æ—Ä–æ–≤–Ω—É",
                playerCount: 2
            },
            {
                string: "(Player1) –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç (Player2) —Ä–∞–±–æ—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ, –Ω–æ —Ç–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ø—ã—Ç–∫–æ–π —É–±–∏—Ç—å",
                playerCount: 2
            },
            {
                string: "(Player1) –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ –≤–∑—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –µ–¥—ã, –∏ –¥–∞—Ä–∏—Ç —á–∞—Å—Ç—å (Player2)",
                playerCount: 2
            },
            {
                string: "(Player1) –≥–æ–≤–æ—Ä–∏—Ç (Player2) –ø—É—Ç—å –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–±–µ–∂–∏—â–∞, –æ–¥–Ω–∞–∫–æ (Player2) —Å—á–∏—Ç–∞–µ—Ç —ç—Ç–æ —Å–ª–∏—à–∫–æ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º –∏ –Ω–µ —Å–ª–µ–¥—É–µ—Ç –ø–æ –ø—É—Ç–∏",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –∫–∏–¥–∞—é—Ç—Å—è –≤ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø–µ—Ä–≤—ã–º–∏ –ø–æ–ø–∞–¥–∞—é—â–∏–º–∏—Å—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏",
                playerCount: 2
            },
            {
                string: "(Player1) —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –∫–∞–∂–¥—ã–π –±–æ–µ–ø—Ä–∏–ø–∞—Å –Ω–∞ —Å–≤–æ—ë–º –ø—É—Ç–∏, –Ω–µ –æ—Å—Ç–∞–≤–ª—è—è –∏ –∫–æ–ø—å—è –¥–ª—è (Player2)",
                playerCount: 2
            },
            {
                string: "(Player1) –¥–∞—Ä–∏—Ç –≤–µ—Å—å –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ö–ª–∞–º (Player2), –∞ —Å–∞–º —É–Ω–æ—Å–∏—Ç –≤—Å—ë —Ü–µ–Ω–Ω–æ–µ",
                playerCount: 2
            },
            {
                string: "(Player1) –≤–∏–¥–∏—Ç, –∫–∞–∫ (Player2) –∫—Ä–∞–¥—ë—Ç –µ–≥–æ –∑–∞–ø–∞—Å—ã, –Ω–æ –±–æ–∏—Ç—Å—è –≤–º–µ—à–∏–≤–∞—Ç—å—Å—è",
                playerCount: 2
            },
            {
                string: "(Player1) –±—å—ë—Ç (Player2) –ø–æ –ª–∏—Ü—É –∏ –±–µ–∂–∏—Ç –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –æ–±–∞ –ø—ã—Ç–∞—é—Ç—Å—è –≤—ã—Ç–æ—Ä–≥–æ–≤–∞—Ç—å —É –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø—É—Ç—å –¥–æ —É–±–µ–∂–∏—â–∞",
                playerCount: 2
            },
            {
                string: "(Player1) —Å–æ–≤–µ—Ä—à–∞–µ—Ç –æ–±–º–µ–Ω —Å (Player2). (Player2) –≤–¥—Ä—É–≥ –∏—Å–ø—É–≥–∞–Ω–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –µ–º—É –∑–∞ —Å–ø–∏–Ω—É –∏, –ø–æ–∫–∞ (Player1) –æ—Ç–≤–ª—ë–∫—Å—è, —É–±–µ–≥–∞–µ—Ç —Å –µ–≥–æ —Ç–æ–≤–∞—Ä–æ–º",
                playerCount: 2
            },


            {
                string: "(Player1), (Player2) –∏ (Player3) –ø—ã—Ç–∞—é—Ç—Å—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, –Ω–æ –Ω–µ –º–æ–≥—É—Ç –ø–æ–ª–∞–¥–∏—Ç—å –∏ —Ä–∞—Å—Ö–æ–¥—è—Ç—Å—è",
                playerCount: 3
            },
            {
                string: "(Player1), (Player2) –∏ (Player3) —Å–ø–æ—Ä—è—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–π –∏–∑ –Ω–∏—Ö —É–º—Ä—ë—Ç",
                playerCount: 3
            },
            {
                string: "(Player1), (Player2) –∏ (Player3) –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∏–ø–∞—Å–æ–≤",
                playerCount: 3
            },
            {
                string: "–ü–æ–∫–∞ (Player1) –∏ (Player2) –¥–µ–ª—è—Ç –ø—Ä–∏–ø–∞—Å—ã, (Player3) –∫—Ä–∞–¥–µ—Ç –∏—Ö –≤—Å–µ",
                playerCount: 3
            },
            {
                string: "(Player1) –∏ (Player2) —É–≥—Ä–æ–∂–∞—é—Ç (Player3) –∏ –∑–∞–±–∏—Ä–∞—é—Ç –µ–≥–æ –ø—Ä–∏–ø–∞—Å—ã",
                playerCount: 3
            },
            {
                string: "(Player1), (Player2) –∏ (Player3) —Å–ª—É—á–∞–π–Ω–æ —Å–±–∏–≤–∞—é—Ç—Å—è –≤ –∫—É—á—É, –Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ",
                playerCount: 3
            },
            {
                string: "(Player1) –≤—ã–º–æ–≥–∞–µ—Ç —É (Player2) –∏ (Player3) –µ–¥—É",
                playerCount: 3
            },
            {
                string: "(Player1) –ø—ã—Ç–∞–µ—Ç—Å—è —É–±–∏—Ç—å (Player2) –∏ (Player3) —Ä–∞–¥–∏ –∏—Ö –ø—Ä–∏–ø–∞—Å–æ–≤, –Ω–æ —Ç–µ—Ä–ø–∏—Ç –Ω–µ—É–¥–∞—á—É –∏ —á—É–¥–æ–º —Å–±–µ–≥–∞–µ—Ç",
                playerCount: 3
            },
            {
                string: "(Player1) –∏ (Player2) –∂–µ—Å—Ç–æ–∫–æ –¥–µ—Ä—É—Ç—Å—è –∑–∞ –æ—Ä—É–∂–∏–µ, –Ω–æ –≤ –∫–æ–Ω—Ü–µ –µ–≥–æ —Å—Ç–∞—Å–∫–∏–≤–∞–µ—Ç (Player3) –∏ —Ä–∞–∑–≥–æ–Ω—è–µ—Ç –æ–±–æ–∏—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤",
                playerCount: 3
            },

            {
                string: "(Player1), (Player2) –∏ (Player3) –∂–µ—Å—Ç–æ–∫–æ –¥–µ—Ä—É—Ç—Å—è –∑–∞ –±–æ–º–±—É —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—É—é –ø–æ–¥ —à—É–º–æ–∫ —Å—Ç–∞—Å–∫–∏–≤–∞–µ—Ç (Player4)",
                playerCount: 4
            },
            {
                string: "–ü–æ–∫–∞ (Player1) –∏ (Player2) –ø—ã—Ç–∞—é—Ç—Å—è –ø–æ–¥–µ–ª–∏—Ç—å –∑–∞–ø–∞—Å—ã, (Player3) –∏ (Player4) –≤ —Å—Ç–æ—Ä–æ–Ω–∫–µ –¥–µ—Ä—É—Ç—Å—è –∑–∞ –ø—Ä–∞–≤–æ —É–∫—Ä–∞—Å—Ç—å —ç—Ç–∏ —Å–∞–º—ã–µ –∑–∞–ø–∞—Å—ã",
                playerCount: 4
            },
            {
                string: "(Player1), (Player2) –∏ (Player3) –∑–∞–≥—Ä–µ–±–∞—é—Ç —Å–µ–±–µ –ª—É—á—à–µ–µ –æ—Ä—É–∂–∏–µ, –Ω–æ (Player4) —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –≤—Å—ë –∏—Ö –¥–æ–±—Ä–æ",
                playerCount: 4
            },
        ],
        lethal: [
            {
                string: "(Player1-Died) —Å–º—ã–≤–∞–µ—Ç –¥–æ–∂–¥—ë–º",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–°–º—ã–ª–æ –¥–æ–∂–¥—ë–º`;
                }
            },
            {
                string: "(Player1-Died) —Ö–≤–∞—Ç–∞–µ—Ç—Å—è —Å—Ç—Ä–∏–∂–æ–º",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª –ø–æ—Å—Ç—Ä–∏–∂–µ–Ω —Å—Ç—Ä–∏–∂–æ–º`;
                }
            },
            {
                string: "(Player1-Died) —É–º–∏—Ä–∞–µ—Ç –æ—Ç –≥–æ–ª–æ–¥–∞",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü–æ–º–µ—Ä —Å –≥–æ–ª–æ–¥—É`;
                }
            },
            {
                string: "(Player1-Died) —Å—ä–µ–¥–∞–µ—Ç—Å—è —è—â–µ—Ä–æ–º",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü–µ—Ä–µ–º–æ–ª–æ–ª—Å—è –≤ –∑—É–±–∞—Ö —è—â–µ—Ä–∞`;
                }
            },
            {
                string: "(Player1-Died) —Å—ä–µ–¥–∞–µ—Ç—Å—è —Å—Ç–µ—Ä–≤—è—Ç–Ω–∏–∫–æ–º",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª —Å—Ö–≤–∞—á–µ–Ω —Å—Ç–µ—Ä–≤—è—Ç–Ω–∏–∫–æ–º`;
                }
            },
            {
                string: "(Player1-Died) –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ–Ω–∑—ë–Ω –∫–æ–ø—å—ë–º –º—É—Å–æ—Ä—â–∏–∫–∞",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª –ø—Ä–æ–Ω–∑—ë–Ω –∫–æ–ø—å—ë–º –º—É—Å–æ—Ä—â–∏–∫–∞`;
                }
            },
            {
                string: "(Player1-Died) –ø–∞–¥–∞–µ—Ç —Å –æ–≥—Ä–æ–º–Ω–æ–π –≤—ã—Å–æ—Ç—ã –∏ —É–º–∏—Ä–∞–µ—Ç",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–± –æ—Ç –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏`;
                }
            },
            {
                string: "(Player1-Died) —Ä–µ—à–∞–µ—Ç –ø–æ–∫–æ–Ω—á–∏—Ç—å —Å –∂–∏–∑–Ω—å—é –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–∂–¥—é —Å–º—ã—Ç—å —Å–µ–±—è",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–£–º–µ—Ä –æ—Ç –æ—Ç—á–∞—è–Ω–∏—è`;
                }
            },
            {
                string: "(Player1-Died) –ø–æ–≥–∏–±–∞–µ—Ç –æ—Ç —Ä–∞–∑—Ä—è–¥–∞ —Ç–æ–∫–∞ —Å–∫–æ–ª–æ–ø–µ–Ω–¥—Ä—ã",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª –ø—Ä–æ–∂–∞—Ä–µ–Ω —Å–∫–æ–ª–æ–ø–µ–Ω–¥—Ä–æ–π`;
                }
            },
            {
                string: "(Player1-Died) —Å—ä–µ–¥–∞–µ—Ç —á—Ç–æ-—Ç–æ —è–¥–æ–≤–∏—Ç–æ–µ –∏ —É–º–∏—Ä–∞–µ—Ç",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–û—Ç—Ä–∞–≤–∏–ª—Å—è`;
                }
            },
            {
                string: "(Player1-Died) —Å—ä–µ–¥–∞–µ—Ç—Å—è –ª–µ–≤–∏–∞—Ñ–∞–Ω–æ–º",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–± –æ—Ç –≤–æ—Ä–µ`;
                }
            },
            {
                string: "(Player1-Died) —Ç–æ–Ω–µ—Ç –≤ –ª—É–∂–µ —Å –ø–∏—è–≤–∫–∞–º–∏",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ö—É–ø–∞–ª—Å—è —Å –ø–∏—è–≤–∫–∞–º–∏`;
                }
            },
            {
                string: "(Player1-Died) —É–º—É–¥—Ä—è–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –±–æ–º–±—É —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏, –Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å –Ω–µ–π –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∏ –ø–æ–≥–∏–±–∞–µ—Ç",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–± –æ—Ç —Ö–∞–ª–∞—Ç–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è —Å –æ–ø–∞—Å–Ω—ã–º –æ—Ä—É–∂–∏–µ–º`;
                }
            },
            {
                string: "(Player1-Died) —Ö–≤–∞—Ç–∞–µ—Ç—Å—è —Å–ø—É—Å—Ç–∫–æ–≤—ë—Ä—Ç–∫–æ–π",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–í—Å—Ç—Ä–µ—Ç–∏–ª –≤–µ—Å—ë–ª—ã–π —Å—é—Ä–ø—Ä–∏–∑ –Ω–∞ –ø–æ—Ç–æ–ª–∫–µ`;
                }
            },
            {
                string: "(Player1-Died) –Ω–∞—Ö–æ–¥–∏—Ç 1Ã∑ÃõÕíÃéÕõÕ†ÕëÕêÃÇÃøÃìÕêÕÑÕÄÕéÃ¶ÕúÃùÃ†Ã†Ã¢1Ã∏ÕêÃØ1Ã∂ÃÉÕãÃãÕóÃïÃïÃ∞Ã†ÃºÃ•ÕñÃûÕñÃºÃªÃ™Ã•ÕîÕô0Ã∑ÕãÕÄÕÜÕùÃèÃÄÃæÃíÃÉÃÄÃôÃ§Ã∫Ã¢ÃôÃ®Ã∫0Ã¥ÕåÕíÕÑÃΩÃÖÃëÃéÃìÃÖÕéÃ±Ãª0Ã∂ÃæÃÑÕÄÕòÃâÕóÃöÃòÃ±ÕéÃ¢ÕçÃ£Ã´Ã≥ÕôÕñÃ£Ã∫ÃØÃπ1ÃµÃäÃëÕÑÃÅÃÖÕ†ÃøÕäÕÄÕëÃ™Ã†Ã±ÕçÃüÃªÃú0Ã¥ÃáÕêÃûÃ± Ã∏ÃâÕêÕíÕùÃæÕÅÃïÕ†ÕÑÕÑÃÖÃûÃßÕî1Ã∑ÃõÕ†ÃèÃêÕòÕäÃΩÃéÃìÃäÕóÕÉÃΩÃπÃ∞Ã≥ÕçÕÖÃ∞ÕáÃûÕá0Ã¥ÃïÕùÕòÃñÃ≥Ã∞ÕïÃ∫Ã™ÃπÃ¶Ã§Ã≠ÕïÃ•Õì1Ã∏ÕÜÃÜÃÅÃèÃΩÃÜÕåÕëÃåÕåÃøÃ≥ÕáÃ†Ã≠ÃπÕúÃ©Ã∫Ã§0Ã∑ÕÑÕÅÕùÃåÕíÃüÃ¶Ã•ÃùÕçÃ¨ÃôÕö1Ã∑ÃëÃøÃÇÃëÃÅÃíÕòÕäÃàÃ†Ã†1Ã∂ÃíÃÑÃÅÃåÕãÕëÃêÕíÕëÕëÃªÃ£Ã§ÕìÃ†Õá1Ã∑ÃêÃÅÃöÃëÃÑÕÇÕÄÕÜÃÑÃπÃ§ÕïÃûÕçÃ≠0Ã¥ÃäÕÉÃöÃçÃçÃ°ÕçÃ†ÃØÃ§Ã≥ÕÖÕâÃ¢Ã´ÕîÃ¨Õô Ã¥ÕòÃàÕêÃêÕÑÕÉÃøÃëÕÇÕÅÕàÃºÃ°Ã°ÃùÃòÃ∫ÃπÃ†ÃòÃ¶Ãò1Ã∑ÕêÃÄÃäÃïÕäÕîÃúÕñÃÆÃòÕñÃ¢0Ã¥ÃíÕÇÕÇÕÑÃáÕåÕÅÃæÕôÃñÃ°ÃπÕñÃ∫ÕÖÃ®Ãü1Ã∑ÕÅÃöÃíÕäÃæÃòÃ§Ã¨ÃºÃ¢Ã≤ÃØÃ¨1Ã¥ÃÑÕäÃäÃéÃÄÕ†ÃÉÃßÕñÕÖÃñÕìÃúÃóÃñÃ†ÃªÕçÃ∫Õà1Ã∏ÃìÕÇÃßÕîÃºÕéÃñÃºÃ•1Ã∏ÃøÃãÃóÕïÃ§Ã®Ã°1Ã¥ÕÑÃàÕç0Ã¥ÃÅÃ∞Ã∫ÃñÃ´Ã†ÃºÃ∞Ã¨Ã≠Ã†ÕîÃ£Õñ –∏ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–Ω–æ—Å–∏—Ç—Å—è",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `1Ã∑ÃõÕíÃéÕõÕ†ÕëÕêÃÇÃøÃìÕêÕÑÕÄÕéÃ¶ÕúÃùÃ†Ã†Ã¢1Ã∏ÕêÃØ1Ã∂ÃÉÕãÃãÕóÃïÃïÃ∞Ã†ÃºÃ•ÕñÃûÕñÃºÃªÃ™Ã•ÕîÕô0Ã∑ÕãÕÄÕÜÕùÃèÃÄÃæÃíÃÉÃÄÃôÃ§Ã∫Ã¢ÃôÃ®Ã∫0Ã¥ÕåÕíÕÑÃΩÃÖÃëÃéÃìÃÖÕéÃ±Ãª0Ã∂ÃæÃÑÕÄÕòÃâÕóÃöÃòÃ±ÕéÃ¢ÕçÃ£Ã´Ã≥ÕôÕñÃ£Ã∫ÃØÃπ1ÃµÃäÃëÕÑÃÅÃÖÕ†ÃøÕäÕÄÕëÃ™Ã†Ã±ÕçÃüÃªÃú0Ã¥ÃáÕêÃûÃ± Ã∏ÃâÕêÕíÕùÃæÕÅÃïÕ†ÕÑÕÑÃÖÃûÃßÕî1Ã∑ÃõÕ†ÃèÃêÕòÕäÃΩÃéÃìÃäÕóÕÉÃΩÃπÃ∞Ã≥ÕçÕÖÃ∞ÕáÃûÕá0Ã¥ÃïÕùÕòÃñÃ≥Ã∞ÕïÃ∫Ã™ÃπÃ¶Ã§Ã≠ÕïÃ•Õì1Ã∏ÕÜÃÜÃÅÃèÃΩÃÜÕåÕëÃåÕåÃøÃ≥ÕáÃ†Ã≠ÃπÕúÃ©Ã∫Ã§0Ã∑ÕÑÕÅÕùÃåÕíÃüÃ¶Ã•ÃùÕçÃ¨ÃôÕö1Ã∑ÃëÃøÃÇÃëÃÅÃíÕòÕäÃàÃ†Ã†1Ã∂ÃíÃÑÃÅÃåÕãÕëÃêÕíÕëÕëÃªÃ£Ã§ÕìÃ†Õá1Ã∑ÃêÃÅÃöÃëÃÑÕÇÕÄÕÜÃÑÃπÃ§ÕïÃûÕçÃ≠0Ã¥ÃäÕÉÃöÃçÃçÃ°ÕçÃ†ÃØÃ§Ã≥ÕÖÕâÃ¢Ã´ÕîÃ¨Õô Ã¥ÕòÃàÕêÃêÕÑÕÉÃøÃëÕÇÕÅÕàÃºÃ°Ã°ÃùÃòÃ∫ÃπÃ†ÃòÃ¶Ãò1Ã∑ÕêÃÄÃäÃïÕäÕîÃúÕñÃÆÃòÕñÃ¢0Ã¥ÃíÕÇÕÇÕÑÃáÕåÕÅÃæÕôÃñÃ°ÃπÕñÃ∫ÕÖÃ®Ãü1Ã∑ÕÅÃöÃíÕäÃæÃòÃ§Ã¨ÃºÃ¢Ã≤ÃØÃ¨1Ã¥ÃÑÕäÃäÃéÃÄÕ†ÃÉÃßÕñÕÖÃñÕìÃúÃóÃñÃ†ÃªÕçÃ∫Õà1Ã∏ÃìÕÇÃßÕîÃºÕéÃñÃºÃ•1Ã∏ÃøÃãÃóÕïÃ§Ã®Ã°1Ã¥ÕÑÃàÕç0Ã¥ÃÅÃ∞Ã∫ÃñÃ´Ã†ÃºÃ∞Ã¨Ã≠Ã†ÕîÃ£Õñ`;
                }
            },
            {
                string: "(Player1-Died) –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ–±—ä—è—Ç–∏—è –≥–∏–≥–∞–Ω—Å—Ç–∫–æ–π –º–µ–¥—É–∑—ã",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–± –æ—Ç –æ–±–Ω–∏–º–∞—à–µ–∫`;
                }
            },
            {
                string: "(Player1-Died) –Ω–∞—Ç—ã–∫–∞–µ—Ç—Å—è –Ω–∞ –∫—É—á—É –∑–ª—ã—Ö –ø–∞—É–∫–æ–≤ –∏ –ø–æ–≥–∏–±–∞–µ—Ç",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª —Å–æ–∂—Ä–∞–Ω –ø–∞—É–∫–∞–º–∏`;
                }
            },
            {
                string: "(Player1-Died) —Ä–µ—à–∞–µ—Ç —Å–∫—Ä–∞—Å–∏—Ç—å –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã –Ω–∞—Å—Ç–æ—è—â–µ–π —Ä–µ–∑–Ω—ë–π, –Ω–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ, –∫–æ–≥–æ –µ–º—É —É–¥–∞—ë—Ç—Å—è —É–±–∏—Ç—å - —ç—Ç–æ —Å–∞–º–æ–≥–æ —Å–µ–±—è",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ò–º–µ–ª –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –º–µ—á—Ç—ã`;
                }
            },

            {
                string: "(Player1-Died) –∏ (Player2-Died) –¥–µ—Ä—É—Ç—Å—è –∑–∞ –µ–¥—É, –Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–æ–∂–¥—å. –û–Ω–∏ –Ω–µ —É—Å–ø–µ–≤–∞—é—Ç —É–∫—Ä—ã—Ç—å—Å—è –≤ —É–±–µ–∂–∏—â–µ –∏ –∏—Ö –æ–±–æ–∏—Ö —Å–º—ã–≤–∞–µ—Ç",
                playerCount: 2,
                howManyDeaths: 2,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    placements.push(player2);

                    player1.alive = false;
                    player1.killedBy = `–°–º—ã–ª–æ –¥–æ–∂–¥—ë–º`;

                    player2.alive = false;
                    player2.killedBy = `–°–º—ã–ª–æ –¥–æ–∂–¥—ë–º`;

                }
            },
            {
                string: "(Player1-Died) –∏ (Player2) –¥–µ—Ä—É—Ç—Å—è –∑–∞ –µ–¥—É, –Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–æ–∂–¥—å. (Player1-Died) —Å–º—ã–≤–∞–µ—Ç –¥–æ–∂–¥–µ–º, –∞ (Player2) –¥–æ–±–∏—Ä–∞–µ—Ç—Å—è –¥–æ —É–±–µ–∂–∏—â–∞",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–°–º—ã–ª–æ –¥–æ–∂–¥—ë–º`;
                }
            },
            {
                string: "(Player1-Died) –ø–æ—á—Ç–∏ –¥–æ–±–µ–≥–∞–µ—Ç –¥–æ —É–±–µ–∂–∏—â–∞, –Ω–æ –µ–≥–æ –∞—Ç–∞–∫—É–µ—Ç –∏ —É–±–∏–≤–∞–µ—Ç —Å–æ —Å–ø–∏–Ω—ã (Player2)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª –≤–Ω–µ–∑–∞–ø–Ω–æ —É–±–∏—Ç <strong><font color="ffff00">` + player2.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –∏ (Player2-Died) –¥–µ—Ä—É—Ç—Å—è, –Ω–æ –≤ –∏—Ç–æ–≥–µ –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –æ–±–∞ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–µ–Ω—ã, —á—Ç–æ–±—ã –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —É–±–µ–∂–∏—â–∞",
                playerCount: 2,
                howManyDeaths: 2,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    placements.push(player2);

                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª —Å–º—ã—Ç –¥–æ–∂–¥—ë–º, —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–µ–Ω–Ω—ã–π <strong><font color="ffff00">` + player2.name + `</font></strong>`;

                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª —Å–º—ã—Ç –¥–æ–∂–¥—ë–º —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–µ–Ω–Ω—ã–π <strong><font color="ffff00">` + player1.name + `</font></strong>`;

                }
            },
            {
                string: "(Player1) —Ä–µ—à–∞–µ—Ç —Å—Ä–∞–∑—É –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Å–≤–æ—ë –ø–µ—Ä–≤–æ–µ —É–±–∏–π—Å—Ç–≤–æ –∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–¥–µ–ª—ã–≤–∞–µ—Ç—Å—è —Å (Player2-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª —É–±–∏—Ç –∫—Ä–æ–≤–æ–∂–∞–¥–Ω—ã–º <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –Ω–∞–ø–∞–¥–∞–µ—Ç –Ω–∞ (Player2), –Ω–æ (Player2) –∑–∞—â–∏—â–∞–µ—Ç—Å—è –∏ —É–±–∏–≤–∞–µ—Ç —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª —É–±–∏—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∂–µ—Ä—Ç–≤–æ–π, <strong><font color="ffff00">` + player2.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –∫–∏–¥–∞–µ—Ç –±–æ–º–±—É –≤ (Player2), –Ω–æ —Å–ª—É—á–∞–π–Ω–æ –≤–∑—Ä—ã–≤–∞–µ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–± –æ—Ç –ø—Ä–∏–ª–µ—Ç–µ–≤—à–µ–π –Ω–µ —Ç—É–¥–∞ –±–æ–º–±—ã`;
                }
            },
            {
                string: "(Player1) –≥–æ–≤–æ—Ä–∏—Ç (Player2-Died) –ø—É—Ç—å –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–±–µ–∂–∏—â–∞, –Ω–æ –æ–Ω –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ª–æ–∂–Ω—ã–º –∏ (Player2-Died) —Å–º—ã–≤–∞–µ—Ç –¥–æ–∂–¥—ë–º",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª —É–±–∏—Ç —Ö–∏—Ç—Ä–æ–∂–æ–ø–æ—Å—Ç—å—é <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },


            {
                string: "(Player1-Died) –ø—ã—Ç–∞–µ—Ç—Å—è —É–∫—Ä–∞—Å—Ç—å –ø—Ä–∏–ø–∞—Å—ã (Player2) –∏ (Player3), –Ω–æ –æ–Ω–∏ –∑–∞–º–µ—á–∞—é—Ç –µ–≥–æ –∏ —É–±–∏–≤–∞—é—Ç",
                playerCount: 3,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player3.kills++;
                    player3.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player2.name + `</font></strong> –∏ <strong><font color="ffff00">` + player3.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1), (Player2-Died) –∏ (Player3) —Å–ø–æ—Ä—è—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–π –∏–∑ –Ω–∏—Ö —É–º—Ä—ë—Ç. (Player2-Died), —Ä–∞—Å—Ü–µ–Ω–∏–≤ —ç—Ç–æ –∫–∞–∫ –≤—ã–∑–æ–≤, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ–Ω–∑–∞–µ—Ç —Å–µ–±—è –∫–æ–ø—å–µ–º",
                playerCount: 3,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª —É–±–∏—Ç –∂–µ–ª–∞–Ω–∏–µ–º –ø–æ–±–µ–¥–∏—Ç—å –≤ —Å–ø–æ—Ä–µ`;
                }
            },
            {
                string: "(Player1) –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–∞–º–æ–µ —Å–µ—Ä–¥—Ü–µ —Ö–∞–æ—Å–∞, —É–±–∏–≤–∞—è —Ç–∞–º (Player2-Died) –∏ (Player3-Died)",
                playerCount: 3,
                howManyDeaths: 2,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    placements.push(player3);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player1.kills++;
                    player1.hasKilled.push(player3.name);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                    player3.alive = false;
                    player3.killedBy = `–ë—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –∏ (Player2-Died) –¥–µ—Ä—É—Ç—Å—è –∑–∞ –µ–¥—É. –û–±–æ–∏—Ö —É–±–∏–≤–∞–µ—Ç –≤–Ω–µ–∑–∞–ø–Ω–æ –æ–±—ä—è–≤–∏–≤—à–∏–π—Å—è (Player3)",
                playerCount: 3,
                howManyDeaths: 2,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    placements.push(player2);
                    player3.kills++;
                    player3.hasKilled.push(player1.name);
                    player3.kills++;
                    player3.hasKilled.push(player2.name);
                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player3.name + `</font></strong>`;
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player3.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–ø–∞—Å—Ç—å –Ω–∞ (Player2), –Ω–æ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —É–±–∏—Ç (Player3)",
                playerCount: 3,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player3.kills++;
                    player3.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–ü–æ–ª–µ–∑ –Ω–∞ –∫–æ–≥–æ –Ω–µ –Ω–∞–¥–æ (—É–±–∏—Ç <strong><font color="ffff00">` + player3.name + `</font></strong>, –∑–∞—â–∏—â–∞—é—â–∏–º <strong><font color="ffff00">` + player2.name + `</font></strong>)`;
                }
            },
            {
                string: "(Player1) –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–æ–±—Ä–∞—Ç—å —É (Player2) –±–æ–º–±—É, –Ω–æ (Player2) –∫–∏–¥–∞–µ—Ç –µ—ë –≤ —Å—Ç–æ—Ä–æ–Ω—É –∏ —Å–ª—É—á–∞–π–Ω–æ –≤–∑—Ä—ã–≤–∞–µ—Ç (Player3-Died) ",
                playerCount: 3,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player3);
                    player2.kills++;
                    player2.hasKilled.push(player3.name);
                    player3.alive = false;
                    player3.killedBy = `–ë—ã–ª —É–±–∏—Ç –±–æ–º–±–æ–π <strong><font color="ffff00">` + player2.name + `</font></strong> (—Å–ª—É—á–∞–π–Ω–æ —á–µ—Å—Ç–Ω–æ)`;
                }
            },
            {
                string: "(Player1-Died) —Ä–µ—à–∞–µ—Ç —Å–∫—Ä–∞—Å–∏—Ç—å –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã –Ω–∞—Å—Ç–æ—è—â–µ–π —Ä–µ–∑–Ω—ë–π, –∫–∏–¥–∞—è –∫–æ–ø—å—è –≤–æ –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —É–±–∏–≤–∞—è (Player2-Died), (Player3-Died) –∏ (Player4-Died), –∞ –∑–∞—Ç–µ–º –ø–æ–≥–∏–±–∞—è —Å–∞–º–æ–º—É",
                playerCount: 4,
                howManyDeaths: 4,
                updateData: function (player1, player2, player3, player4) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player1.kills++;
                    player1.hasKilled.push(player3.name);
                    player1.kills++;
                    player1.hasKilled.push(player4.name);

                    placements.push(player1);
                    placements.push(player2);
                    placements.push(player3);
                    placements.push(player4);

                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–± –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∂–µ —Ä–µ–∑–Ω–µ`;

                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª –∑–∞—Ä–µ–∑–∞–Ω <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                    player3.alive = false;
                    player3.killedBy = `–ë—ã–ª –∑–∞—Ä–µ–∑–∞–Ω <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                    player4.alive = false;
                    player4.killedBy = `–ë—ã–ª –∑–∞—Ä–µ–∑–∞–Ω <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            }
        ]*/
    }
}

var eventCycle = {
    regular: function () {
        var eventObject = decideEventObject(eventCycle[`array`][`regular`]);

        var playerCount = eventObject.playerCount;

        var players = decidePlayers(playerCount);
        currentUnusedCharacterNumber -= playerCount;

        if (`updatePlayerData` in eventObject) {
            console.log("O-o-oh, there's an updatePlayerData function! Executing...")
            eventObject.updateData.apply(eventObject, players);
        }

        var eventString = parseAllNamesAndPronouns(eventObject.string, players)
        console.log(eventString, players);

        if (playerCount === 1) var eventImage = makeImages(players[0].image)
        else if (playerCount === 2) var eventImage = makeImages(players[0].image, players[1].image)
        else if (playerCount === 3) var eventImage = makeImages(players[0].image, players[1].image, players[2].image)
        else if (playerCount === 4) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image)
        else if (playerCount === 5) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image)
        else if (playerCount === 6) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image, players[5].image);

        var event = eventImage + eventString + `<br><br>`;

        return event;
    },
    lethal: function () {
        do var eventObject = decideEventObject(eventCycle[`array`][`lethal`])
        while (eventObject.howManyDeaths >= currentCharacterNumber);

        var playerCount = eventObject.playerCount;

        var players = decidePlayers(playerCount);
        currentUnusedCharacterNumber -= playerCount;

        var eventString = parseAllNamesAndPronouns(eventObject.string, players)
        console.log(eventString, players);

        if (playerCount === 1) var eventImage = makeImages(players[0].image)
        else if (playerCount === 2) var eventImage = makeImages(players[0].image, players[1].image)
        else if (playerCount === 3) var eventImage = makeImages(players[0].image, players[1].image, players[2].image)
        else if (playerCount === 4) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image)
        else if (playerCount === 5) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image)
        else if (playerCount === 6) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image, players[5].image);

        var event = eventImage + eventString + `<br><br>`;

        eventObject.updateData.apply(eventObject, players);

        return event;
    },
    revival: function () {
        var eventObject = decideEventObject(eventCycle[`array`][`revival`]);

        var playerCount = eventObject.playerCount;

        var revivedPlayers = decideRevivedPlayers(eventObject.howManyRevivals);
        if (revivedPlayers == "stop") return "stop";
        var justPlayers = decidePlayers(playerCount - eventObject.howManyRevivals);

        var players = revivedPlayers.concat(justPlayers);

        currentUnusedCharacterNumber -= playerCount - eventObject.howManyRevivals;

        var eventString = parseAllNamesAndPronouns(eventObject.string, players)
        console.log(eventString, players);

        if (playerCount === 1) var eventImage = makeImages(players[0].image)
        else if (playerCount === 2) var eventImage = makeImages(players[0].image, players[1].image)
        else if (playerCount === 3) var eventImage = makeImages(players[0].image, players[1].image, players[2].image)
        else if (playerCount === 4) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image)
        else if (playerCount === 5) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image)
        else if (playerCount === 6) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image, players[5].image);

        var event = eventImage + eventString + `<br><br>`;

        eventObject.updateData.apply(eventObject, players);

        return event;
    },
    array: {
        regular: [
            {
                string: "<1> throws <1their> simulacrum at an incoherent veilklight",
                playerCount: 1
            },
            {
                string: "<1> stumbles into a room <1they> did not know existed",
                playerCount: 1
            },
            {
                string: "<1> is",
                playerCount: 1
            },
            {
                string: "<1> fights through rows of enemies, leaving behind a trail of sludge",
                playerCount: 1
            },
            {
                string: "<1> locks <1themself> in a personnel room and tries to calm down",
                playerCount: 1
            },
            {
                string: "<1> searches for sfer and useful items",
                playerCount: 1
            },
            {
                string: "<1> takes a moment to rest",
                playerCount: 1
            },
            {
                string: "<1> finds bright weaponry but, not knowing its effectiveness, leaves it be",
                playerCount: 1
            },
            {
                string: "<1> mends <1their> wounds with restorative cysts",
                playerCount: 1
            },
            {
                string: "<1> finds some simulacra and drinks it all",
                playerCount: 1
            },
            {
                string: "<1> grieves the loss of <1their> false enviroments",
                playerCount: 1
            },
            {
                string: "<1> hears it calling",
                playerCount: 1
            },
            {
                string: "<1> is ambushed by a group of very sneaky containers",
                playerCount: 1
            },
            {
                string: "<1> finds a kavruka. Yay! Explode everything!",
                playerCount: 1
            },
            {
                string: "<1> chats with a barfriend, who keeps insisting <1they> seek shelter, but <1> just does not stop talking",
                playerCount: 1
            },
            {
                string: "<1> finds bright weaponry and uses it to shoot a nearby golem 28 times before running out of ammunition",
                playerCount: 1
            },
            {
                string: "<1> is doing violence",
                playerCount: 1
            },
            {
                string: "<1> overhears someone talking but does not recognize the voices. <1they> <decide1> to back off",
                playerCount: 1
            },
            {
                string: "<1> uses <1their> last disabler charge to escape a large group of enemies",
                playerCount: 1
            },
            {
                string: "<1> steals something from <1their> friend's room",
                playerCount: 1
            },
            {
                string: "<1> says a very bad word after being hit in the face by a container",
                playerCount: 1
            },
            {
                string: "<1> makes a bomb",
                playerCount: 1
            },
            {
                string: "<1> chews on corru",
                playerCount: 1
            },
            {
                string: "<1> engages in a deep philosophical conversation with a newly-sapient chair",
                playerCount: 1
            },
            {
                string: "<1> finds and pets a dog",
                playerCount: 1
            },
            {
                string: "<1> talks to a very strange door‚Ä¶ It does not look like made out of corru‚Ä¶",
                playerCount: 1
            },
            {
                string: "<1> sets up deadly traps",
                playerCount: 1
            },
            {
                string: "<1> curses Velzie",
                playerCount: 1
            },

            {
                string: "<1> is almost killed by a spire attendant, but <2> saves <1them>",
                playerCount: 2
            },
            {
                string: "<1> and <2> discuss possible escape options",
                playerCount: 2
            },
            {
                string: "<1> throws an explosive too close to <2>, who screams at <1them> to be more careful!!!",
                playerCount: 2
            },
            {
                string: "<1> tries to soothe the distressed <2>",
                playerCount: 2
            },
            {
                string: "<1> attacks <2>, hoping to take <2their> resources, but <2> fights <1them> off",
                playerCount: 2
            },
            {
                string: "<1> ambushes <2> and takes <2their> equipment but spares <2their> life",
                playerCount: 2
            },
            {
                string: "<1> quietly stalks the unsuspecting <2>",
                playerCount: 2
            },
            {
                string: "<1> and <2> avoid each other",
                playerCount: 2
            },
            {
                string: "<1> gives <2> a restorative cyst. <2> can not stop thanking <1them>",
                playerCount: 2
            },
            {
                string: "<1> and <2> hug",
                playerCount: 2
            },
            {
                string: "<1> sees <2> rummaging through the storage of <1their> personnel room but decides not to interfere",
                playerCount: 2
            },
            {
                string: "<1> and <2> threaten each other excessively",
                playerCount: 2
            },
            {
                string: "<1> does not trust <2>. After all, was the announcement not \"kill and do not be killed\"?",
                playerCount: 2
            },
            {
                string: "<1> bites <2>!!!!!!!!",
                playerCount: 2
            },
            {
                string: "<1> and <2> battle for enrichment",
                playerCount: 2
            },
            {
                string: "<1> masterfully defeats numerous foes. <2> is in awe",
                playerCount: 2
            },
            {
                string: "<1> assures <2> that \"<1they> will take care of the enemies\" but almost dies",
                playerCount: 2
            },
            {
                string: "<1> screams very loudly for no reason. From the other side of the wall, <2> answers with an equally loud scream",
                playerCount: 2
            },
            {
                string: "<1> tries to earn <2>'s trust by killing all the enemies for <2them>, but that causes <2> to grow even more distrustful",
                playerCount: 2
            },
            {
                string: "<1> and <2> make a truce. They shall not kill each other until the very end",
                playerCount: 2
            },
            {
                string: "<1> protects <2> in exchange for valuables",
                playerCount: 2
            },
            {
                string: "<1> notices that <1they> <1are> starting to enjoy <2>'s company",
                playerCount: 2
            },
            {
                string: "<1> calls out <2>'s name, but <2they> <2do> not answer, choosing to stay hidden",
                playerCount: 2
            },
            {
                string: "<1> and <2> fight alongside each other",
                playerCount: 2
            },
            {
                string: "<1> asks <2> something about the bright cousins. <2they> answer2> in a very normal way",
                playerCount: 2
            },
            {
                string: "<1> tells <2> a secret. <2they> look2> very surprised",
                playerCount: 2
            },
            {
                string: "<1> tells <2> a secret. <2they> look2> horrified",
                playerCount: 2
            },
            {
                string: "<1> and <2> realize they come from the same cave-city",
                playerCount: 2
            },
            {
                string: "<1> barely convinces <2> not to kill <1them>",
                playerCount: 2
            },
            {
                string: "<1> asks <2> for a receptor curl",
                playerCount: 2
            },
            {
                string: "<1> jumpscares <2>",
                playerCount: 2
            },
            {
                string: "<1> swears <1they> will find and kill <2>",
                playerCount: 2
            },
            {
                string: "<1> and <2> resort to playing rock-acid-claws in order to settle a debate",
                playerCount: 2
            },
            {
                string: "<1> panics and throws a rabid container at <2>. <2they> <2are> unamused",
                playerCount: 2
            },
            
            {
                string: "<1> and <2> find <3>'s personnel room and rummage through <3their> stuff. Not for resources, just because they can",
                playerCount: 3
            },
            {
                string: "<1> wants to kill <2> but can not risk attacking while <3> is nearby",
                playerCount: 3
            },
            {
                string: "<1>, <2> and <3> are being a bunch of sillies",
                playerCount: 3
            },
            {
                string: "<1>, <2> and <3> get into a huge physical fight, but no one wins",
                playerCount: 3
            },
            {
                string: "<1>, <2> and <3> tell each other stories from their larval lives",
                playerCount: 3
            },
            {
                string: "<1> and <2> argue to the point where they draw their weapons. <3> barely manages to calm them down",
                playerCount: 3
            },
            {
                string: "<1> and <2> encounter <3>, who wants to join their group despite <2>'s protest. <1> decides to abandon <2> to navigate the embassy with <3> instead",
                playerCount: 3
            },
            {
                string: "<1> and <2> encounter <3>, who wants to join their group despite <2>'s protest. <1> decides to stay with <2>, and <3> begrudgingly leaves",
                playerCount: 3
            },
            {
                string: "<1>, <2> and <3>, who were on the verge of killing each other, are forced to cooperate in order to survive a group of violent kivskins",
                playerCount: 3
            },
            {
                string: "<1>, <2> and <3> try to claw their way out through the walls",
                playerCount: 3
            },
            {
                string: "<1> promises that <1they> would never hurt <2> and <3>",
                playerCount: 3
            },
            {
                string: "<1> wounds <2> badly but does not get enough time to finish <2them> off before <3> appears out of nowhere and scares <1them> off",
                playerCount: 3
            },
            {
                string: "<1> shares <1their> knowledge of combat with <2> and <3>",
                playerCount: 3
            },
            {
                string: "<1> sees <2> and <3> and immediately turns back",
                playerCount: 3
            },
            {
                string: "<1> and <2> argue about the sides of the meteorite conflict. <3>, clueless about what are those two so angry about, listens in",
                playerCount: 3
            },

            {
                string: "<1> is rude to <2>, who gets upset and complains to <3>, who tells <4> about the situation, who asks <5> for help, who punches <1> in the face",
                playerCount: 5
            },

            {
    string: "<1> hopes not to die stupidly",
    playerCount: 1
},
{
    string: "<1> scribbles on a wall: \"<1> was here\"",
    playerCount: 1
},
{
    string: "<1> prays for Velzie to smile on <1them>",
    playerCount: 1
},
{
    string: "<1> feels a little lonely",
    playerCount: 1
},
{
    string: "<1> regrets <1their> actions",
    playerCount: 1
},
{
    string: "<1> prays for Velzie to play tricks on <1their> enemies",
    playerCount: 1
},
{
    string: "<1> bounces off the walls",
    playerCount: 1
},
{
    string: "<1> sings a tune",
    playerCount: 1
},
{
    string: "<1> begs <1their> creator for mercy",
    playerCount: 1
},
{
    string: "<1> breathes in, and out",
    playerCount: 1
},
{
    string: "<1> meows",
    playerCount: 1
},
{
    string: "<1> decides who will be <1their> victim in the next wink",
    playerCount: 1
},
{
    string: "<1> dreams about victory",
    playerCount: 1
},
{
    string: "<1> draws on the walls with sludge",
    playerCount: 1
},
{
    string: "<1> gets lost",
    playerCount: 1
},
{
    string: "<1> does a really cool flip",
    playerCount: 1
},
{
    string: "<1> hides from other participants",
    playerCount: 1
},
{
    string: "<1> thinks really hard",
    playerCount: 1
},
{
    string: "<1> forgets something extremely important",
    playerCount: 1
},
{
    string: "<1> eats a cyst",
    playerCount: 1
},
{
    string: "<1> laughs like a movie villain",
    playerCount: 1
},
{
    string: "<1> bows to the audience",
    playerCount: 1
},

{
    string: "<1> thinks <1they> <1have> found <2>'s corpse, but in reality <2> is pretending to be dead",
    playerCount: 2
},
{
    string: "<1> gifts <2> a trinket",
    playerCount: 2
},
{
    string: "<1> challenges <2> to a fight. No one wins, but they recognize each other's strength and become friends",
    playerCount: 2
},
{
    string: "<1> compliments <2>'s signature",
    playerCount: 2
},
{
    string: "<1> trips over a cyst, picks it up and throws it away in anger; it hits <2> right on the head",
    playerCount: 2
},
{
    string: "<1> searches everywhere for <2>, wanting to give <2them> a gift. <2> hides desperately",
    playerCount: 2
},
{
    string: "<1> and <2> bump into each other several times in a row and decide to go together, believing it to be a sign from Velzie",
    playerCount: 2
},
{
    string: "<1> tries to scare away <2>, but accidentally becomes <2their> friend",
    playerCount: 2
},
{
    string: "<1> and <2> fight for the entire wink, but continue to evade each other's attacks over and over again",
    playerCount: 2
},
{
    string: "<1> sees <2> running away from something and helps <2them> escape",
    playerCount: 2
},
{
    string: "<1> hits <2> with a chair",
    playerCount: 2
},
{
    string: "<1> and <2> both hide from each other, thinking that one wants to kill the other",
    playerCount: 2
},
{
    string: "<1> and <2> make some kind of device together",
    playerCount: 2
},
{
    string: "<1> watches <2> and sees something <1they> should not have",
    playerCount: 2
},
{
    string: "<1> promises <2> not to kill <2them> in return for all <2their> supplies, but <2> only gives <1> a punch in the face",
    playerCount: 2
},
{
    string: "<1> and <2> :)",
    playerCount: 2
},

{
    string: "<1> notices <2> and <3> following <1them> and tries to escape",
    playerCount: 3
},
{
    string: "<1> intimidates <2> and <3> and kicks them out of <1their> tendril",
    playerCount: 3
},
{
    string: "<1> and <2> invite <3> to join them, but <3they> silently leave3>",
    playerCount: 3
},
{
    string: "<1> sees <2> waving and waves back. Then realizes that <2> is waving not to <1them>, but to <3>",
    playerCount: 3
},
{
    string: "<1> and <2> team up to kill <3>, but they never gather the courage to do it",
    playerCount: 3
},
{
    string: "<1> and <2> ambush <3>, but <3> is well armed and defends <3themself>",
    playerCount: 3
},
{
    string: "<1> blows up a bunch of sludged junk for fun, nearly killing <2> and <3> hiding nearby",
    playerCount: 3
},
{
    string: "<1> and <2> want to set up an ambush for <3>, but they can not agree on a plan",
    playerCount: 3
},

{
    string: "<1>, <2> and <3> watch some husks fight in a pit and place bets. <4>, who falls into the pit, wins",
    playerCount: 4
},
{
    string: "<1> stockpiles weapons, <2> steals them, <3> catches <2them> in the act and goes to tell everyone, and <4> tries <4their> best to stop that from happening",
    playerCount: 4
},
{
    string: "<1> and <2> run away from <3> and <4> in absolute terror",
    playerCount: 4
},
{
    string: "<1> and <2> try to track down and kill <3> and <4> while <3> and <4> try to track down and kill <1> and <2>",
    playerCount: 4
},
{
    string: "<1>, <2> and <3>, <4> are arguing over the right to take <5> on their team. Before it gets to a fight, <5> silently slips out of their sight",
    playerCount: 5
},
{
    string: "<1> declares that the Corru Games is an unfair and cold-blooded system. <1they> <1are> joined by <2> and <3>, wanting fairness, while <4> and <5>  laugh at the idea",
    playerCount: 5
},
{
    string: "<1> and <2> fight fiercely, but a group of <3>, <4> and <5> comes and chases them away",
    playerCount: 5
},

{
    string: "<1>, <2> and <3> compete with <4>, <5> and <6> for resources",
    playerCount: 6
},
        ],
        lethal: [
            {
                string: "<die1> connects to an unknown cyst and dies of incoherency",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `Did not have basic computer competence`;
                },        
            },
            {
                string: "<die1> joins the okidoia",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `Got okidoki'd`;
                },
            },
            {
                string: "<die1> can not handle the amount of foes that has surrounded <1them>",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `Too many enemies`;
                },
            },
            {
                string: "<die1> mysteriously disappears",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `Disappeared`;
                },
            },
            {
                string: "<die1> bites a container. The container bites <1them> back, and fatally so",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `Bited`;
                },
            },
            {
                string: "<die1> just dies",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `Because I said so`;
                },
            },
            {
                string: "<die1> sips from an EVIL simulacrum and DIES",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `Alcoholism`;
                },
            },
            {
                string: "The room <die1> is in collapses and <1they> <1are> crushed under the debris",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `Victim of a collapse in the collapse`;
                },
            },
            {
                string: "<die1> is too scared of husks to concentrate on fighting and ends up killed by them",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `Husks :(`;
                },
            },
            {
                string: "<die1> gets eaten by a movefoe",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `Learned the evil of elevators`;
                },
            },
            {
                string: "<die1> curses Velzie. Velzie curses <1them> back",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `Cursed`;
                },
            },

            {
                string: "<die1> accidentally explodes <1themself> along with <die2>",
                playerCount: 2,
                howManyDeaths: 2,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `Exploded by accident`;

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `Got caught in <strong><font color="ffff00">` + player1.name + `</font></strong>'s explosion`;
                },
            },

            {
                string: "<1> groundsminds the floor beneath <die2> to turn into sharp spikes, piercing <2them> right through",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `Was impaled by <strong><font color="ffff00">` + player1.name + `</font></strong>'s groundsminded spikes`;
                },
            },
        ],
        revival: [
            {
                string: "<rev1> is alive again?..",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
        ]
        /*regular: [
            // 1 —á–µ–ª
            {
                string: "(Player1) —Å–æ–∑–¥–∞–µ—Ç –±–æ–º–±—É —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –Ω–∞ –¥–æ—Å—É–≥–µ",
                playerCount: 1
            },
            {
                string: "(Player1) –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–±—Ä–∞—Ç—å—Å—è –≤ –ú–µ–≥–∞–ø–æ–ª–∏—Å, –Ω–æ —É –Ω–µ–≥–æ –Ω–µ—Ç –¥—Ä–æ–Ω–∞-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞",
                playerCount: 1
            },
            {
                string: "(Player1) –ø—Ä–æ–Ω–∏–∫–∞–µ—Ç –≤–Ω—É—Ç—Ä—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞ –∏ —á—É—Ç—å –Ω–µ –ª–æ–º–∞–µ—Ç –µ–≥–æ",
                playerCount: 1
            },
            {
                string: "(Player1) –ø–æ–ª—É—á–∞–µ—Ç –≤–∑—Ä—ã–≤–Ω—ã–µ –∫–æ–ø—å—è –æ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–ø–æ–Ω—Å–æ—Ä–∞",
                playerCount: 1
            },
            {
                string: "(Player1) —Å–∏–ª—å–Ω–æ –∑–ª–∏—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π, –ª–∏—à–∞—è —Å–µ–±—è –∏—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è",
                playerCount: 1
            },
            {
                string: "(Player1) –æ–±–∞–Ω–∫—Ä–æ—Ç–∏–ª—Å—è, –æ–±–º–µ–Ω—è–≤ –≤–µ—Å—å —Å–≤–æ–µ–π –∂–µ–º—á—É–≥ –Ω–∞ –∫–æ–ø—å—ë —É –º—É—Å–æ—Ä—â–∏–∫–∞-—Ç–æ—Ä–≥–æ–≤—Ü–∞",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –¥—Ä–∞–∫–æ–π —è—â–µ—Ä–æ–≤",
                playerCount: 1
            },
            {
                string: "(Player1) —Å–º–æ—Ç—Ä–∏—Ç –≤ –Ω–µ–±–æ –≤ –ø–æ–∏—Å–∫–∞—Ö —Å—Ç–µ—Ä–≤—è—Ç–Ω–∏–∫–æ–≤",
                playerCount: 1
            },
            {
                string: "(Player1) –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –≤—Ä–∞—Ç –∫–∞—Ä–º—ã –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –Ω–∏—Ö",
                playerCount: 1
            },
            {
                string: "(Player1) –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –≤—Ä–∞—Ç –∫–∞—Ä–º—ã –∏ –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ —É –Ω–µ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä–º—ã",
                playerCount: 1
            },
            {
                string: "(Player1) –∏—Å—Å–ª–µ–¥—É–µ—Ç —Ä–µ–≥–∏–æ–Ω",
                playerCount: 1
            },
            {
                string: "(Player1) –∑–∞–±–ª—É–∂–¥–∞–µ—Ç—Å—è",
                playerCount: 1
            },
            {
                string: "(Player1) –¥—É–º–∞–µ—Ç, –∫—É–¥–∞ –ø–æ–π—Ç–∏",
                playerCount: 1
            },
            {
                string: "(Player1) –µ—Å—Ç —Å–∫–æ–ª–æ–ø–µ–Ω–¥—Ä—É",
                playerCount: 1
            },
            {
                string: "(Player1) –æ—Ö–æ—Ç–∏—Ç—Å—è",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–µ—Å—ë—Ç —Å —Å–æ–±–æ–π –∂–µ–º—á—É–≥ –Ω–µ–ø—Ä–∏–ª–∏—á–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è",
                playerCount: 1
            },
            {
                string: "(Player1) –≤–∏–¥–∏—Ç, –∫–∞–∫ —è—â–µ—Ä–∏—Ü–∞ –µ—Å—Ç –∫–æ—Ç—ë–Ω–∫–∞, –Ω–æ –Ω–µ –≤–º–µ—à–∏–≤–∞–µ—Ç—Å—è",
                playerCount: 1
            },
            {
                string: "–í —É–±–µ–∂–∏—â–µ –∫ (Player1) –∑–∞–ø–æ–ª–∑–∞–µ—Ç –∫—Ä–∞—Å–Ω–∞—è —Å–∫–æ–ª–æ–ø–µ–Ω–¥—Ä–∞, –Ω–æ –µ–º—É —É–¥–∞–µ—Ç—Å—è —Å–±–µ–∂–∞—Ç—å",
                playerCount: 1
            },
            {
                string: "(Player1) –ª–æ–≤–∏—Ç –∏–Ω—Å—É–ª—å—Ç, —É–≤–∏–¥–µ–≤ –∫—Ä–∞—Å–Ω—É—é —Å–∫–æ–ª–æ–ø–µ–Ω–¥—Ä—É",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ç–∞—á–∏–≤–∞–µ—Ç –∫–æ–ø—å—ë",
                playerCount: 1
            },
            {
                string: "(Player1) –¥–∏–≤–∏—Ç—Å—è –ø–µ–π–∑–∞–∂–∞–º–∏",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ –Ω–∞—Å–µ–∫–æ–º—ã–º–∏",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–µ—Å–µ—Ç –æ–≥–æ–Ω—å",
                playerCount: 1
            },
            {
                string: "(Player1) –ø–ª–∞—Ç–∏—Ç –Ω–∞–ª–æ–≥–∏",
                playerCount: 1
            },
            {
                string: "(Player1) –ø—Ä–∞–∫—Ç–∏–∫—É–µ—Ç –∫—É–≤—ã—Ä–∫–∏",
                playerCount: 1
            },
            {
                string: "(Player1) –∫—É—à–∞–µ—Ç —Ñ—Ä—É–∫—Ç",
                playerCount: 1
            },
            {
                string: "(Player1) –∑–∞–±—ã–≤–∞–µ—Ç –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö 250 –º–æ–¥–∞—Ö –∏ –Ω–µ—á–∞—è–Ω–Ω–æ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –ó–∞–∫—É–ª–∏—Å—å–µ",
                playerCount: 1
            },
            {
                string: "(Player1) —Ä–µ—à–∞–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã –°–ö–° –∏ –ù–ó–ó. –í –∫–æ–Ω—Ü–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è (Player1) –ø–æ—á—Ç–∏ —Å—Ö–æ–¥–∏—Ç —Å —É–º–∞",
                playerCount: 1
            },
            {
                string: "(Player1) –ø—Ä–æ–±—É–µ—Ç –∫–∏—Å–ª–æ—Ç–Ω—É—é –≤–æ–¥–∏—á–∫—É, –Ω–æ –Ω–µ —É–º–∏—Ä–∞–µ—Ç –∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
                playerCount: 1
            },
            {
                string: "(Player1) –≤–µ—Å—å —Ü–∏–∫–ª –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å—Å—è –∏–∑ —è–º—ã —Å —É–ª–∏—Ç–∫–∞–º–∏",
                playerCount: 1
            },
            {
                string: "(Player1) –≤–µ—Å—å —Ü–∏–∫–ª –ø—Ä–µ—Å–ª–µ–¥—É—é—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –≤—Ä–∞—Ç–∞ –∫–∞—Ä–º—ã, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ –∏–∑-–∑–∞ –ø–æ—Ö–æ—Ç–∏",
                playerCount: 1
            },
            {
                string: "(Player1) –ø—ã—Ç–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –ø–∏—Ç—å—ë –∏–∑ –∑–∞–±—Ä–æ–¥–∏–≤—à–∏—Ö —Ñ—Ä—É–∫—Ç–æ–≤, –Ω–æ –Ω–µ—Å–º–µ—Ä—Ç–µ–ª—å–Ω–æ —Ç—Ä–∞–≤–∏—Ç—Å—è",
                playerCount: 1
            },
            {
                string: "(Player1) –ø–æ–ø–∞–¥–∞–µ—Ç –∫ –∏—Ç–µ—Ä–∞—Ç–æ—Ä—É-—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä—É, –Ω–æ —É (Player1) –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–±–µ–∂–∞—Ç—å",
                playerCount: 1
            },
            {
                string: "(Player1) —Ç–µ—Ä—è–µ—Ç —Å–≤–æ–µ–≥–æ –∫–æ—Ç—ë–Ω–∫–∞ –∏ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥–µ–Ω–æ—Ü–∏–¥ –º—É—Å–æ—Ä—â–∏–∫–æ–≤",
                playerCount: 1
            },
            {
                string: "(Player1) –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –≤–∑—Ä—ã–≤–Ω–æ–µ –∫–æ–ø—å–µ",
                playerCount: 1
            },
            {
                string: "(Player1) –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∫–∞–º–µ–Ω—å",
                playerCount: 1
            },
            {
                string: "(Player1) –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –≤–∑—Ä—ã–≤—á–∞—Ç–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ",
                playerCount: 1
            },
            {
                string: "(Player1) –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –±–æ–º–±—É",
                playerCount: 1
            },
            {
                string: "(Player1) –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∫–∞—Ä–º–∞—Ü–≤–µ—Ç",
                playerCount: 1
            },
            {
                string: "(Player1) –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø—É–∑—ã—Ä—å–∫–æ–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –µ–¥—É",
                playerCount: 1
            },
            {
                string: "(Player1) –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –≥—Ä–∏–±—ã",
                playerCount: 1
            },
            {
                string: "(Player1) –≤–∏–¥–∏—Ç –≤–¥–∞–ª–µ–∫–µ –æ—Ç—Ä—è–¥ –º—É—Å–æ—Ä—â–∏–∫–æ–≤. –ö —Å—á–∞—Å—Ç—å—é, –æ–Ω–∏ –Ω–µ –∑–∞–º–µ—á–∞—é—Ç (Player1) , –∏ (Player1) —Å–ø–æ–∫–æ–π–Ω–æ –∏–¥—ë—Ç –¥–∞–ª—å—à–µ",
                playerCount: 1
            },
            {
                string: "(Player1) —á—É—Ç—å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —à–µ—Å—Ç –º–∏–º–∏–∫, –Ω–æ (Player1) —É—Å–ø–µ–≤–∞–µ—Ç –æ—Ç–¥–µ—Ä–Ω—É—Ç—å –æ—Ç –Ω–µ–≥–æ –ª–∞–ø—ã",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç —Å–∫–ª–∞–¥ –º—É—Å–æ—Ä—â–∏–∫–æ–≤. –¢–µ–ø–µ—Ä—å —É (Player1) –µ—Å—Ç—å –∫–æ–ø—å–µ",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç —Å–∫–ª–∞–¥ –º—É—Å–æ—Ä—â–∏–∫–æ–≤. –¢–µ–ø–µ—Ä—å —É (Player1) –µ—Å—Ç—å –±–æ–º–±–∞",
                playerCount: 1
            },
            {
                string: "(Player1) –≤–µ—Å—å —Ü–∏–∫–ª –ø—Ä—è—á–µ—Ç—Å—è –æ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                playerCount: 1
            },
            {
                string: "(Player1) —Å –±–æ–ª—å—à–∏–º –∞–ø–ø–µ—Ç–∏—Ç–æ–º –µ—Å—Ç –Ω–µ–π—Ä–æ–Ω—ã",
                playerCount: 1
            },
            {
                string: "(Player1) –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ—Ç –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç —á–∞—Å, –∑–∞—Å—Ç—Ä—è–≤ –≤ –∞–Ω—Ç–∏–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏ –ø–æ—Å—Ä–µ–¥–∏ –∫–æ–º–Ω–∞—Ç—ã –±–µ–∑ –æ–ø–æ—Ä—ã –∏ –∏–Ω–µ—Ä—Ü–∏–∏",
                playerCount: 1
            },
            {
                string: "(Player1) –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –æ–¥–Ω–æ–π –º—ã—Å–ª–∏",
                playerCount: 1
            },
            {
                string: "(Player1) –≤—ã–¥–≤–∏–≥–∞–µ—Ç –∏–¥–µ—é –æ —Ç–æ–º, —á—Ç–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —Å—Ç—Ä–∞–¥–∞—Ç—å, –Ω–æ –Ω–∏–∫—Ç–æ –µ–≥–æ –Ω–µ —Å–ª—É—à–∞–µ—Ç",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞–ª–∞–∂–∏–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –º—É—Å–æ—Ä—â–∏–∫–∞–º–∏",
                playerCount: 1
            },
            {
                string: "(Player1) —Ç–æ—Ä–≥—É–µ—Ç –Ω–µ–ª–µ–≥–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –Ω–∞ —á—ë—Ä–Ω–æ–º —Ä—ã–Ω–∫–µ",
                playerCount: 1
            },
            {
                string: "(Player1) —Å–ª—É—á–∞–π–Ω–æ —Ç–µ—Ä—è–µ—Ç –∂–µ–º—á—É–∂–∏–Ω—É —Å —Ä–µ—à–µ–Ω–∏–µ–º –í–µ–ª–∏–∫–æ–π –ó–∞–¥–∞—á–∏",
                playerCount: 1
            },
            {
                string: "(Player1) –≤—ã—á–∏—Å–ª—è–µ—Ç –æ—Ç—â–µ–ø–µ–Ω—Ü–µ–≤ —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                playerCount: 1
            },
            {
                string: "(Player1) –∑–∞–±—ã–≤–∞–µ—Ç —á—Ç–æ-—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–µ–π—à–µ –≤–∞–∂–Ω–æ–µ",
                playerCount: 1
            },
            {
                string: "(Player1) —Å—Ç—Ä–æ–∏—Ç —Å–º–µ—Ä—Ç–æ–Ω–æ—Å–Ω—ã–µ –ª–æ–≤—É—à–∫–∏",
                playerCount: 1
            },
            {
                string: "(Player1) –≤–∏–¥–∏—Ç –∫–∞–∫—É—é-—Ç–æ –ø–µ—Ä–µ–ø–∞–ª–∫—É –≤–¥–∞–ª–µ–∫–µ, –Ω–æ –Ω–µ –≤–º–µ—à–∏–≤–∞–µ—Ç—Å—è",
                playerCount: 1
            },
            {
                string: "(Player1) —Ä–∞–∑–≥–ª—è–¥—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ—Ñ–∏—Ç–∏",
                playerCount: 1
            },
            {
                string: "(Player1) –∑–∞—Å–µ–ª—è–µ—Ç —á—å—ë-—Ç–æ —É–±–µ–∂–∏—â–µ –Ω–µ—Å–º–µ—Ç–Ω–æ–π –∫—É—á–µ–π —É–ª–∏—Ç–æ–∫",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–µ–ø—Ä–∏–ª–∏—á–Ω–æ –≥—Ä–æ–º–∫–æ –º–∞—Ç–µ—Ä–∏—Ç—Å—è",
                playerCount: 1
            },
            {
                string: "(Player1) –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Ñ–ª–æ—Ä—É –∏ —Ñ–∞—É–Ω—É —Ä–µ–≥–∏–æ–Ω–æ–≤",
                playerCount: 1
            },
            {
                string: "(Player1) –∫–∏–¥–∞–µ—Ç –∑–∞–±—Ä–æ–¥–∏–≤—à–∏–π –≤–∏–Ω–æ–≥—Ä–∞–¥ –≤ –Ω–∞—Å–æ—Å—ã –ë–µ—Å–ø–æ–¥–æ–±–Ω–æ–π –ù–µ–≤–∏–Ω–Ω–æ—Å—Ç–∏",
                playerCount: 1
            },
            {
                string: "(Player1) –≥–æ–≤–æ—Ä–∏—Ç —Å –æ—Ç–≥–æ–ª–æ—Å–∫–æ–º –∏ —Ä–µ—à–∞–µ—Ç, —á—Ç–æ –≤—Å—ë —ç—Ç–æ –≤—Ä–µ–º—è –∂–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ",
                playerCount: 1
            },
            {
                string: "(Player1) –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –Ω–æ–≤–æ—Å—Ç–∏",
                playerCount: 1
            },
            {
                string: "(Player1) –ª—é–±—É–µ—Ç—Å—è —Å–≤–æ–∏–º –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –¥—É–º–∞–µ—Ç –∫–∞–∫–æ–π –∂–µ –æ–Ω —Ö–æ—Ä–æ—à–µ–Ω—å–∫–∏–π",
                playerCount: 1
            },
            {
                string: "(Player1) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–∏–ª–∏—á–Ω—ã–µ –≤–µ—â–∏ –Ω–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π",
                playerCount: 1
            },
            {
                string: "(Player1) –¥–µ—Ä—ë—Ç—Å—è —Å —Ç—Ä–µ–º—è –∫—Ä–∞—Å–Ω—ã–º–∏ —è—â–µ—Ä–∞–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ",
                playerCount: 1
            },
            {
                string: "(Player1) –æ–±–≥–ª–∞–¥—ã–≤–∞–µ—Ç –ø–æ–ø–∫–æ—Ä–Ω–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–µ—Å—ë—Ç –ø–æ—á—Ç—É",
                playerCount: 1
            },
            {
                string: "(Player1) –ø—å—ë—Ç –≥–æ—Ä—å–∫–∏–π —Ç—Ä–∞–≤—è–Ω–æ–π —á–∞–π —Å –≥—Ä–∞–≤–∏–µ–º",
                playerCount: 1
            },
            {
                string: "(Player1) —Ä–µ—à–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã",
                playerCount: 1
            },
            {
                string: "(Player1) —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –ø–æ–Ω–∏–∂–∞–µ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏—é —Å–æ –≤—Å–µ–º –∂–∏–≤—ã–º –≤ –æ–∫—Ä—É–≥–µ",
                playerCount: 1
            },
            {
                string: "(Player1) –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ—Å—Ç–∏—á—å –¥–∑–µ–Ω (–±–µ–∑—É—Å–ø–µ—à–Ω–æ)",
                playerCount: 1
            },
            {
                string: "(Player1) —Å–º–µ—ë—Ç—Å—è –∫–∞–∫ –∑–ª–æ–¥–µ–π",
                playerCount: 1
            },
            {
                string: "(Player1) –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Ä—É—á–∏—Ç—å —è—â–µ—Ä–∞, –Ω–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç —Å–±–µ–≥–∞–µ—Ç",
                playerCount: 1
            },
            {
                string: "(Player1) –≤–µ—Å—å —Ü–∏–∫–ª –¥–µ—Ä—ë—Ç—Å—è —Å –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–æ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –Ω–µ–≤–µ—Å–æ–º–æ—Å—Ç–∏",
                playerCount: 1
            },
            {
                string: "(Player1) –ª—é–±—É–µ—Ç—Å—è –æ–ª–µ–Ω—è–º–∏",
                playerCount: 1
            },
            {
                string: "(Player1) –æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –ø–æ–¥–ø–æ–ª—å–Ω—ã–π –∫—É–ª—å—Ç",
                playerCount: 1
            },
            {
                string: "(Player1) –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–≤—è–∑–∞–Ω –ø—á—ë–ª–∞–º–∏ –∏–∑ —É–ª—å—è",
                playerCount: 1
            },
            {
                string: "(Player1) –¥–æ–±—ã–≤–∞–µ—Ç —É—Ä–∞–Ω",
                playerCount: 1
            },
            {
                string: "(Player1) –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–Ω–∫–µ—Ç—ã",
                playerCount: 1
            },
            {
                string: "(Player1) –∂–µ—Å—Ç–æ–∫–æ –ø–æ–∂–∏—Ä–∞–µ—Ç –º–∞—Ç—å-–ª–∞–ø—à–µ–º—É—Ö—É –Ω–∞ –≥–ª–∞–∑–∞—Ö —É –µ—ë –¥–µ—Ç–µ–π",
                playerCount: 1
            },
            {
                string: "(Player1) —Å—Ç—Ä–∞–¥–∞–µ—Ç",
                playerCount: 1
            },
            {
                string: "(Player1) –∏–≥—Ä–∞–µ—Ç –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ —Å –º–∏–≥–∞—é—â–∏–º–∏ —à—Ç—É—á–∫–∞–º–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞",
                playerCount: 1
            },
            {
                string: "(Player1) –ø–æ—Ç–µ—Ä—è–ª –≤—Å–µ —Å–≤–æ–∏ –±–ª–µ—Å—Ç—è—â–∏–µ –∏–¥–µ–∏",
                playerCount: 1
            },

            {
                string: "(Player1) —Å–ø–æ—Ç—ã–∫–∞–µ—Ç—Å—è –æ –∫–∞–º–µ–Ω—å, –ø–æ–¥–Ω–∏–º–∞–µ—Ç –µ–≥–æ –∏ —Å–æ –∑–ª–æ—Å—Ç–∏ –∫–∏–¥–∞–µ—Ç –∫—É–¥–∞ –ø–æ–¥–∞–ª—å—à–µ; –æ–Ω –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç —Ç–æ—á–Ω–æ –≤ –≥–æ–ª–æ–≤—É (Player2)",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è –≤ —á–µ—Å—Ç–Ω–æ–º –±–æ—é. –ü–æ–±–µ–∂–¥–∞–µ—Ç (Player1), –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∂–∏–∑–Ω—å (Player2)",
                playerCount: 2
            },
            {
                string: "(Player1) –ø—Ä–æ—Å–∏—Ç (Player2) –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–µ—Ä—Å–∏–∫–æ–≤–æ–π –∂–µ–º—á—É–∂–∏–Ω—ã, (Player2) –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∫–∏–¥–∞–µ—Ç –µ—ë –≤ –ø—Ä–æ–ø–∞—Å—Ç—å",
                playerCount: 2
            },
            {
                string: "(Player1) –≤–µ—Å—å —Ü–∏–∫–ª –ø—Ä–µ—Å–ª–µ–¥—É–µ—Ç (Player2), –Ω–æ (Player2) –±–æ–∏—Ç—Å—è (Player1) –∏ —Ä–µ—à–∞–µ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç—å",
                playerCount: 2
            },
            {
                string: "(Player1) –ø—Ä–∏–∑–Ω–∞—ë—Ç—Å—è –≤ –¥–∞–≤–Ω–µ–π –ª—é–±–≤–∏ –∫ (Player2)",
                playerCount: 2
            },
            {
                string: "(Player1) –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞ –±–æ–π (Player2). –ù–∏–∫—Ç–æ —Ç–∞–∫ –∏ –Ω–µ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç, –Ω–æ –æ–Ω–∏ –ø—Ä–∏–∑–Ω–∞—é—Ç —Å–∏–ª—É –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –¥—Ä—É–∑—å—è–º–∏",
                playerCount: 2
            },
            {
                string: "(Player1) –ø–æ–¥–∫—Ä–∞–¥—ã–≤–∞–µ—Ç—Å—è –∫ (Player2). (Player2) –ø—É–≥–∞–µ—Ç—Å—è –∏ —à–∏–ø–∏—Ç",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è –≤ —á–µ—Å—Ç–Ω–æ–º –±–æ—é. –í—ã—Ö–æ–¥–∏—Ç –Ω–∏—á—å—è",
                playerCount: 2
            },
            {
                string: "(Player1) –≥–æ–Ω–∏—Ç—Å—è –∑–∞ (Player2); –≤ –º–æ–º–µ–Ω—Ç –æ—Ç—á–∞–Ω—è–Ω–∏—è (Player2) –±—Ä–æ—Å–∞–µ—Ç –∫–∞–∫–æ–π-—Ç–æ —Ç—Ä—É–ø –≤ (Player1) –∏ —Å–ª—É—á–∞–π–Ω–æ –ø—Ä–∏—Ä—É—á–∞–µ—Ç –µ–≥–æ",
                playerCount: 2
            },
            {
                string: "(Player1) –¥–∞—Ä–∏—Ç (Player2) –∂–µ–º—á—É–∂–∏–Ω—É",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –æ—Ç–±–∏–≤–∞—é—Ç—Å—è –æ—Ç —Å—Ç–µ—Ä–≤—è—Ç–Ω–∏–∫–∞",
                playerCount: 2
            },
            {
                string: "(Player1) –∞—Ç–∞–∫—É–µ—Ç —è—â–µ—Ä–∞ –∫–æ–ø—å–µ–º, –ø–æ–∫–∞ (Player2) –æ—Ç–≤–ª–µ–∫–∞–µ—Ç –µ–≥–æ",
                playerCount: 2
            },
            {
                string: "(Player1) –∞—Ç–∞–∫—É–µ—Ç —Å—Ç–µ—Ä–≤—è—Ç–Ω–∏–∫–∞ –∫–æ–ø—å–µ–º, –ø–æ–∫–∞ (Player2) –æ—Ç–≤–ª–µ–∫–∞–µ—Ç –µ–≥–æ",
                playerCount: 2
            },
            {
                string: "(Player1) –¥–µ–ª–∏—Ç—Å—è –µ–¥–æ–π —Å (Player2)",
                playerCount: 2
            },
            {
                string: "(Player1) –≤–∏–¥–∏—Ç —è—â–µ—Ä–∞ –∏ –∫–∏–¥–∞–µ—Ç –≤ –Ω–µ–≥–æ —Ç—Ä—É–ø —Å —Ü–µ–ª—å—é –ø—Ä–∏—Ä—É—á–∏—Ç—å. (Player2) –Ω–µ–¥–æ–≤–æ–ª–µ–Ω, —á—Ç–æ –µ–≥–æ —Å–ø—É—Ç–∞–ª–∏ —Å –∫–∞–∫–∏–º-—Ç–æ —è—â–µ—Ä–æ–º",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –¥–µ—Ä—É—Ç—Å—è –∑–∞ –ø—Ä–∞–≤–æ –µ—Å—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞",
                playerCount: 2
            },
            {
                string: "(Player1) –ø—ã—Ç–∞–µ—Ç—Å—è —É—Ç–æ–ø–∏—Ç—å (Player2); –æ–Ω –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥—ã—Ö–∞–Ω–∏–µ, –ø—Ä–∏—Ç–≤–æ—Ä—è—è—Å—å –º—ë—Ä—Ç–≤—ã–º, –∏ —Å–±–µ–≥–∞–µ—Ç –∫–æ–≥–¥–∞ (Player1) —Ç–µ—Ä—è–µ—Ç –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                playerCount: 2
            },
            {
                string: "(Player1) –Ω–∞–ø–∞–¥–∞–µ—Ç –Ω–∞ (Player2) –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∏ –∫–∞–ª–µ—á–∏—Ç –µ–≥–æ, –Ω–æ —Ç–∞–∫ –∏ –Ω–µ –¥–æ–±–∏–≤–∞–µ—Ç",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –≤–∏–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –≤ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –∫–æ–º–Ω–∞—Ç–µ –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é—Ç—Å—è",
                playerCount: 2
            },
            {
                string: "(Player1) –¥—É–º–∞–µ—Ç, —á—Ç–æ –Ω–∞—à—ë–ª —Ç—Ä—É–ø (Player2), –Ω–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ (Player2) –ø—Ä–∏—Ç–≤–æ—Ä—è–µ—Ç—Å—è –º—ë—Ä—Ç–≤—ã–º",
                playerCount: 2
            },
            {
                string: "(Player1) –∏—â–µ—Ç –≤–µ–∑–¥–µ (Player2), –∂–µ–ª–∞—è –ø—Ä–µ–ø–æ–¥–Ω–µ—Å—Ç–∏ –µ–º—É –ø–æ–¥–∞—Ä–æ–∫. (Player2) –æ—Ç—á–∞—è–Ω–Ω–æ –ø—Ä—è—á–µ—Ç—Å—è",
                playerCount: 2
            },
            {
                string: "(Player1) –≤–µ—Å—å —Ü–∏–∫–ª –∫–∏–¥–∞–µ—Ç –º–µ–¥—É–∑ –≤ (Player2)",
                playerCount: 2
            },
            {
                string: "(Player1) –æ—Ä—ë—Ç –Ω–∞ (Player2)",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –Ω–∞—Ç—ã–∫–∞—é—Ç—Å—è –Ω–∞ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥ –∏ —Ä–µ—à–∞—é—Ç –ø–æ–π—Ç–∏ –≤–º–µ—Å—Ç–µ, —Å—á–∏—Ç–∞—è, —á—Ç–æ —ç—Ç–æ - –∑–Ω–∞–∫ —Å—É–¥—å–±—ã",
                playerCount: 2
            },
            {
                string: "(Player1) —Å—Ç—Ä–æ–∏—Ç –ª–æ–≤—É—à–∫—É –¥–ª—è (Player2), –Ω–æ –ø–æ–ø–∞–¥–∞–µ—Ç—Å—è –≤ –Ω–µ—ë —Å–∞–º - –∏ —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è –∫—Ä–∞–π–Ω–µ –Ω–µ–ª–æ–≤–∫–æ, –∫–æ–≥–¥–∞ (Player2) –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞ –ø–æ–º–æ—â—å",
                playerCount: 2
            },
            {
                string: "(Player1) –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—É–≥–Ω—É—Ç—å (Player2), –Ω–æ —Å–ª—É—á–∞–π–Ω–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –µ–≥–æ –¥—Ä—É–≥–æ–º",
                playerCount: 2
            },
            {
                string: "(Player1) –¥–µ—Ä–∂–∏—Ç –æ–ª–µ–Ω—è –∑–∞ —Ä–æ–≥–∞, –ø–æ–∫–∞ (Player2) –∑–∞–ª–µ–∑–∞–µ—Ç –Ω–∞ –Ω–∏—Ö",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –¥–µ—Ä—É—Ç—Å—è –≤–µ—Å—å —Ü–∏–∫–ª, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —É–∫–ª–æ–Ω—è—Ç—å—Å—è –æ—Ç —á—É–∂–∏—Ö –∞—Ç–∞–∫ —Ä–∞–∑ –∑–∞ —Ä–∞–∑–æ–º",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2), –∑–∞—Ü–µ–ø–∏–≤—à–∏—Å—å –∑–∞ –¥—Ä—É–≥ –¥—Ä—É–≥–∞, –∫—Ä—É—Ç—è—Ç—Å—è –≤ –Ω–µ–≤–µ—Å–æ–º–æ—Å—Ç–∏ –¥–æ —Ç–æ—à–Ω–æ—Ç–≤–æ—Ä–Ω—ã—Ö —Å–∫–æ—Ä–æ—Å—Ç–µ–π",
                playerCount: 2
            },
            {
                string: "(Player1) –ø—É–≥–∞–µ—Ç (Player2) –Ω–∞—Å–µ–∫–æ–º—ã–º–∏",
                playerCount: 2
            },
            {
                string: "(Player1) —É–º–æ–ª—è–µ—Ç (Player2) –Ω–µ —É–±–∏–≤–∞—Ç—å –µ–≥–æ –∏ –ø–æ—â–∞–¥–∏—Ç—å. –ë–µ–∑–æ—Ä—É–∂–Ω—ã–π (Player2) —á–µ—à–µ—Ç –∑–∞—Ç—ã–ª–æ–∫",
                playerCount: 2
            },
            {
                string: "(Player1) –æ–≥–ª—É—à–∞–µ—Ç (Player2) –∫–∞–º–Ω–µ–º –∏ –∫—Ä–∞–¥—ë—Ç –≤—Å–µ –µ–≥–æ –±–æ–µ–ø—Ä–∏–ø–∞—Å—ã, —Å–∫—Ä—ã–≤–∞—è—Å—å –≤ –∑–∞–∫–∞—Ç–µ",
                playerCount: 2
            },
            {
                string: "(Player1) –∫—É—à–∞–µ—Ç —Ñ—Ä—É–∫—Ç. (Player2) –≥–æ–≤–æ—Ä–∏—Ç –µ–º—É, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ñ—Ä—É–∫—Ç",
                playerCount: 2
            },
            {
                string: "(Player1) –≤–∏–¥–∏—Ç, –∫–∞–∫ (Player2) —É–±–µ–≥–∞–µ—Ç –æ—Ç –∫–æ–≥–æ-—Ç–æ, –∏ –ø–æ–º–æ–≥–∞–µ—Ç –µ–º—É —Å–ø–∞—Å—Ç–∏—Å—å",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –≤ —à—É—Ç–∫—É –±—å—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∫–∞–º–Ω—è–º–∏",
                playerCount: 2
            },
            {
                string: "(Player1) –ø–æ–º–æ–≥–∞–µ—Ç (Player2) –≤–∑–æ–±—Ä–∞—Ç—å—Å—è –Ω–∞ –≤—ã—Å–æ–∫–∏–π —É—Å—Ç—É–ø",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –¥–µ—Ä—É—Ç—Å—è –∑–∞ –ø—Ä–∞–≤–æ —Ç–æ–≥–æ, –∫—Ç–æ –æ—Ç–¥–∞—Å—Ç –∂–µ–º—á—É–∂–∏–Ω—É –º—É—Å–æ—Ä—â–∏–∫–∞–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–ª–∞—Ç—ã –Ω–∞ –∑–∞—Å—Ç–∞–≤–µ",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –∫—Ä–∏—á–∞—Ç –Ω–∞ –æ–±–ª–∞–∫–∞",
                playerCount: 2
            },
            {
                string: "(Player1) –±—å—ë—Ç (Player2) —Ç–∞–±—É—Ä–µ—Ç–∫–æ–π",
                playerCount: 2
            },
            {
                string: "(Player1) –æ–±—Ä–∞–∑—É–µ—Ç —à–∞—Ç–∫–∏–π, –Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å–æ—é–∑ —Å (Player2)",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –æ–±–∞ –ø—Ä—è—á—É—Ç—Å—è –æ—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞, –¥—É–º–∞—è, —á—Ç–æ –æ–¥–∏–Ω —Ö–æ—á–µ—Ç —É–±–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ",
                playerCount: 2
            },
            {
                string: "–ó–∞—Å–∫—É—á–∞–≤—à–∏–π (Player1) –∑–∞–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –≤—ã—Å–æ–∫—É—é —Ç–æ—á–∫—É –∏ –∫—Ä–∏—á–∏—Ç –Ω–∞ –≤—Å—é –æ–∫—Ä—É–≥—É. –ò–∑–¥–∞–ª–µ–∫–∞ —Ä–∞–∑–¥–∞—ë—Ç—Å—è –∫—Ä–∏–∫ (Player2) –≤ –æ—Ç–≤–µ—Ç",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –∏ —Ä–µ—à–∞—é—Ç —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥—É –æ –ø–µ—Ä–µ–∂–∏—Ç–æ–º",
                playerCount: 2
            },
            {
                string: "(Player1) –Ω–∞–ø–∞–¥–∞–µ—Ç –Ω–∞ (Player2), –Ω–æ –≤–Ω–µ–∑–∞–ø–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫—Ä–∞—Å–Ω–æ–π —Å–∫–æ–ª–æ–ø–µ–Ω–¥—Ä—ã –±—ã—Å—Ç—Ä–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –∏—Ö –ø–µ—Ä–µ–ø–∞–ª–∫—É",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –º–∞—Å—Ç–µ—Ä—è—Ç –≤–º–µ—Å—Ç–µ –∫–∞–∫–æ–π-—Ç–æ –º–µ—Ö–∞–Ω–∏–∑–º",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) —Ä–µ—à–∞—é—Ç –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å—Å—è –≤–º–µ—Å—Ç–µ –Ω–∞ –æ–¥–∏–Ω —Ü–∏–∫–ª, –ø–æ–º–æ–≥–∞—è –¥—Ä—É–≥ –¥—Ä—É–≥—É –¥–æ–±—ã–≤–∞—Ç—å –µ–¥—É",
                playerCount: 2
            },
            {
                string: "(Player1) —Å–ª–µ–¥–∏—Ç –∑–∞ (Player2) –∏ –≤–∏–¥–∏—Ç —Ç–æ, —á—Ç–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª",
                playerCount: 2
            },
            {
                string: "(Player1) —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç—Ä—É–ø –∫—Ä–∞—Å–Ω–æ–≥–æ —è—â–µ—Ä–∞ –Ω–∞ (Player2), –æ—Ç—á–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á—É—Ç—å –Ω–µ –ª–æ–≤–∏—Ç –∏–Ω—Ñ–∞—Ä–∫—Ç",
                playerCount: 2
            },
            {
                string: "(Player1) –ø—ã—Ç–∞–µ—Ç—Å—è —É–∫—Ä–∞—Å—Ç—å —Å–ª–∏–∑–Ω–µ–≤–∏–∫ —É (Player2), –Ω–æ (Player2) –∑–ª–∏—Ç—Å—è –∏ –ø—Ä–æ–±–∏–≤–∞–µ—Ç –µ–º—É –∫–æ–ø—å—ë–º –∫–æ–ª–µ–Ω–æ",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –¥–µ—Ä–∂–∞—Ç—Å—è –∑–∞ —Ä—É–∫–∏",
                playerCount: 2
            },
            {
                string: "(Player1) –æ—Ç—Å–æ—Å–∞–ª —É (Player2)",
                playerCount: 2
            },
            {
                string: `–ü–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–∫-—Ç–æ (Player1) –∫ (Player2) –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: "–í—ã –¥–∞–º–∞?"`,
                playerCount: 2
            },
            {
                string: "(Player1) –æ–±–µ—â–∞–µ—Ç (Player2) –Ω–µ —É–±–∏–≤–∞—Ç—å –µ–≥–æ –≤–∑–∞–º–µ–Ω –Ω–∞ –≤—Å–µ –µ–≥–æ –ø—Ä–∏–ø–∞—Å—ã, –Ω–æ (Player2) –¥–∞—ë—Ç (Player1) —Ç–æ–ª—å–∫–æ –ª–µ—â–∞",
                playerCount: 2
            },
            {
                string: "(Player1) –ø—Ä–∏–∑—ã–≤–∞–µ—Ç —Å—Ç–µ—Ä–≤—è—Ç–Ω–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é –ª–∏—á–∏–Ω–∫–∏, —á—Ç–æ–±—ã —É–±–∏—Ç—å (Player2), –Ω–æ –∏–º –æ–±–æ–∏–º —É–¥–∞–µ—Ç—Å—è —Å–±–µ–∂–∞—Ç—å",
                playerCount: 2
            },
            {
                string: "(Player1) –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞–Ω—É –æ—Ç –ª–∞–ø—à–µ–º—É—Ö–∏, (Player2) –Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞ –ø–æ–º–æ—â—å",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –≤–º–µ—Å—Ç–µ –æ—Ö–æ—Ç—è—Ç—Å—è",
                playerCount: 2
            },
            {
                string: "(Player1) –≤—ã—Å–∫–∞–∫–∏–≤–∞–µ—Ç –Ω–∞ (Player2) –∏–∑ —Ç–µ–º–Ω–æ—Ç—ã",
                playerCount: 2
            },
            {
                string: "(Player1) –ø—Ä–æ–¥–∞–µ—Ç (Player2) –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ–±—Ö–æ–¥—É —Ç–∞–±—É",
                playerCount: 2
            },
            {
                string: "(Player1) (Player2)",
                playerCount: 2
            },
            {
                string: "(Player1) —â–µ–∫–æ—á–µ—Ç (Player2)",
                playerCount: 2
            },
            {
                string: "(Player1) –ø—Ä–æ–ª–µ—Ç–∞–µ—Ç –≤–µ—Ä—Ö–æ–º –Ω–∞ —Ü–∏–∞–Ω–æ–≤–æ–º —è—â–µ—Ä–µ –Ω–∞–¥ (Player2). –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫—Ä–∞–π–Ω–µ –æ–∑–∞–¥–∞—á–µ–Ω",
                playerCount: 2
            },

            {
                string: "(Player1) –æ—Ö–æ—Ç–∏—Ç—Å—è, –Ω–æ –µ–≥–æ –¥–æ–±—ã—á—É –≤–æ—Ä—É—é—Ç (Player2) –∏ (Player3)",
                playerCount: 3
            },
            {
                string: "(Player1) –∑–∞–º–µ—á–∞–µ—Ç —Å–ª–µ–¥—è—â–∏—Ö –∑–∞ –Ω–∏–º (Player2) –∏ (Player3) –∏ –ø—ã—Ç–∞–µ—Ç—Å—è —Å–∫—Ä—ã—Ç—å—Å—è",
                playerCount: 3
            },
            {
                string: "(Player1) –ø—ã—Ç–∞–µ—Ç—Å—è —É–±–µ–¥–∏—Ç—å (Player2) –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç (Player3), –Ω–æ (Player2) –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –∏ –≤—ã–≥–æ–Ω—è–µ—Ç (Player1) –∏–∑ –∏—Ö –∫–æ–º–∞–Ω–¥—ã",
                playerCount: 3
            },
            {
                string: "(Player1) –∑–∞–ø—É–≥–∏–≤–∞–µ—Ç (Player2) –∏ (Player3) –∏ –≤—ã–≥–æ–Ω—è–µ—Ç –∏—Ö –∏–∑ —Å–≤–æ–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞",
                playerCount: 3
            },
            {
                string: "(Player1) –∏ (Player2) –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç (Player3) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∏–º, –Ω–æ –æ–Ω –º–æ–ª—á–∞ —É—Ö–æ–¥–∏—Ç",
                playerCount: 3
            },
            {
                string: "(Player1), (Player2) –∏ (Player3) —Å–ª—É—á–∞–π–Ω–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏ –Ω–µ—Ä–≤–Ω–æ —Ä–∞–∑–±—Ä–µ–¥–∞—é—Ç—Å—è –ø–æ —Ä–∞–∑–Ω—ã–º –ø—Ä–æ—Ö–æ–¥–∞–º –∫–æ–º–Ω–∞—Ç—ã",
                playerCount: 3
            },
            {
                string: "(Player1), (Player2) –∏ (Player3) –∫–∞—Ä–∞–±–∫–∞—é—Ç—Å—è –ø–æ —Å—Ç–µ–Ω–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞",
                playerCount: 3
            },
            {
                string: "(Player1), (Player2) –∏ (Player3) –∏—â–∞—Ç –ø—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ –≤–º–µ—Å—Ç–µ –∏ –æ–±—Å—É–∂–¥–∞—é—Ç –ø–æ –ø—É—Ç–∏ —Å–≤–æ—ë –ø—Ä–æ—à–ª–æ–µ",
                playerCount: 3
            },
            {
                string: "(Player1) —Ö–æ—á–µ—Ç –Ω–∞–ø–∞—Å—Ç—å –Ω–∞ (Player2), –Ω–æ –∑–∞ –Ω–∏–º –≤–µ–∑–¥–µ —Å–ª–µ–¥—É–µ—Ç (Player3); (Player1) —Ä–µ—à–∞–µ—Ç –Ω–µ —Ä–∏—Å–∫–æ–≤–∞—Ç—å –∏ –Ω–µ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –¥–≤—É—Ö –≤—Ä–∞–≥–æ–≤ —Å—Ä–∞–∑—É",
                playerCount: 3
            },
            {
                string: "(Player1) –≤–∏–¥–∏—Ç (Player2), –º–∞—à—É—â–µ–≥–æ —Ä—É–∫–æ–π, –∏ –º–∞—à–µ—Ç –≤ –æ—Ç–≤–µ—Ç. –ó–∞—Ç–µ–º –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ (Player2) –º–∞—à–µ—Ç –Ω–µ –µ–º—É, –∞ (Player3)",
                playerCount: 3
            },
            {
                string: "(Player1) –∏ (Player2) –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è, —á—Ç–æ–±—ã —É–±–∏—Ç—å (Player3), –Ω–æ –∏–º —Ç–∞–∫ –∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥—É—Ö—É —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å",
                playerCount: 3
            },
            {
                string: "(Player1) –∏ (Player2) –ø–æ–º–æ–≥–∞—é—Ç (Player3) –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –µ–º—É —Ä–µ–≥–∏–æ–Ω",
                playerCount: 3
            },
            {
                string: "(Player1), (Player2) –∏ (Player3) –ø—ã—Ç–∞—é—Ç—Å—è –ø–æ–¥–µ–ª–∏—Ç—å –ø–æ—Ä–æ–≤–Ω—É —É–±–∏—Ç—É—é –∏–º–∏ —Å–∫–æ–ª–æ–ø–µ–Ω–¥—Ä—É",
                playerCount: 3
            },
            {
                string: "(Player1) –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª–µ–∑—Ç—å –∫ –¥–æ–ª–≥–æ–Ω–æ–≥—É, (Player2) –¥–µ—Ä–∂–∏—Ç –µ–≥–æ, (Player3) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ —É–±–µ–∂–∞—Ç—å",
                playerCount: 3
            },
            {
                string: "(Player1) –∏ (Player2) —É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç –∑–∞—Å–∞–¥—É (Player3), –Ω–æ (Player3) —Ö–æ—Ä–æ—à–æ –≤–æ–æ—Ä—É–∂–µ–Ω –∏ –º–æ–∂–µ—Ç –∑–∞—â–∏—Ç–∏—Ç—å —Å–µ–±—è",
                playerCount: 3
            },
            {
                string: "(Player1) –∏ (Player2) —É—Å—ã–Ω–æ–≤–ª—è—é—Ç (Player3)",
                playerCount: 3
            },
            {
                string: "(Player1) –≤–∑—Ä—ã–≤–∞–µ—Ç –∫—É—á—É —Ö–ª–∞–º–∞ —Ä–∞–¥–∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, —á—É—Ç—å –Ω–µ —É–±–∏–≤–∞—è –ø—Ä—è—á—É—â–∏—Ö—Å—è –Ω–µ–ø–æ–¥–∞–ª–µ–∫—É (Player2) –∏ (Player3)",
                playerCount: 3
            },
            {
                string: "(Player1), (Player2) –∏ (Player3) —É—Å–ø–µ—à–Ω–æ —à—Ç—É—Ä–º—É—é—Ç –∑–∞—Å—Ç–∞–≤—É –º—É—Å–æ—Ä—â–∏–∫–æ–≤, –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±—ã–≤–∞—è –º–Ω–æ–≥–æ –±–æ–µ–ø—Ä–∏–ø–∞—Å–æ–≤",
                playerCount: 3
            },
            {
                string: "(Player1) –∏ (Player2) –ø–æ—á—Ç–∏ –Ω–∞—Ä—ã–≤–∞—é—Ç—Å—è –Ω–∞ —Å—Ç—ã—á–∫—É —Å –º—É—Å–æ—Ä—â–∏–∫–∞–º–∏, –æ–¥–Ω–∞–∫–æ –∏–∑ –Ω–∏–æ—Ç–∫—É–¥–∞ –≤—ã—Ö–æ–¥–∏—Ç (Player3) –∏ —É–ª–∞–∂–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç, —Å–ø–∞—Å–∞—è –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã",
                playerCount: 3
            },
            {
                string: "(Player1) –ø—Ä–æ–ª–µ—Ç–∞–µ—Ç –≤–µ—Ä—Ö–æ–º –Ω–∞ (Player2) –Ω–∞–¥ (Player3). –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫—Ä–∞–π–Ω–µ –æ–∑–∞–¥–∞—á–µ–Ω",
                playerCount: 3
            },
            {
                string: "(Player1) –∏ (Player2) —Ö–æ—Ç—è—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∑–∞—Å–∞–¥—É –¥–ª—è (Player3), –Ω–æ –Ω–∏–∫–∞–∫ –Ω–µ –º–æ–≥—É—Ç –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å –¥—Ä—É–≥ –¥—Ä—É–≥–æ–º",
                playerCount: 3
            },

            {
                string: "(Player1), (Player2) –∏ (Player3) –Ω–∞–±–ª—é–¥–∞—é—Ç –∑–∞ –¥—Ä–∞–∫–æ–π —è—â–µ—Ä–æ–≤ –≤ —è–º–µ –∏ —Å—Ç–∞–≤—è—Ç —Å—Ç–∞–≤–∫–∏. –ü–æ–±–µ–∂–¥–∞–µ—Ç —Å–≤–∞–ª–∏–≤—à–∏–π—Å—è –≤ —è–º—É (Player4)",
                playerCount: 4
            },
            {
                string: "(Player1), (Player2), (Player3) –∏ (Player4) –æ–±—Ä–∞–∑—É—é—Ç —Å–∞–º—É—é –∂—ë—Å—Ç–∫—É—é —Ç—É—Å—É –Ω–∞ —Ä–∞–π–æ–Ω–µ",
                playerCount: 4
            },
            {
                string: "(Player1) –Ω–∞–ø–∞–¥–∞–µ—Ç –Ω–∞ (Player2), (Player3) –∏ (Player4), –Ω–æ –∫–∏–¥–∞–µ—Ç –±–æ–º–±—É –Ω–µ —Ç—É–¥–∞, –∏ –æ–Ω–∏ –¥–∞—é—Ç –µ–º—É –ø–æ —Ä–æ–∂–µ",
                playerCount: 4
            },
            {
                string: "(Player1) –¥–µ–ª–∞–µ—Ç –∑–∞–ø–∞—Å—ã –µ–¥—ã, (Player2) –∏—Ö –∫—Ä–∞–¥–µ—Ç, (Player3) –µ–≥–æ —Ä–∞—Å—Å–µ–∫—Ä–µ—á–∏–≤–∞–µ—Ç, –∞ (Player4) –ø—ã—Ç–∞–µ—Ç—Å—è –≤—Å–µ–º–∏ —Å–∏–ª–∞–º–∏ –Ω–µ –¥–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ–≥–æ",
                playerCount: 4
            },
            {
                string: "(Player1) –∏ (Player2) –≤ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º —É–∂–∞—Å–µ —Å–±–µ–≥–∞—é—Ç –æ—Ç (Player3) –∏ (Player4)",
                playerCount: 4
            },
            {
                string: "(Player1) –∏ (Player2) –ø—ã—Ç–∞—é—Ç—Å—è –≤—ã—Å–ª–µ–¥–∏—Ç—å –∏ —É–±–∏—Ç—å (Player3) –∏ (Player4), –ø–æ–∫–∞ (Player3) –∏ (Player4) –ø—ã—Ç–∞—é—Ç—Å—è –≤—ã—Å–ª–µ–¥–∏—Ç—å –∏ —É–±–∏—Ç—å (Player1) –∏ (Player2)",
                playerCount: 4
            },
            {
                string: "(Player1), (Player2) –∏ (Player3) –ª–æ–≤—è—Ç (Player4) –∏ –∏–∑–¥–µ–≤–∞—é—Ç—Å—è –Ω–∞–¥ –Ω–∏–º; –ø–æ–∑–∂–µ –µ–º—É —É–¥–∞—ë—Ç—Å—è —Å–±–µ–∂–∞—Ç—å, –Ω–æ –Ω–µ –±–µ–∑ –ø–∞—Ä—ã —à—Ä–∞–º–æ–≤ - –∏ –Ω–∞ —Ç–µ–ª–µ, –∏ –Ω–∞ –ø—Å–∏—Ö–∏–∫–µ",
                playerCount: 4
            },
            {
                string: "(Player1), (Player2) –∏ (Player3) —Å–ø–∞—Å–∞—é—Ç (Player4) –æ—Ç –æ—Ä–¥—ã –ø–∞—É–∫–æ–≤; –æ–Ω –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç –∏—Ö, –æ—Ç–¥–∞–≤ –∑–∞–≥–∞–¥–æ—á–Ω—ã–π —Ü–≤–µ—Ç–Ω–æ–π –∂–µ–º—á—É–≥",
                playerCount: 4
            },

            {
                string: "(Player1), (Player2) –∏ (Player3), (Player4) —Å—Å–æ—Ä—è—Ç—Å—è –∑–∞ –ø—Ä–∞–≤–æ –≤–∑—è—Ç—å (Player5) –≤ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É. –ü–æ–∫–∞ –¥–µ–ª–æ –Ω–µ –¥–æ—à–ª–æ –¥–æ –¥—Ä–∞–∫–∏, (Player5) –º–æ–ª—á–∞ —É—Å–∫–æ–ª—å–∑–∞–µ—Ç –∏–∑ –∏—Ö –≤–∏–¥—É",
                playerCount: 5
            },
            {
                string: "(Player1) –∑–∞—è–≤–ª—è–µ—Ç, —á—Ç–æ –ì–ò - –Ω–µ—á–µ—Å—Ç–Ω–∞—è –∏ —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞. –ö –Ω–µ–º—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è (Player2) –∏ (Player3), –∂–µ–ª–∞—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏, –∞ (Player4) –∏ (Player5) —Å–º–µ—é—Ç—Å—è –Ω–∞–¥ –∏–¥–µ–µ–π",
                playerCount: 5
            },
            {
                string: "(Player1), (Player2), (Player3) –∏ (Player4) –ø—ã—Ç–∞—é—Ç—Å—è –≤—ã—Ç–∞—â–∏—Ç—å (Player5) –∏–∑ —è–º—ã —Å —Ç–æ–Ω–Ω–æ–π —É–ª–∏—Ç–æ–∫, –Ω–æ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ —Å–∞–º–∏ —Ç—É–¥–∞ —Å–≤–∞–ª–∏–≤–∞—é—Ç—Å—è",
                playerCount: 5
            },
            {
                string: "(Player1) –∏ (Player2) —è—Ä–æ—Å—Ç–Ω–æ –¥–µ—Ä—É—Ç—Å—è, –Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≥—Ä—É–ø–ø–∞ –∏–∑ (Player3), (Player4) –∏ (Player5) –∏ –ø—Ä–æ–≥–æ–Ω—è–µ—Ç –∏—Ö",
                playerCount: 5
            },

            {
                string: "(Player1), (Player2) –∏ (Player3) —Å–æ—Ä–µ–≤–Ω—É—é—Ç—Å—è —Å (Player4), (Player5) –∏ (Player6) –∑–∞ —Ä–µ—Å—É—Ä—Å—ã",
                playerCount: 6
            },
        ],
        lethal: [
            {
                string: "(Player1-Died) –ø–æ–ø–∞–¥–∞–µ—Ç –∫ –∏—Ç–µ—Ä–∞—Ç–æ—Ä—É-—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ç–æ—Ä—É –∏ –ø–æ–≥–∏–±–∞–µ—Ç –∏–∑-–∑–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–°—Ç–∞–ª –Ω–µ—É–¥–∞—á–Ω—ã–º –æ–±—Ä–∞–∑—Ü–æ–º —ç—Ç–∏—á–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤`;
                }
            },
            {
                string: "(Player1-Died) –ø–æ–¥—Å–∫–∞–ª—å–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∂–µ–º—á—É–≥–µ –∏ —É–º–∏—Ä–∞–µ—Ç",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–± –≤ –Ω–µ—Å—á–∞—Å—Ç–Ω–æ–º —Å–ª—É—á–∞–µ`;
                }
            },
            {
                string: "(Player1-Died) —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –≤–∑–ª–æ–º–∞—Ç—å –ø–µ–Ω—Ç–∞–≥–æ–Ω, –Ω–æ –µ–≥–æ –Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–•–∞–∫–µ—Ä—Ü—Å—Ç–≤–æ –¥–æ –¥–æ–±—Ä–∞ –Ω–µ –¥–æ–≤–æ–¥–∏—Ç`;
                }
            },
            {
                string: "(Player1-Died) —Ç–µ—Ä—è–µ—Ç —Å–≤–æ–µ–≥–æ –∫–æ—Ç—ë–Ω–∫–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è —Å –æ–±—Ä—ã–≤–∞",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–î–µ—Ç–µ–π`;
                }
            },
            {
                string: "–ú—É—Å–æ—Ä—â–∏–∫ –∫–∏–¥–∞–µ—Ç –∫–æ–ø—å—ë –≤ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è, –Ω–æ –ø–æ–ø–∞–¥–∞–µ—Ç –ø—Ä—è–º–æ –≤ –≥–æ–ª–æ–≤—É (Player1-Died)",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–± –ø–æ —á–∏—Å—Ç–æ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏`;
                }
            },
            {
                string: "(Player1-Died) –≤—ã–ø–∏–≤–∞–µ—Ç –≤–æ–¥—É –∏ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —É–±–∏—Ç —Ä–∞–∑—ä—è—Ä–µ–Ω–Ω—ã–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º —Å —Ç–µ—Ä–Ω–æ–≤—ã–º –≤–µ–Ω—Ü–æ–º –Ω–∞ –≥–æ–ª–æ–≤–µ",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–± –ø–æ—Ç–æ–º—É —á—Ç–æ –í–µ–Ω–µ—Ü`;
                }
            },
            {
                string: "(Player1-Died) —Ç–æ–ø–∏—Ç –∫–æ—Ç—ë–Ω–∫–∞, –Ω–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –¥–æ–ª–≥–æ, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–æ–∂–¥—å",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–±, –¥–æ–±–ª–µ—Å—Ç–Ω–æ —Ç–æ–ø—è –∫–æ—Ç—ë–Ω–∫–∞`;
                }
            },
            {
                string: "(Player1-Died) —Ä–µ—à–∞–µ—Ç —É—Ç–æ–ø–∏—Ç—å—Å—è –≤ –ü—É—Å—Ç–æ—Ç–µ –∏ –≤–æ–∑–Ω–æ—Å–∏—Ç—Å—è",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–í–æ–∑–Ω—ë—Å—Å—è`;
                }
            },
            {
                string: "(Player1-Died) —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Å–µ–±–µ –ø–∏—Ä—Å–∏–Ω–≥. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –±–∏–≤–µ–Ω—å –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–≥–æ —Å—Ç–µ—Ä–≤—è—Ç–Ω–∏–∫–∞ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ —Å–∞–º–æ–π –±–ª–µ—Å—Ç—è—â–µ–π –∏–¥–µ–µ–π",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª —É–±–∏—Ç –ø–∏—Ä—Å–∏–Ω–≥–æ–º`;
                }
            },
            {
                string: "(Player1-Died) —Ä–µ—à–∞–µ—Ç —É—Ç–æ–ø–∏—Ç—å—Å—è –≤ –ü—É—Å—Ç–æ—Ç–µ, –Ω–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—Ç–≥–æ–ª–æ—Å–∫–æ–º",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ù–∞–≤–µ–∫–∏ –∑–∞—Å—Ç—Ä—è–ª –º–µ–∂–¥—É –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–º –ø–ª–∞–Ω–æ–º –∏ –º–∏—Ä–æ–º –Ω–µ–±—ã—Ç–∏—è`;
                }
            },
            {
                string: "–í —É–±–µ–∂–∏—â–µ –∫ (Player1-Died) –∑–∞–ø–æ–ª–∑–∞–µ—Ç –∫—Ä–∞—Å–Ω–∞—è —Å–∫–æ–ª–æ–ø–µ–Ω–¥—Ä–∞. –ò—Ç–æ–≥: —Å–º–µ—Ä—Ç—å",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü–æ—Ç—Ä–æ–≥–∞–ª—Å—è —É—Å–∏–∫–∞–º–∏ –∫—Ä–∞—Å–Ω–æ–π —Å–∫–æ–ª–æ–ø–µ–Ω–¥—Ä—ã`;
                }
            },
            {
                string: "(Player1-Died) –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥—É—Ä–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç—Å—è –≤ –∂–µ—Ä—Ç–≤—É –©–µ–ø–∫–µ –°–æ–ª–æ–º—ã",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–°–≤—è–∑–∞–ª—Å—è —Å –¥—É—Ä–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π`;
                }
            },
            {
                string: "(Player1-Died) –≤–Ω–µ–∑–∞–ø–Ω–æ –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è –≤ –†—É–±–∏–∫–æ–Ω–µ. –û–Ω –ø–æ–≥–∏–±–∞–µ—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —É–±–µ–∂–∏—â–∞",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–¢–µ–ø–µ—Ä—å –∂–∏–≤—ë—Ç –≤ –∞–¥—É`;
                }
            },
            {
                string: "(Player1-Died) –ø—ã—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞—Ç—å –∏–∑ –ø–æ–¥ —Å–ø—É—Å–∫–æ–≤—ë—Ä—Ç–∫–∏ –±–æ–º–±—É, –Ω–æ –∑–∞–¥–µ–≤–∞–µ—Ç –µ—ë –∏ –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü—ã—Ç–∞–ª—Å—è –¥–æ—Å—Ç–∞—Ç—å –±–æ–º–±—É –∏–∑ –ø–æ–¥ —Å–ø—É—Å—Ç–∫–æ–≤—ë—Ä—Ç–∫–∏`;
                }
            },
            {
                string: "–ö–æ–≤–∞—Ä–Ω–∞—è –∫–∞–ª—å–º–∞—Ä–æ–∫–∞–¥–∞ —Å–±–∏–≤–∞–µ—Ç (Player1-Died) —Å —à–µ—Å—Ç–∞, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Å–º–µ—Ä—Ç–∏ (Player1-Died)",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª —É–±–∏—Ç –≥–Ω–∏–¥–æ–π`;
                }
            },
            {
                string: "(Player1-Died) –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–≥–ª–æ—Ç–∏—Ç—å –∂–µ–º—á—É–≥, –Ω–æ –¥–∞–≤–∏—Ç—Å—è –∏–º –∏ —É–º–∏—Ä–∞–µ—Ç",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–± –æ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∂–µ–º—á—É–≥–∞`;
                }
            },
            {
                string: "(Player1-Died) –≤–ø–µ—Ä–≤—ã–µ –∑–∞ 300 —á–∞—Å–æ–≤ –≤—ã–∂–∏–≤–∞–Ω–∏—è —É–∑–Ω–∞–µ—Ç –ø—Ä–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ø—Ä—è—Ç–Ω–∏–∫–∞. –ö –Ω–µ—Å—á–∞—Å—Ç—å—é, —É–∂–µ —Å–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–± –æ—Ç —É–∑—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π`;
                }
            },
            {
                string: "(Player1-Died) –¥–∞–≤–∏—Ç—Å—è —Ñ—Ä—É–∫—Ç–æ–º",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü–æ–¥–∞–≤–∏–ª—Å—è —Ñ—Ä—É–∫—Ç–æ–º`;
                }
            },
            {
                string: "(Player1-Died) —Ö–≤–∞—Ç–∞–µ—Ç —Å–∫–æ–ª–æ–ø–µ–Ω–¥—Ä–∞, –Ω–æ, –Ω–µ —Ä–∞—Å—Ç–µ—Ä—è–≤—à–∏—Å—å, (Player1-Died) –∫–∏–¥–∞–µ—Ç –≤ –Ω–µ–µ —à–∞—Ö–∏–¥–∫—É... –∏ –ø–æ–≥–∏–±–∞–µ—Ç",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ë—Ä–æ—Å–∏–ª —à–∞—Ö–∏–¥–∫—É –≤ –Ω–µ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç`;
                }
            },
            {
                string: "(Player1-Died) –ø–æ–ø–∞–¥–∞–µ—Ç—Å—è –°–≤—è—Ç–æ–º—É –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω–æ –≤–æ–∑–Ω–æ—Å–∏—Ç—Å—è",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–í—Å—Ç—Ä–µ—Ç–∏–ª—Å—è —Å–æ –°–≤—è—Ç—ã–º`;
                }
            },
            {
                string: "(Player1-Died) —á–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä—Å–∏–∫–æ–≤–æ–π –∂–µ–º—á—É–∂–∏–Ω—ã, –∏, –Ω–µ –≤—ã–Ω–µ—Å—è —É–≤–∏–¥–µ–Ω–Ω–æ–≥–æ, –ø—Ä—ã–≥–∞–µ—Ç —Å–æ —Å–∫–∞–ª—ã",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ù–µ –≤—ã–¥–µ—Ä–∂–∞–ª –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∫–æ—à–∫–æ–∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–≤`;
                }
            },
            {
                string: "(Player1-Died) –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¢—Ä–æ–π–Ω–æ–µ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤–Ω–µ–∑–∞–ø–Ω–æ –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –∏–∑ —Å–≤—è–∑–∏",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ó–∞–∫–æ—Å–ø–ª–µ–∏–ª –©–µ–ø–∫—É`;
                }
            },
            {
                string: "(Player1-Died) –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–±—Ä–∞—Ç—å—Å—è –≤ –ú–µ–≥–∞–ø–æ–ª–∏—Å. –í—Å–ø–æ–º–∏–Ω–∞–µ—Ç –æ —Å–≤–æ–µ–π –æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —Å –º—É—Å–æ—Ä—â–∏–∫–∞–º–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü—Ä–æ—Å–ª–∞–≤–∏–ª—Å—è —Å–≤–æ–µ–π –ø–ª–æ—Ö–æ–π –ø–∞–º—è—Ç—å—é`;
                }
            },
            {
                string: "(Player1-Died) –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ–∑–Ω–µ—Å—Ç–∏—Å—å, –Ω–æ –ø—Ä–∏–∑–Ω–∞—ë—Ç—Å—è –ü—É—Å—Ç–æ—Ç–Ω—ã–º–∏ —á–µ—Ä–≤—è–º–∏ –∫–∞–∫ —Å–ª–∏—à–∫–æ–º –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—ã–π –Ω–∞ –≤—Ç–æ—Ä–æ–π –∫–∞—Ä–º–µ",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ù–∞–≤–µ–∫–∏ –∑–∞—Å—Ç—Ä—è–ª –º–µ–∂–¥—É –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–º –ø–ª–∞–Ω–æ–º –∏ –º–∏—Ä–æ–º –Ω–µ–±—ã—Ç–∏—è –ø–æ—Ç–æ–º—É —á—Ç–æ —Ö–æ—Ä–Ω–∏`;
                }
            },
            {
                string: "(Player1-Died) –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –ø–æ—Ç–æ–ª–æ–∫ –∏ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ö–≤–∞—á–µ–Ω —Å–ø—É—Å—Ç–∫–æ–≤—ë—Ä—Ç–∫–æ–π",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–í—Å—Ç—Ä–µ—Ç–∏–ª –≤–µ—Å—ë–ª—ã–π —Å—é—Ä–ø—Ä–∏–∑ –Ω–∞ –ø–æ—Ç–æ–ª–∫–µ`;
                }
            },
            {
                string: "(Player1-Died) –≤–∏–¥–∏—Ç –≥–æ—Ä—è—â–µ–≥–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞, –∑–∞–ª–µ–∑–∞–µ—Ç –≤ –Ω–µ–≥–æ –∏ —Å–≥–æ—Ä–∞–µ—Ç",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–± –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–∫ –Ω–∞–¥–æ –±—ã–ª–æ`;
                }
            },
            {
                string: "(Player1-Died) —É—Ö–æ–¥–∏—Ç –∑–∞ —Ñ—Ä—É–∫—Ç–∞–º–∏ –∏ –±–æ–ª—å—à–µ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∏–≥—Ä—É",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª —É–±–∏—Ç –î—É—Ç–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–æ–±–µ–≥–∞ –∏–∑ –†–í–ì–ò`;
                }
            },
            {
                string: "(Player1-Died) —Ç—Ä–æ–≥–∞–µ—Ç –∂–∏–≤—É—é —Ç—Ä–∞–≤—É. –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç—Ä–∞–≥–∏—á–Ω–æ",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü–æ—Ç—Ä–æ–≥–∞–ª –∂–∏–≤—É—é —Ç—Ä–∞–≤—É`;
                }
            },
            {
                string: "(Player1-Died) –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ—Ç –ø–æ –ø–æ–¥–≤–µ—Å—É –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞ —Å –ø–æ–º–æ—â—å—é –∫—Ä—é–∫-—á–µ—Ä–≤—è, –Ω–æ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∏–∑ –ø—Ä—ã–∂–∫–æ–≤ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –≤ –ø—Ä–æ–ø–∞—Å—Ç—å",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–í–æ–∑–Ω–µ–Ω–∞–≤–∏–¥–µ–ª –ø–æ–¥–≤–µ—Å`;
                }
            },
            {
                string: "(Player1-Died) –ø–æ–ø–∞–¥–∞–µ—Ç—Å—è –≤ —á—å—é-—Ç–æ –ª–æ–≤—É—à–∫—É –∏ –ø–æ–≥–∏–±–∞–µ—Ç —Å—Ç—Ä–∞—à–Ω–æ–π —Å–º–µ—Ä—Ç—å—é",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–± –∏–∑-–∑–∞ —á—å–µ–π-—Ç–æ —Å–∞–¥–∏—Å—Ç—Å–∫–æ–π –ª–æ–≤—É—à–∫–∏`;
                }
            },
            {
                string: "(Player1-Died) –∑–∞—Ä–∞–∂–∞–µ—Ç—Å—è —á–µ–º-—Ç–æ –∏ —É–º–∏—Ä–∞–µ—Ç",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ó–∞–±–æ–ª–µ–ª`;
                }
            },
            {
                string: "(Player1-Died) —Ä–µ—à–∞–µ—Ç, —á—Ç–æ –æ–±–Ω—è—Ç—å –¥–æ–ª–≥–æ–Ω–æ–≥–∞ - –±–ª–µ—Å—Ç—è—â–∞—è –∏–¥–µ—è",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü—Ä–∏–¥—É–º–∞–ª –±–ª–µ—Å—Ç—è—â—É—é –∏–¥–µ—é`;
                }
            },
            {
                string: "(Player1-Died) —É–º–∏—Ä–∞–µ—Ç –ø–æ –ø–æ–Ω—è—Ç–Ω—ã–º –≤—Å–µ–º –ø—Ä–∏—á–∏–Ω–∞–º",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–£–º–µ—Ä –ø–æ –ø–æ–Ω—è—Ç–Ω—ã–º –≤—Å–µ–º –ø—Ä–∏—á–∏–Ω–∞–º`;
                }
            },
            {
                string: "(Player1-Died) –≤–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è –≤ –∫–∞–º–µ—Ä—É –ë–µ—Å–ø–æ–¥–æ–±–Ω–æ–π –ù–µ–≤–∏–Ω–Ω–æ—Å—Ç–∏ –≤–µ—Å—å –≤ –≥—Ä—è–∑–∏ –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–≥–∏–±–∞–µ—Ç –ø–æ –ø—Ä–∏—á–∏–Ω–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –í—ã—Å—à–∏—Ö –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ò—Ç–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –°–∏–ª",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–± –ø–æ –ø—Ä–∏—á–∏–Ω–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –í—ã—Å—à–∏—Ö –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ò—Ç–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –°–∏–ª`;
                }
            },
            {
                string: "(Player1-Died) —Å–ª–µ–¥—É–µ—Ç –∑–∞ —Å–≤–æ–∏–º–∏ –∞–º–±–∏—Ü–∏—è–º–∏. –û–Ω–∏ –ø—Ä–∏–≤–æ–¥—è—Ç –µ–≥–æ –≤ –≥—Ä–æ–±",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;
                    placements.push(player1);

                    player1.alive = false;
                    player1.killedBy = `–î–æ–≤–µ–ª—Å—è —Å–≤–æ–∏–º–∏ –∞–º–±–∏—Ü–∏—è–º–∏`;
                }
            },
            {
                string: "(Player1-Died) –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Ä—É—á–∏—Ç—å –∫—Ä–∞—Å–Ω–æ–≥–æ —è—â–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é —Ç—É—à–∏ –∫–∞–ª—å–º–∞—Ä–æ–∫–∞–¥—ã, –Ω–æ –∫—Ä–∞—Å–Ω—ã–π —è—â–µ—Ä —Ä–µ—à–∞–µ—Ç, —á—Ç–æ (Player1-Died) –∫—É–¥–∞ –≤–∫—É—Å–Ω–µ–µ –∫–∞–ª—å–º–∞—Ä–æ–∫–∞–¥—ã",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player1, `–ù–µ—É–¥–∞—á–Ω–æ –ø—Ä–∏—Ä—É—á–∏–ª –∫—Ä–∞—Å–Ω–æ–≥–æ —è—â–µ—Ä–∞`);
                }
            },
            {
                string: "(Player1-Died) –ø–æ–≥–∏–±–∞–µ—Ç –æ—Ç –∂–µ—Å—Ç–æ–∫–æ–π –ø—Ä–∏—Ä–æ–¥—ã –≤–µ–ª–∏–∫–æ–≥–æ —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player1, `–ë—ã–ª —É–±–∏—Ç —Å–∏—Å—Ç–µ–º–æ–π —Ä–∞–±–æ—Ç—ã –ì–ò`);
                }
            },
            {
                string: "(Player1-Died) –ø—ã—Ç–∞–µ—Ç—Å—è –≤–∑–æ–±—Ä–∞—Ç—å—Å—è –Ω–∞ –∫—Ä–∞–π –∫–æ–º–Ω–∞—Ç—ã –∏ –≤—ã–ø–∞–¥–∞–µ—Ç –∑–∞ –∫–∞—Ä—Ç—É",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player1, `–°—Ç–∞–ª —Å–º–µ–ª—ã–º –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä–æ–º`);
                }
            },
            {
                string: "(Player1-Died) —Å–ø–æ—Ç—ã–∫–∞–µ—Ç—Å—è –∏ –ø–∞–¥–∞–µ—Ç –ª–∏—Ü–æ–º –Ω–∞ –∫–æ–ø—å–µ",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player1, `–ü–æ—Ü–µ–ª–æ–≤–∞–ª –∫–æ–ø—å—ë`);
                }
            },
            {
                string: "(Player1-Died) –∑–∞—Å—ã–ø–∞–µ—Ç –∏ –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è. –ü–æ –±–æ–ª—å—à–µ–π —á–∞—Å—Ç–∏ –ø–æ—Ç–æ–º—É, —á—Ç–æ –æ–Ω –∑–∞—Å–Ω—É–ª –ø–æ—Å—Ä–µ–¥–∏ GW_B02",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player1, `–ù—É–∂–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º —Å–Ω–∞ –ª—É—á—à–µ`);
                }
            },


            {
                string: "(Player1) –º–∞—Å—Ç–µ—Ä–∏—Ç –∫—Ä–∞–π–Ω–µ –æ–ø–∞—Å–Ω–æ–µ –æ—Ä—É–∂–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—ã –ø–æ–∑–≤–æ–ª–∏–ª–æ –µ–º—É –ª–µ–≥–∫–æ –ø–æ–±–µ–¥–∏—Ç—å –≤ –ì–ò; (Player2-Died) —Å–ª—É—á–∞–π–Ω–æ –ª–æ–º–∞–µ—Ç –ø—Ä–æ—Ç–æ—Ç–∏–ø –∏ (Player1) –≤ –≥–Ω–µ–≤–µ —É–±–∏–≤–∞–µ—Ç –µ–≥–æ",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–ù–µ—Ö—É–π –∫ —á—É–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞–º –ª–µ–∑—Ç—å (–±—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player1.name + `</font></strong>)`;
                }
            },
            {
                string: "(Player1) –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –≥–æ–ª–æ–≤—É –∏–¥–µ—è, –∫–∞–∫ —Ä–µ—à–∏—Ç—å –í–µ–ª–∏–∫—É—é –ó–∞–¥–∞—á—É, –∏ –æ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ–±—É–µ—Ç –µ—ë –Ω–∞ (Player2-Died). –í –∏—Ç–æ–≥–µ –Ω–µ —è—Å–Ω–æ - —Å–¥–æ—Ö (Player2-Died) –∏–ª–∏ –≤–æ–∑–Ω—ë—Å—Å—è",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–°—Ç–∞–ª –∫–æ—Ç–æ–º –®—Ä—ë–¥–∏–Ω–≥–µ—Ä–∞ (<strong><font color="ffff00">` + player1.name + `</font></strong>)`;
                }
            },
            {
                string: "(Player1) –∫—É—à–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (Player2-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–°—Ç–∞–ª –æ–±–µ–¥–æ–º <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) —Å–∫–∏–¥—ã–≤–∞–µ—Ç (Player2-Died) –≤ –≤–æ–¥–æ—ë–º —Å –ø–∏—è–≤–∫–∞–º–∏",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª –ø–æ–¥–ª–æ —É–±–∏—Ç <strong><font color="ffff00">` + player1.name + `</font></strong> –∏ –ø–∏—è–≤–∫–∞–º–∏`;
                }
            },
            {
                string: "(Player1-Died) –≤–æ–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç (Player2) –Ω–∞ –ø–æ–µ–¥–∏–Ω–æ–∫, –Ω–æ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ –Ω–µ–ª–æ–≤–∫–æ—Å—Ç–∏ –±—ã—Å—Ç—Ä–æ —É–±–∏—Ç",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player2.kills++;
                    player2.hasKilled.push(player1.name);

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ù–µ —Å–º–æ–≥ –ø–æ–±–æ—Ä–æ—Ç—å <strong><font color="ffff00">` + player2.name + `</font></strong> –≤ –ø–æ–µ–¥–∏–Ω–∫–µ`;
                }
            },
            {
                string: "(Player1) –∑–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –º–∏–Ω—É, –Ω–∞–¥–µ—è—Å—å —É–±–∏—Ç—å —è—â–µ—Ä–∞, –Ω–æ –Ω–∞ –Ω–µ—ë —Å–ª—É—á–∞–π–Ω–æ –ø–æ–ø–∞–¥–∞–µ—Ç—Å—è (Player2-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player1);
                    player2.alive = false;
                    player2.killedBy = `–ü–æ–ø–∞–ª—Å—è –≤ –º–∏–Ω—É <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∑–∞—Å–∞–¥—É –¥–ª—è (Player2-Died), –Ω–æ —É—Å—Ç–∞—ë—Ç –∂–¥–∞—Ç—å –∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∑–∞ –Ω–∏–º",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª —É–±–∏—Ç –Ω–µ—Ç–µ—Ä–ø–µ–ª–∏–≤–æ—Å—Ç—å—é <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) –∏ (Player2-Died) –∏–≥—Ä–∞—é—Ç –≤ —á–∏—á–∏–∫–æ, —Ä–µ—à–∞—è, –∫—Ç–æ –±—É–¥–µ—Ç –¥–æ–±—ã—á–µ–π –∫–∞–º—É—Ñ–ª—è–∂–Ω–æ–π –ª–æ–≤—É—à–∫–∏. –í—ã–∏–≥—Ä—ã–≤–∞–µ—Ç (Player1), –ø–æ–¥–ª–æ —Ç–æ–ª–∫–Ω—É–≤ (Player2-Died) –≤ –ø–∞—Å—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª –ø–æ–¥–ª–æ —É–±–∏—Ç <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –∏ (Player2) —Ä–µ—à–∏–ª–∏ –ø–æ—Å–ø–æ—Ä–∏—Ç—å, –∫—Ç–æ –ø–µ—Ä–µ–ø—Ä—ã–≥–Ω–µ—Ç –Ω–∞ –∫–∞–ª—å–º–∞—Ä–æ–∫–∞–¥–µ 20-—Ç–∏ –º–µ—Ç—Ä–æ–≤—É—é –ø—Ä–æ–ø–∞—Å—Ç—å. –ù–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ —Å–ø—É—Å—Ç—è (Player2) —Å –≥—Ä—É—Å—Ç—å—é —Å–º–æ—Ç—Ä–∏—Ç –≤ –ø—Ä–æ–ø–∞—Å—Ç—å, –∫—É–¥–∞ –ø–∞–¥–∞–µ—Ç (Player1-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ù–µ—É–¥–∞—á–Ω–æ –ø—Ä—ã–≥–Ω—É–ª`;
                }
            },
            {
                string: "(Player1-Died) –Ω–∞–ø–∞–¥–∞–µ—Ç –Ω–∞ —á—Ç–æ-—Ç–æ, —á—Ç–æ —Å—á–∏—Ç–∞–µ—Ç (Player2), –Ω–æ –æ–±–æ–∑–Ω–∞—ë—Ç—Å—è –∏ –Ω–∞—Ç—ã–∫–∞–µ—Ç—Å—è –Ω–∞ –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–Ω–æ–≥–æ –±–µ–ª–æ–≥–æ —è—â–µ—Ä–∞. –ù—è–º",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ü–µ—Ä–µ–ø—É—Ç–∞–ª <strong><font color="ffff00">` + player2.name + `</font></strong> —Å —è—â–µ—Ä–æ–º`;
                }
            },
            {
                string: "(Player1) –∂–µ—Å—Ç–æ–∫–æ —Ä–∞—Å—á–ª–µ–Ω—è–µ—Ç (Player2-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–°—Ç–∞–ª —Ä–∞—Å—á–ª–µ–Ω—ë–Ω–∫–æ–π –∞–≤—Ç–æ—Ä—Å—Ç–≤–∞ <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) –ø—Ä–∏—Ä—É—á–∞–µ—Ç —è—â–µ—Ä–∞ —Å–≤–µ–∂–∏–º —Ç—Ä—É–ø–æ–º (Player2-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–°—Ç–∞–ª –æ–±–µ–¥–æ–º –¥–ª—è —è—â–µ—Ä–∞ <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å (Player2-Died) –æ –ø—Ä–∏–Ω—Ü–∏–ø–µ —Ä–∞–±–æ—Ç—ã —Ü–∏–∫–ª–∞. (Player2-Died) –∑–ª–∏—Ç—Å—è –∏ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ, —É–±–∏–≤–∞—è —Å–µ–±—è –¥–ª—è –ø–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏—è",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–°–ª–∏—à–∫–æ–º —É–ø–æ—Ä–Ω–æ –¥–æ–∫–∞–∑—ã–≤–∞–ª —Å–≤–æ—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è`;
                }
            },
            {
                string: "(Player1-Died) —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∑–∞—Å–∞–¥—É –¥–ª—è (Player2), –Ω–æ –ø–æ–ø–∞–¥–∞–µ—Ç—Å—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∂–µ –ª–æ–≤—É—à–∫—É",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ü–æ–ø–∞–ª –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∂–µ –ª–æ–≤—É—à–∫—É`;
                }
            },
            {
                string: "(Player1-Died) –≤–∑–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –≤—ã—Å–æ–∫—É—é —Ç–æ—á–∫—É. –ó–∞–º–µ—Ç–∏–≤—à–∏–π –µ–≥–æ —Å–Ω–∏–∑—É (Player2) —Ç–æ—á–Ω–æ –ø–æ–ø–∞–¥–∞–µ—Ç –∫–æ–ø—å–µ–º –ø—Ä—è–º–æ –≤ (Player1-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player2.kills++;
                    player2.hasKilled.push(player1.name);

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–°—Ç–∞–ª –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –≤—ã–¥–∞—é—â–µ–π—Å—è –º–µ—Ç–∫–æ—Å—Ç–∏ <strong><font color="ffff00">` + player2.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) —É—Å—Ç–∞—ë—Ç –æ–±—ä—è—Å–Ω—è—Ç—å (Player2-Died), –ø–æ—á–µ–º—É —Å–ª–∏–∑–Ω–µ–∫–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç —Å—Ç—Ä–∞–¥–∞—Ç—å, –∏ –ø—Ä–æ—Ç—ã–∫–∞–µ—Ç –µ–≥–æ –∫–æ–ø—å–µ–º",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `<strong><font color="ffff00">` + player1.name + `</font></strong> —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ –æ–±—ä—è—Å–Ω—è–ª –µ–º—É —á—É–≤—Å—Ç–≤–∞ —Å–ª–∏–∑–Ω–µ–∫–æ—Ç–æ–≤`;
                }
            },
            {
                string: "(Player1) —Å–∂–∏–≥–∞–µ—Ç (Player2-Died) –∑–∞–∂–∏–≤–æ",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–ü–æ–≥–∏–± –ø–æ—Ç–æ–º—É —á—Ç–æ –µ–≥–æ –±–ª—è—Ç—å <strong><font color="ffff00">` + player1.name + `</font></strong> —Å–∂—ë–≥`;
                }
            },
            {
                string: "(Player1) –Ω–∞—Ç—Ä–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞ (Player2-Died) –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π —Å –∂–∞–ª–∞–º–∏",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–û–∫–∞–∑–∞–ª—Å—è –∑–∞–∫–æ–ª–æ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è–º–∏ –æ—Ç <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) —Ç–æ–ø–∏—Ç (Player2-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª —É—Ç–æ–ø–ª–µ–Ω <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) —Ä–∞—Å—Å—Ç—Ä–µ–ª–∏–≤–∞–µ—Ç (Player2-Died) –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∞",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–ü–æ–≥–∏–± –æ—Ç —É–ª—å—Ç—Ä–∞–Ω–∞—Å–∏–ª–∏—è <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) –ø–∞–¥–∞–µ—Ç –Ω–∞ (Player2-Died), –≤—Å–ª–µ–¥—Å—Ç–≤–∏–µ —á–µ–≥–æ (Player2-Died) –ø–æ–≥–∏–±–∞–µ—Ç",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª —Ä–∞–∑–¥–∞–≤–ª–µ–Ω <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) –∏–∑–±–∏–≤–∞–µ—Ç (Player2-Died) –∫–∞–º–Ω–µ–º –¥–æ —Å–º–µ—Ä—Ç–∏",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–ü–æ–≥–∏–± –æ—Ç —É–ª—å—Ç—Ä–∞–Ω–∞—Å–∏–ª–∏—è <strong><font color="ffff00">` + player1.name + `</font></strong> –≤ —Å—Ç–∏–ª–µ –∫–∞–º–µ–Ω–Ω–æ–≥–æ –≤–µ–∫–∞`;
                }
            },
            {
                string: "(Player1) —É–±–∏–≤–∞–µ—Ç (Player2-Died) –º–æ—Ä–∞–ª—å–Ω–æ, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø—Ä–æ–Ω–∑–∞–µ—Ç –µ–≥–æ –∫–æ–ø—å–µ–º",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª –º–æ—Ä–∞–ª—å–Ω–æ (–∏ –±—É–∫–≤–∞–ª—å–Ω–æ) —É–±–∏—Ç <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) –≤–æ–Ω–∑–∞–µ—Ç –∫–æ–ø—å—ë –≤ –∂–∏–≤–æ—Ç (Player2-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª –ø—Ä–æ–Ω–∑—ë–Ω –∫–æ–ø—å—ë–º <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died), –Ω–µ –æ—Å–æ–∑–Ω–∞–≤–∞—è, —á—Ç–æ –¥–µ–ª–∞–µ—Ç, —É–±–∏–≤–∞–µ—Ç (Player2-Died). –ü–æ–∑–∂–µ, –Ω–µ –≤ —Å–∏–ª–∞—Ö –ø—Ä–æ—Å—Ç–∏—Ç—å —Å–µ–±—è –∑–∞ —ç—Ç–æ, (Player1-Died) —É–±–∏–≤–∞–µ—Ç –∏ —Å–µ–±—è",
                playerCount: 2,
                howManyDeaths: 2,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–± –æ—Ç —á—É–≤—Å—Ç–≤–∞ –≤–∏–Ω—ã`;

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª —É–±–∏—Ç –±–µ–∑—É–º—Å—Ç–≤—É—é—â–∏–º <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) –ø–æ–±–µ–∂–¥–∞–µ—Ç (Player2-Died) –≤ —á–µ—Å—Ç–Ω–æ–º –ø–æ–µ–¥–∏–Ω–∫–µ",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–ü–æ–≥–∏–± –≤ –¥–æ–±–ª–µ—Å—Ç–Ω–æ–º –ø–æ–µ–¥–∏–Ω–∫–µ —Å <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) —Å—Ö–æ–¥–∏—Ç —Å —É–º–∞, –∏ (Player2) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ —É–±–∏—Ç—å (Player1-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player2.kills++;
                    player2.hasKilled.push(player1.name);

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player2.name + `</font></strong> –≤–æ –≤—Å–µ–µ–æ–±—â–µ–µ –±–ª–∞–≥–æ`;
                }
            },
            {
                string: "(Player1-Died) –∏ (Player2-Died) –ø—ã—Ç–∞—é—Ç—Å—è —É—Ç–æ–ø–∏—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞, –Ω–æ –∏—Ö –æ–±–æ–∏—Ö —Å—å–µ–¥–∞–µ—Ç –ª–µ–≤–∏–∞—Ñ–∞–Ω",
                playerCount: 2,
                howManyDeaths: 2,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–¢–æ–ø–∏–ª—Å—è –≤–º–µ—Å—Ç–µ —Å <strong><font color="ffff00">` + player2.name + `</font></strong> –∏ –Ω–µ –∑–∞–º–µ—Ç–∏–ª –ª–µ–≤–∏–∞—Ñ–∞–Ω–∞`;

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–¢–æ–ø–∏–ª—Å—è –≤–º–µ—Å—Ç–µ —Å <strong><font color="ffff00">` + player1.name + `</font></strong> –∏ –Ω–µ –∑–∞–º–µ—Ç–∏–ª –ª–µ–≤–∏–∞—Ñ–∞–Ω–∞`;
                }
            },
            {
                string: "(Player1) —Å–∫–∏–¥—ã–≤–∞–µ—Ç (Player2-Died) —Å –æ–±—Ä—ã–≤–∞",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª —Å–∫–∏–Ω—É—Ç —Å –æ–±—Ä—ã–≤–∞ –∫–æ–≤–∞—Ä–Ω—ã–º–∏ —Ä—É–∫–∞–º–∏ <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –∏ (Player2-Died) —É–±–∏–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ ",
                playerCount: 2,
                howManyDeaths: 2,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª —É–±–∏—Ç –∏ —É–±–∏–ª <strong><font color="ffff00">` + player2.name + `</font></strong>`;

                    placements.push(player2);
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª —É–±–∏—Ç –∏ —É–±–∏–ª <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) –ø—Ä–∏–∑—ã–≤–∞–µ—Ç —Å—Ç–µ—Ä–≤—è—Ç–Ω–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é –ª–∏—á–∏–Ω–∫–∏, –Ω–∞–¥–µ—è—Å—å —É–±–∏—Ç—å (Player2-Died), –∏ –æ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–≥–∏–±–∞–µ—Ç",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª —Å—ä–µ–¥–µ–Ω —Å—Ç–µ—Ä–≤—è—Ç–Ω–∏–∫–æ–º, –ø—Ä–∏–∑–≤–∞–Ω–Ω—ã–º <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –ø—Ä–∏–∑—ã–≤–∞–µ—Ç —Å—Ç–µ—Ä–≤—è—Ç–Ω–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é –ª–∏—á–∏–Ω–∫–∏, –Ω–∞–¥–µ—è—Å—å —É–±–∏—Ç—å (Player2-Died), –Ω–æ –≤ –∏—Ç–æ–≥–µ –æ–Ω–∏ –æ–±–∞ –ø–æ–≥–∏–±–∞—é—Ç",
                playerCount: 2,
                howManyDeaths: 2,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª —Å—ä–µ–¥–µ–Ω —Å—Ç–µ—Ä–≤—è—Ç–Ω–∏–∫–æ–º, –ø—Ä–∏–∑–≤–∞–Ω–Ω—ã–º —Å–æ–±–æ–π –∂–µ`;

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª —Å—ä–µ–¥–µ–Ω —Å—Ç–µ—Ä–≤—è—Ç–Ω–∏–∫–æ–º, –ø—Ä–∏–∑–≤–∞–Ω–Ω—ã–º <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –ø—Ä–∏–∑—ã–≤–∞–µ—Ç —Å—Ç–µ—Ä–≤—è—Ç–Ω–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é –ª–∏—á–∏–Ω–∫–∏, –Ω–∞–¥–µ—è—Å—å —É–±–∏—Ç—å (Player2), –Ω–æ –ø–æ–≥–∏–±–∞–µ—Ç —Å–∞–º, –∞ (Player2) —É—Å–ø–µ—à–Ω–æ —Å–±–µ–≥–∞–µ—Ç",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª —Å—ä–µ–¥–µ–Ω —Å—Ç–µ—Ä–≤—è—Ç–Ω–∏–∫–æ–º, –ø—Ä–∏–∑–≤–∞–Ω–Ω—ã–º —Å–æ–±–æ–π –∂–µ`;
                }
            },
            {
                string: "(Player1-Died) –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ç–µ–Ω–∫–æ–º, (Player2) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ —É—Ç–æ–ø–∏—Ç—å –µ–≥–æ",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player2.kills++;
                    player2.hasKilled.push(player1.name);

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–± –æ—Ç –∂–µ—Å—Ç–æ–∫–æ—Å—Ç–∏ <strong><font color="ffff00">` + player2.name + `</font></strong>`;
                }
            },
            {
                string: "–£ (Player1) –∏ (Player2-Died) –Ω–µ—Ç –∂–µ–º—á—É–≥–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–∞—Å—Ç–∞–≤–µ –º—É—Å–æ—Ä—â–∏–∫–æ–≤. (Player1) –∫–∏–¥–∞–µ—Ç –∏–º (Player2-Died), —á—Ç–æ–±—ã —Ç–µ –æ—Ç–≤–ª–µ–∫–ª–∏—Å—å –Ω–∞ –µ–≥–æ —É–±–∏–π—Å—Ç–≤–æ, –∏ –ø—Ä–æ–±–µ–≥–∞–µ—Ç –º–∏–º–æ",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–°—Ç–∞–ª –ø–ª–∞—Ç–æ–π <strong><font color="ffff00">` + player1.name + `</font></strong> –Ω–∞ –∑–∞—Å—Ç–∞–≤–µ`;
                }
            },
            {
                string: "(Player1-Died) –≤–µ—Å—å —Ü–∏–∫–ª –ø—Ä–µ—Å–ª–µ–¥—É–µ—Ç (Player2), –Ω–æ (Player2) –≤ –∫–æ–Ω—Ü–µ –∫–æ–Ω—Ü–æ–≤ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Å–µ–±—è –∏ —É–±–∏–≤–∞–µ—Ç (Player1-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player2.kills++;
                    player2.hasKilled.push(player1.name);

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–†–∞–∑–æ–∑–ª–∏–ª <strong><font color="ffff00">` + player2.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –Ω–∞—Ç—ã–∫–∞–µ—Ç—Å—è –Ω–∞ –≥–æ–ª–æ–¥–Ω–æ–≥–æ (Player2) –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º–∞–ª–µ–Ω—å–∫—É—é —Å–∫–æ–ª–æ–ø–µ–Ω–¥—Ä—É, –ª–µ–∂–∞—â—É—é –Ω–µ–ø–æ–¥–∞–ª—ë–∫—É, –Ω–æ (Player2) –Ω–∞–∫–∏–¥—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∏ —Å—å–µ–¥–∞–µ—Ç (Player1-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player2.kills++;
                    player2.hasKilled.push(player1.name);

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–°—Ç–∞–ª –æ–±–µ–¥–æ–º <strong><font color="ffff00">` + player2.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) –∏ (Player2-Died) –¥—Ä—É–∂–∞—Ç—Å—è, –Ω–æ –ø–æ–¥ –∫–æ–Ω–µ—Ü —Ü–∏–∫–ª–∞ (Player1) –ø—Ä–µ–¥–∞–µ—Ç (Player2-Died), –≤—Å–∞–¥–∏–≤ –µ–º—É –≤ —Å–ø–∏–Ω—É –æ—Å—Ç—Ä–æ–∑–∞—Ç–æ—á–µ–Ω–Ω–æ–µ –∫–æ–ø—å–µ",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player2, `–û–∫–∞–∑–∞–ª—Å—è –ø—Ä–µ–¥–∞–Ω <strong><font color="ffff00">` + player1.name + `</font></strong>`, player1);
                }
            },
            {
                string: "(Player1) –≤—Ä—ë—Ç (Player2-Died) –æ –±–ª–∞–≥–∏—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏—è—Ö, –∏ –ø–æ–∫–∞ (Player2-Died) –ª—é–±—É–µ—Ç—Å—è –∑–∞–∫–∞—Ç–æ–º, (Player1) –ø—Ä–∏—Å—Ç–∞–≤–ª—è–µ—Ç –∫ –µ–≥–æ –∑–∞—Ç—ã–ª–∫—É –¥—É–ª–æ —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player2, `–ë—ã–ª —Ä–∞—Å—Å—Ç—Ä–µ–ª—è–Ω <strong><font color="ffff00">` + player1.name + `</font></strong>`, player1);
                }
            },
            {
                string: "–ü–æ—Å–ª–µ –¥–æ–ª–≥–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è (Player1) –¥–æ—Å—Ç–∞–µ—Ç –∏–∑-–∑–∞ –ø–∞–∑—É—Ö–∏ –¥—Ä–æ–±–æ–≤–∏–∫. (Player2-Died) —Å–ª—ë–∑–Ω–æ —É–º–æ–ª—è–µ—Ç –æ –ø–æ—â–∞–¥–µ, —Å—Ç–æ—è –ø–µ—Ä–µ–¥ (Player1) –Ω–∞ –∫–æ–ª–µ–Ω—è—Ö. –†–∞–∑–¥–∞–µ—Ç—Å—è —Å–º–∞—á–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª –ø—Ä—è–º–æ –≤ –≥–æ–ª–æ–≤—É (Player2-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player2, `–ë—ã–ª —Ä–∞—Å—Å—Ç—Ä–µ–ª—è–Ω <strong><font color="ffff00">` + player1.name + `</font></strong>`, player1);
                }
            },
            {
                string: "(Player1) —Å—É–µ—Ç —Ä—É–∫—É –≤ –∫–∏—à–∫–∏ (Player2-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player2, `<strong><font color="ffff00">` + player1.name + `</font></strong> –ø–æ–∫–æ–ø–æ—à–∏–ª—Å—è –≤ –µ–≥–æ –∫–∏—à–∫–∞—Ö`, player1);
                }
            },


            {
                string: "(Player1) –ø—Ä–æ–¥–∞—ë—Ç (Player2-Died) —Ñ–∞–ª—å—à–∏–≤—É—é –±–æ–º–±—É; –ø–æ–∑–∂–µ (Player2-Died) –ø–æ–≥–∏–±–∞–µ—Ç –≤ –¥—Ä–∞–∫–µ —Å (Player3), –∫–∏–Ω—É–≤ –≤ –Ω–µ–≥–æ –ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–∫—Ä–∞—à–µ–Ω–Ω—ã–π –∫–∞–º–µ–Ω—å",
                playerCount: 3,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player3.kills++;
                    player3.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–ü–æ–≥–∏–± –æ—Ç —Ä—É–∫ <strong><font color="ffff00">` + player3.name + `</font></strong> –∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1), (Player2) –∏ (Player3-Died) —Å–ø–æ—Ä—è—Ç, –∫—Ç–æ –¥–æ–ª—å—à–µ –º–æ–∂–µ—Ç –∑–∞–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥—ã—Ö–∞–Ω–∏–µ –ø–æ–¥ –≤–æ–¥–æ–π. –ü–æ–±–µ–∂–¥–∞–µ—Ç (Player3-Died), –Ω–µ –≤—Å–ø–ª—ã–≤—à–∏–π –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –ø–æ —Å–µ–π –¥–µ–Ω—å",
                playerCount: 3,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player3);
                    player3.alive = false;
                    player3.killedBy = `–ü–æ–±–µ–¥–∏–ª –≤ —Å–ø–æ—Ä–µ`;
                }
            },
            {
                string: "(Player1), (Player2-Died) –∏ (Player3) –¥–µ—Ä—É—Ç—Å—è —Å –¥—Ä—É–≥ –¥—Ä—É–≥–æ–º. (Player1) —Ä–∞–Ω–µ–Ω, (Player2-Died) –ø–æ–≥–∏–±–∞–µ—Ç, –∞ (Player3) —Å–±–µ–≥–∞–µ—Ç",
                playerCount: 3,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–ù–µ —Å–º–æ–≥ —Å–±–µ–∂–∞—Ç—å –æ—Ç <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –∏ (Player2-Died) —É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç –∑–∞—Å–∞–¥—É (Player3), –Ω–æ (Player3) —Ö–æ—Ä–æ—à–æ –≤–æ–æ—Ä—É–∂–µ–Ω –∏ —É–±–∏–≤–∞–µ—Ç –∏—Ö",
                playerCount: 3,
                howManyDeaths: 2,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    placements.push(player2);
                    player3.kills++;
                    player3.kills++;
                    player3.hasKilled.push(player1.name);
                    player3.hasKilled.push(player2.name);

                    player1.alive = false;
                    player1.killedBy = `–ù–µ —Å–º–æ–≥ –ø–µ—Ä–µ—Å–∏–ª–∏—Ç—å <strong><font color="ffff00">` + player3.name + `</font></strong>`;
                    player2.alive = false;
                    player2.killedBy = `–ù–µ —Å–º–æ–≥ –ø–µ—Ä–µ—Å–∏–ª–∏—Ç—å <strong><font color="ffff00">` + player3.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) –ø—ã—Ç–∞–µ—Ç—Å—è —É—Å—Ç—Ä–æ–∏—Ç—å –∑–∞—Å–∞–¥—É –Ω–∞ (Player2), —Å–∫–∏–Ω—É–≤ –Ω–∞ –Ω–µ–≥–æ –Ω–∞–∫–æ–≤–∞–ª—å–Ω—é, –Ω–æ –æ–±–æ–∑–Ω–∞—ë—Ç—Å—è –∏ —É–±–∏–≤–∞–µ—Ç (Player3-Died)",
                playerCount: 3,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player3);
                    player1.kills++;
                    player1.hasKilled.push(player3.name);
                    player3.alive = false;
                    player3.killedBy = `–û–∫–∞–∑–∞–ª—Å—è –ø–µ—Ä–µ–ø—É—Ç–∞–Ω —Å <strong><font color="ffff00">` + player2.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –∏ (Player2-Died) –¥–æ–ª–≥–æ –¥–µ—Ä—É—Ç—Å—è –±–µ–∑ –æ—Ä—É–∂–∏—è, –Ω–æ –ø–æ–¥ –∫–æ–Ω–µ—Ü –¥—Ä–∞–∫–∏ –ø—Ä–∏–±–µ–≥–∞–µ—Ç (Player3) –∏ —É–±–∏–≤–∞–µ—Ç –∏—Ö –æ–±–æ–∏—Ö",
                playerCount: 3,
                howManyDeaths: 2,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    placements.push(player2);
                    player3.kills++;
                    player3.kills++;
                    player3.hasKilled.push(player1.name);
                    player3.hasKilled.push(player2.name);

                    player1.alive = false;
                    player1.killedBy = `–û–∫–∞–∑–∞–ª—Å—è –∫–æ–≤–∞—Ä–Ω–æ –¥–æ–±–∏—Ç <strong><font color="ffff00">` + player3.name + `</font></strong>`;
                    player2.alive = false;
                    player2.killedBy = `–û–∫–∞–∑–∞–ª—Å—è –∫–æ–≤–∞—Ä–Ω–æ –¥–æ–±–∏—Ç <strong><font color="ffff00">` + player3.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) —Å—á–∏—Ç–∞–µ—Ç —Å–≤–æ–∏–º –¥–æ–ª–≥–æ–º –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Å—Ç—Ä–∞–¥–∞–Ω–∏—è –∏–∑-–∑–∞ —Ü–∏–∫–ª–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤ –ü—É—Å—Ç–æ—Ç—É (Player2-Died) –∏ (Player3-Died)",
                playerCount: 3,
                howManyDeaths: 2,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    placements.push(player3);
                    player1.kills++;
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player1.hasKilled.push(player3.name);

                    player2.alive = false;
                    player2.killedBy = `–°—É–º–µ–ª –æ—Ç—Ä–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–¥–∞–Ω–∏—è —Ü–∏–∫–ª–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                    player3.alive = false;
                    player3.killedBy = `–°—É–º–µ–ª –æ—Ç—Ä–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–¥–∞–Ω–∏—è —Ü–∏–∫–ª–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died), (Player2-Died) –∏ (Player3-Died) –≤–∑—Ä—ã–≤–∞—é—Ç—Å—è –≤ –¥—Ä–∞–∫–µ —Å –±–æ–º–±–æ–π",
                playerCount: 3,
                howManyDeaths: 3,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    placements.push(player2);
                    placements.push(player3);

                    player1.kills++;
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player1.hasKilled.push(player3.name);

                    player2.kills++;
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player2.hasKilled.push(player3.name);

                    player3.kills++;
                    player3.kills++;
                    player3.hasKilled.push(player1.name);
                    player3.hasKilled.push(player2.name);

                    player1.alive = false;
                    player1.killedBy = `–í–∑–æ—Ä–≤–∞–ª—Å—è –≤ –¥—Ä–∞–∫–µ —Å <strong><font color="ffff00">` + player2.name + `</font></strong> –∏ <strong><font color="ffff00">` + player3.name + `</font></strong>`;
                    player2.alive = false;
                    player2.killedBy = `–í–∑–æ—Ä–≤–∞–ª—Å—è –≤ –¥—Ä–∞–∫–µ —Å <strong><font color="ffff00">` + player1.name + `</font></strong> –∏ <strong><font color="ffff00">` + player3.name + `</font></strong>`;
                    player3.alive = false;
                    player3.killedBy = `–í–∑–æ—Ä–≤–∞–ª—Å—è –≤ –¥—Ä–∞–∫–µ —Å <strong><font color="ffff00">` + player1.name + `</font></strong> –∏ <strong><font color="ffff00">` + player2.name + `</font></strong>`;

                }
            },
            {
                string: "(Player1-Died) –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –±–µ–∑ –≤–µ—Å—Ç–∏ –∏ –≤—Å–∫–æ—Ä–µ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç—Å—è –º–µ—Ä—Ç–≤—ã–º. –í —É–±–∏–π—Å—Ç–≤–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞—é—Ç (Player2), –Ω–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –µ–≥–æ —É–±–∏–ª (Player3)",
                playerCount: 3,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player3.kills++;
                    player3.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª —Ç–∞–π–Ω–æ —É–±–∏—Ç <strong><font color="ffff00">` + player3.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) –ø—ã—Ç–∞–µ—Ç—Å—è —É–±–∏—Ç—å (Player2), –Ω–æ (Player3-Died) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –∑–∞—â–∏—Ç–∏—Ç—å (Player2), –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–≤ —Å–æ–±–æ–π",
                playerCount: 3,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player3);
                    player1.kills++;
                    player1.hasKilled.push(player3.name);
                    player3.alive = false;
                    player3.killedBy = `–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª —Å–æ–±–æ–π —Ä–∞–¥–∏ <strong><font color="ffff00">` + player2.name + `</font></strong> (–±—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player1.name + `</font></strong>)`;
                }
            },
            {
                string: "(Player1-Died) —É–º–∏—Ä–∞–µ—Ç –æ—Ç –¥–µ–ø—Ä–µ—Å—Å–∏–∏, —É–∑–Ω–∞–≤, —á—Ç–æ (Player2) —É–±–∏–ª (Player3-Died)",
                playerCount: 3,
                howManyDeaths: 2,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player3);
                    placements.push(player1);
                    player2.kills++;
                    player2.hasKilled.push(player3.name);

                    player3.alive = false;
                    player3.killedBy = `–ë—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player2.name + `</font></strong>`
                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–± –æ—Ç –¥–µ–ø—Ä–µ—Å—Å–∏–∏`;
                }
            },
            {
                string: "(Player1-Died) –ø—Ä–∏–∑–Ω–∞—ë—Ç—Å—è –ø—Å–∏—Ö–∏—á–µ—Å–∫–∏ –±–æ–ª—å–Ω—ã–º. (Player2) –∏ (Player3) –ø—Ä–∏–Ω–∏–º–∞—é—Ç —Ä–µ—à–µ–Ω–∏–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç—å –µ–≥–æ –¥–æ –ø—É—Å—Ç–æ—Ç—ã –∏ —É—Ç–æ–ø–∏—Ç—å —Ä–∞–¥–∏ –µ–≥–æ –∂–µ –±–ª–∞–≥–∞",
                playerCount: 3,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player3.kills++;
                    player3.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–í –ø—Å–∏—Ö—É—à–∫–µ`;
                }
            },
            {
                string: "(Player1-Died) –∏ (Player2-Died) —Å–ª—É—á–∞–π–Ω–æ –Ω–∞—Ç—ã–∫–∞—é—Ç—Å—è –Ω–∞ (Player3) –∏ –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —É–±–∏—Ç—ã –∏–º",
                playerCount: 3,
                howManyDeaths: 2,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    placements.push(player2);
                    player3.kills++;
                    player3.kills++;
                    player3.hasKilled.push(player1.name);
                    player3.hasKilled.push(player2.name);

                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player3.name + `</font></strong>`;
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player3.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç (Player2-Died) –∏ (Player3-Died) –ø—Ä–æ –∫—Ä–∞—Å–∏–≤–æ–µ –º–µ—Å—Ç–æ –∏ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Ö –≤—Å—Ç–∞—Ç—å –Ω–∞ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—É—é –Ω–∞ –∑–µ–º–ª–µ –º–µ—Ç–∫—É. (Player2-Died) –∏ (Player3-Died) –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å–º–æ—Ç—Ä–µ—Ç—å —Å–Ω—ã –∏–∑-–∑–∞ —É–ø–∞–≤—à–µ–π –∏–º –Ω–∞ –≥–æ–ª–æ–≤—É –Ω–∞–∫–æ–≤–∞–ª—å–Ω–∏",
                playerCount: 3,
                howManyDeaths: 2,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player2, `–ü–æ–≥–∏–± –æ—Ç —á—É–¥–µ—Å–Ω—ã—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π –∏ –Ω–∞–∫–æ–≤–∞–ª—å–Ω–∏ <strong><font color="ffff00">` + player1.name + `</font></strong>`, player1)
                    theFunnyKillFunction(player3, `–ü–æ–≥–∏–± –æ—Ç —á—É–¥–µ—Å–Ω—ã—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π –∏ –Ω–∞–∫–æ–≤–∞–ª—å–Ω–∏ <strong><font color="ffff00">` + player1.name + `</font></strong>`, player1)
                }
            },
            {
                string: "(Player1) –∏ (Player2) —Ö–≤–∞—Ç–∞—é—Ç (Player3-Died) –∏ —Ä–∞—Å–ø–∏–ª–∏–≤–∞—é—Ç –µ–≥–æ –±–æ–ª–≥–∞—Ä–∫–æ–π",
                playerCount: 3,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player3, `–†–∞—Å–ø–∏–ª–∏–ª–∏ –±–æ–ª–≥–∞—Ä–∫–æ–π <strong><font color="ffff00">` + player1.name + `</font></strong> –∏ <strong><font color="ffff00">` + player2.name + `</font></strong>`, player1, player2);
                }
            },
            {
                string: "(Player1-Died) –∏ (Player2) –ø–æ–ø–∞–¥–∞—é—Ç—Å—è –≤ –ª–æ–≤—É—à–∫—É (Player3), –Ω–æ —Å–±–µ–≥–∞—é—Ç. –ü–æ–∑–∂–µ (Player1-Died) —É–º–∏—Ä–∞–µ—Ç –æ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ä–∞–Ω, –∏ –ø–ª–∞—á—É—â–∏–π –Ω–∞–¥ –Ω–∏–º (Player2) –∫–ª—è–Ω—ë—Ç—Å—è –æ—Ç–æ–º—Å—Ç–∏—Ç—å",
                playerCount: 3,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player1, `–ü–æ–ø–∞–ª—Å—è –≤ –ª–æ–≤—É—à–∫—É <strong><font color="ffff00">` + player3.name + `</font></strong>`, player3);
                }
            },
            {
                string: "(Player1) —Å–º–µ—Ä—Ç–µ–ª—å–Ω–æ –æ—Ç—Ä–∞–≤–ª—è–µ—Ç (Player2-Died) –∏ —Å–∫–∞—Ä–º–ª–∏–≤–∞–µ—Ç –µ–≥–æ —Ç—Ä—É–ø (Player3-Died), –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–∂–µ —É–º–∏—Ä–∞–µ—Ç",
                playerCount: 3,
                howManyDeaths: 2,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player2, `–ë—ã–ª —Å–º–µ—Ä—Ç–µ–ª—å–Ω–æ –æ—Ç—Ä–∞–≤–ª–µ–Ω <strong><font color="ffff00">` + player1.name + `</font></strong>`, player1);
                    theFunnyKillFunction(player3, `–°—ä–µ–ª —Å–º–µ—Ä—Ç–µ–ª—å–Ω–æ –æ—Ç—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ <strong><font color="ffff00">` + player2.name + `</font></strong>`, player1);
                }
            },
            {
                string: "(Player1) —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–µ –ø–æ–µ–¥–∞–Ω–∏–µ –ª–∞–ø—à–µ–º—É—Ö. (Player2-Died) –∏ (Player3-Died) –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç—Å—è –ø–æ –ø—Ä–∏—á–∏–Ω–µ —Å–º–µ—Ä—Ç–∏ –æ—Ç –∂–∞–ª",
                playerCount: 3,
                howManyDeaths: 2,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player2, `–ö4 –º–æ–º–µ–Ω—Ç`);
                    theFunnyKillFunction(player3, `–ö4 –º–æ–º–µ–Ω—Ç`);
                }
            },


            {
                string: "(Player1-Died) –Ω–∞ –Ω–µ—Ä–≤–∞—Ö –∫—Ä–∏—á–∏—Ç –Ω–∞ (Player2), (Player2) –ø–ª–∞—á–µ—Ç –∏ –∂–∞–ª—É–µ—Ç—Å—è (Player3), (Player3) –∑–æ–≤—ë—Ç —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞–Ω–∞ (Player4) –∏ (Player4) –≤—Å–∞–∂–∏–≤–∞–µ—Ç –∫—É–ª–∞–∫ –≤ –º–æ—Ä–¥—É (Player1-Died)",
                playerCount: 4,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3, player4) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player4.kills++;
                    player4.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–ü–æ —Ü–µ–ø–æ—á–∫–µ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Ç–∫–Ω—É–ª—Å—è –Ω–∞ –∫—É–ª–∞–∫ <strong><font color="ffff00">` + player4.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –ø–æ–≥–∏–±–∞–µ—Ç, —É–ø–∞–≤ —Å –æ–≥—Ä–æ–º–Ω–æ–π –≤—ã—Å–æ—Ç—ã, (Player2) —Å–∫–æ—Ä–±–∏—Ç –ø–æ –Ω–µ–º—É, (Player3) —Ä–∞–¥—É–µ—Ç—Å—è –µ–≥–æ —Å–º–µ—Ä—Ç–∏, –∞ (Player4) —Å–∫–∞—Ä–º–ª–∏–≤–∞–µ—Ç –µ–≥–æ —Ç—Ä—É–ø —è—â–µ—Ä–∞–º",
                playerCount: 4,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3, player4) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–û—Ç–∫—Ä—ã–ª –∑–∞–∫–æ–Ω –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏`;
                }
            },
            {
                string: "(Player1) –∫–∏–¥–∞–µ—Ç –±–æ–º–±—É –≤ (Player2-Died), (Player3-Died) –∏ (Player4-Died), –≤—Å–ª–µ–¥—Å—Ç–≤–∏–µ —á–µ–≥–æ –≤—Å–µ —Ç—Ä–æ–µ —É–º–∏—Ä–∞—é—Ç",
                playerCount: 4,
                howManyDeaths: 3,
                updateData: function (player1, player2, player3, player4) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player1.kills++;
                    player1.hasKilled.push(player3.name);
                    player1.kills++;
                    player1.hasKilled.push(player4.name);

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `<strong><font color="ffff00">` + player1.name + `</font></strong> –±–æ–º–±–∞–Ω—É–ª`;

                    placements.push(player3);
                    player3.alive = false;
                    player3.killedBy = `<strong><font color="ffff00">` + player1.name + `</font></strong> –±–æ–º–±–∞–Ω—É–ª`;

                    placements.push(player4);
                    player4.alive = false;
                    player4.killedBy = `<strong><font color="ffff00">` + player1.name + `</font></strong> –±–æ–º–±–∞–Ω—É–ª`;
                }
            },
            {
                string: "(Player1) —É–±–∏–≤–∞–µ—Ç –∫–æ—Ç—è—Ç (Player2), –æ—Ç—á–µ–≥–æ (Player2) —Å—Ö–æ–¥–∏—Ç —Å —É–º–∞ –∏ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–µ–∑–Ω—é, –∂–µ—Ä—Ç–≤–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–π —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è (Player3-Died) –∏ (Player4-Died)",
                playerCount: 4,
                howManyDeaths: 2,
                updateData: function (player1, player2, player3, player4) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player1.hasKilled.push(`–ö–æ—Ç—è—Ç–∞ ` + player2.name)

                    player2.kills++;
                    player2.kills++;
                    player2.hasKilled.push(player3.name);
                    player2.hasKilled.push(player4.name);

                    placements.push(player3);
                    player3.alive = false;
                    player3.killedBy = `–ü–æ–≥–∏–± –≤ –º–∞—Å—Å–æ–≤–æ–π —Ä–µ–∑–Ω–µ <strong><font color="ffff00">` + player2.name + `</font></strong>`;
                    placements.push(player4);
                    player4.alive = false;
                    player4.killedBy = `–ü–æ–≥–∏–± –≤ –º–∞—Å—Å–æ–≤–æ–π —Ä–µ–∑–Ω–µ <strong><font color="ffff00">` + player2.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç (Player2), (Player3), (Player4) —É—Å–ª—É–≥–∏ –ø–æ –¥–æ–±—ã—á–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∂–µ–º—á—É–≥–∞; —Ç—É—Ç –∂–µ –µ–º—É –≤ –≥–æ–ª–æ–≤—É –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç –∫–æ–∫—Ç–µ–π–ª—å –º–æ–ª–æ—Ç–æ–≤–∞",
                playerCount: 4,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3, player4) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player2.kills++;
                    player3.kills++;
                    player4.kills++;
                    player2.hasKilled.push(player1.name);
                    player3.hasKilled.push(player1.name);
                    player4.hasKilled.push(player1.name);

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ù–µ —Å–º–æ–≥ —Ä–∞—Å–∫—Ä—É—Ç–∏—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å`;
                }
            }
        ],
        revival: [
            {
                string: "–¶–∏–∫–ª –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (Player1-Rev) –æ–±—Ä–∞—Ç–Ω–æ, –∏ –æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –Ω–∞–¥—Ä–∞—Ç—å —Å–≤–æ–∏–º –ø—Ä–æ—à–ª—ã–º –æ–±–∏–¥—á–∏–∫–∞–º –∑–∞–¥",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "–¶–∏–∫–ª –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (Player1-Rev) –æ–±—Ä–∞—Ç–Ω–æ, –Ω–æ –æ–Ω –Ω–µ –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –≤–æ—Å—Å—Ç–∞—ë—Ç –∏–∑ –º—ë—Ä—Ç–≤—ã—Ö",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –≤—ã–∫–∞—Ä–∞–±–∫–∏–≤–∞–µ—Ç—Å—è –∏–∑ –ü—É—Å—Ç–æ—Ç—ã",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) —ç–ø–∏—á–Ω–æ –≤–æ–∑—Ä–æ–∂–¥–∞–µ—Ç—Å—è",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) —Ä–µ—Å–ø–∞–≤–Ω–∏—Ç—Å—è –≤ –∫–∞–∫–æ–π-—Ç–æ –≥–ª—É—à–∏",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –æ—Ç–º–µ–Ω—è–µ—Ç —Å–≤–æ—é —Å–º–µ—Ä—Ç—å",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) —à–ª—ë—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∫—É–¥–∞ –ø–æ–¥–∞–ª—å—à–µ –∏ –≤—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å—Ü–µ–Ω—É",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "–ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ –æ —Ç–æ–º, —á—Ç–æ (Player1-Rev) –≤–µ—Ä–Ω—ë—Ç—Å—è –≤–æ–ø—Ä–µ–∫–∏ —Å—É–¥—å–±–µ, —Å–±—ã–≤–∞–µ—Ç—Å—è",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –∂–∏–∑–Ω–∏ –∫–∞–∫–æ–π-—Ç–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –Ω–∞—Ö–æ–¥–∏—Ç –≤—ã—Ö–æ–¥ –∏–∑ –∑–∞–∫—É–ª–∏—Å—å—è",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –æ—Ç–≥–æ–ª–æ—Å–∏—Ç—Å—è –Ω–∞—Å—Ç–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ, —á—Ç–æ –≤–Ω–æ–≤—å –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },

            {
                string: "(Player1-Rev) –æ–∂–∏–≤–∞–µ—Ç –ø—Ä—è–º–æ –≤ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ (Player2) —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –µ–≥–æ –µ—Å—Ç—å. (Player2) –ø—Ä–æ–≥–æ–Ω—è—é—Ç –≥–æ–ª–æ–¥–Ω—ã–º",
                playerCount: 2,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "–û–∂–∏–≤—à–∏–π (Player1-Rev) –≤–µ—Å—å —Ü–∏–∫–ª –±–µ–≥–∞–µ—Ç –∑–∞ (Player2), –ø—ã—Ç–∞—è—Å—å —Å–ø—Ä–æ—Å–∏—Ç—å, –∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –≥–æ–¥",
                playerCount: 2,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –≤–∏–¥–µ –û—Ç–≥–æ–ª–æ—Å–∫–∞ –∫ (Player2) –∏ —É–±–µ–∂–¥–∞–µ—Ç –æ–∂–∏–≤–∏—Ç—å –µ–≥–æ",
                playerCount: 2,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–æ–Ω—Å–æ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç (Player1-Rev) –¥–ª—è (Player2); (Player2) –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ—Ä—è–Ω, –Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞—Ä",
                playerCount: 2,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) —Å–ø–∞–≤–Ω—è—Ç –æ–±—Ä–∞—Ç–Ω–æ —Å –ø–æ–º–æ—â—å—é –±–∏—Å—Ç–º–∞—Å—Ç–µ—Ä–∞; —á–∏—Ç–µ—Ä (Player2-Died) –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è –∏–∑ –¥–æ—Å—Ç–æ–ø–æ—á—Ç–µ–Ω–Ω—ã—Ö –†–í–ì–ò",
                playerCount: 2,
                howManyDeaths: 1,
                howManyRevivals: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω`;

                    placements.push(player2);
                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –∫—Ä–∞–¥—ë—Ç —Ç–µ–ª–æ (Player2-Died) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∏–≥—Ä—É",
                playerCount: 2,
                howManyDeaths: 1,
                howManyRevivals: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;
                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    player2.alive = false;
                    player2.killedBy = `–î–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ-–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–¥–∞–ª —Ç–µ–ª–æ <strong><font color="ffff00">` + player1.name + `</font></strong>`;

                    placements.push(player2);
                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –≤–æ—Å—Å—Ç–∞—ë—Ç –∏–∑ –º—ë—Ä—Ç–≤—ã—Ö –ø—Ä—è–º–æ –Ω–∞ –≥–ª–∞–∑–∞—Ö —É (Player2) –∏ (Player3) –∏ –Ω–µ–ø–ª–æ—Ö–æ —Ç—Ä–∞–≤–º–∏—Ä—É–µ—Ç –∏—Ö –∑—Ä–µ–ª–∏—â–µ–º",
                playerCount: 3,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            }
        ]*/
    }
}

/*var eventRain = {
    regular: function () {
        var eventObject = decideEventObject(eventRain[`array`][`regular`]);

        var playerCount = eventObject.playerCount;

        var players = decidePlayers(playerCount);
        currentUnusedCharacterNumber -= playerCount;

        var eventString = parseAllNamesAndPronouns(eventObject.string, players)
        console.log(eventString, players);

        if (playerCount === 1) var eventImage = makeImages(players[0].image)
        else if (playerCount === 2) var eventImage = makeImages(players[0].image, players[1].image)
        else if (playerCount === 3) var eventImage = makeImages(players[0].image, players[1].image, players[2].image)
        else if (playerCount === 4) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image)
        else if (playerCount === 5) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image)
        else if (playerCount === 6) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image, players[5].image);

        var event = eventImage + eventString + `<br><br>`;

        return event;
    },
    lethal: function () {
        do var eventObject = decideEventObject(eventRain[`array`][`lethal`])
        while (eventObject.howManyDeaths >= currentCharacterNumber);

        var playerCount = eventObject.playerCount;

        var players = decidePlayers(playerCount);
        currentUnusedCharacterNumber -= playerCount;

        var eventString = parseAllNamesAndPronouns(eventObject.string, players)
        console.log(eventString, players);

        if (playerCount === 1) var eventImage = makeImages(players[0].image)
        else if (playerCount === 2) var eventImage = makeImages(players[0].image, players[1].image)
        else if (playerCount === 3) var eventImage = makeImages(players[0].image, players[1].image, players[2].image)
        else if (playerCount === 4) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image)
        else if (playerCount === 5) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image)
        else if (playerCount === 6) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image, players[5].image);

        var event = eventImage + eventString + `<br><br>`;

        eventObject.updateData.apply(eventObject, players);

        return event;
    },
    revival: function () {
        var eventObject = decideEventObject(eventRain[`array`][`revival`]);

        var playerCount = eventObject.playerCount;

        var revivedPlayers = decideRevivedPlayers(eventObject.howManyRevivals);
        if (revivedPlayers == "stop") return "stop";
        var justPlayers = decidePlayers(playerCount - eventObject.howManyRevivals);

        var players = revivedPlayers.concat(justPlayers);

        currentUnusedCharacterNumber -= playerCount - eventObject.howManyRevivals;

        var eventString = parseAllNamesAndPronouns(eventObject.string, players)
        console.log(eventString, players);

        if (playerCount === 1) var eventImage = makeImages(players[0].image)
        else if (playerCount === 2) var eventImage = makeImages(players[0].image, players[1].image)
        else if (playerCount === 3) var eventImage = makeImages(players[0].image, players[1].image, players[2].image)
        else if (playerCount === 4) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image)
        else if (playerCount === 5) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image)
        else if (playerCount === 6) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image, players[5].image);

        var event = eventImage + eventString + `<br><br>`;

        eventObject.updateData.apply(eventObject, players);

        return event;
    },
    array: {
        regular: [
            {
                string: "(Player1) —Ä–µ—à–∞–µ—Ç —É—Ç–æ–ø–∏—Ç—å—Å—è –≤ –ü—É—Å—Ç–æ—Ç–µ, –Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è –≤ —Å–≤–æ—ë–º —É–±–µ–∂–∏—â–µ",
                playerCount: 1
            },
            {
                string: "(Player1) –≤–∏–¥–∏—Ç –ø–ª–æ—Ö–∏–µ —Å–Ω—ã –∏, –ø—Ä–æ—Å–Ω—É–≤—à–∏—Å—å, –ø–ª–∞—á–µ—Ç –≤—Å—é –æ—Å—Ç–∞–≤—à—É—é—Å—è –Ω–æ—á—å",
                playerCount: 1
            },
            {
                string: "(Player1) –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ –µ—Å—Ç—å –≥—Ä–∏–±—ã –¥–Ω–µ–º –±—ã–ª–æ –ø–ª–æ—Ö–∏–º —Ä–µ—à–µ–Ω–∏–µ–º, –Ω–æ –Ω–µ —É–º–∏—Ä–∞–µ—Ç",
                playerCount: 1
            },
            {
                string: "(Player1) —Ä–∏—Å—É–µ—Ç –Ω–∞ —Å—Ç–µ–Ω–∞—Ö —É–±–µ–∂–∏—â–∞",
                playerCount: 1
            },
            {
                string: "(Player1) –≤–∑–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–º—É—é –≤—ã—Å–æ–∫—É—é —Ç–æ—á–∫—É –º–∏—Ä–∞, –≥–¥–µ –Ω–µ –∏–¥–µ—Ç –¥–æ–∂–¥—å",
                playerCount: 1
            },
            {
                string: "–£–±–µ–∂–∏—â–µ (Player1) –ª–æ–º–∞–µ—Ç—Å—è, –∏–∑-–∑–∞ —á–µ–≥–æ (Player1) –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è —Å–ø–∞—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏ —É–ª–∏—Ç–æ–∫",
                playerCount: 1
            },
            {
                string: "(Player1) —Ä–µ—à–∞–µ—Ç, –∫–æ–º—É —Å—Ç–∞—Ç—å –µ–≥–æ –∂–µ—Ä—Ç–≤–æ–π –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ",
                playerCount: 1
            },
            {
                string: "(Player1) —Å–ø–∏—Ç, –∑–∞—Å—É–Ω—É–≤ –∑–∞–¥–Ω—é—é –ª–∞–ø—É –≤ —Ä–æ—Ç",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç –≤ —Å–≤–æ—ë–º —É–±–µ–∂–∏—â–µ —Å–ª–∏–∑–Ω–µ–∫–æ—Ç—ë–Ω–∫–∞ –∏ –¥—Ä—É–∂–∏—Ç—Å—è —Å –Ω–∏–º",
                playerCount: 1
            },
            {
                string: "(Player1) —Å–Ω–∏—Ç—Å—è –ø–æ–±–µ–¥–∞",
                playerCount: 1
            },
            {
                string: "(Player1) –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ–º —É–±–µ–∂–∏—â–µ —Å –≥—Ä—É–ø–ø–æ–π –º—É—Å–æ—Ä—â–∏–∫–æ–≤",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞–¥–µ–µ—Ç—Å—è –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –ø–æ–ø–∞—Å—Ç—å –≤ –ø–∞–Ω—Ç–µ–æ–Ω –†–í–†–ü",
                playerCount: 1
            },
            {
                string: "(Player1) –º–µ—á—Ç–∞–µ—Ç –æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏",
                playerCount: 1
            },
            {
                string: "(Player1) —Å—ä–µ–¥–∞–µ—Ç –≤—Å–µ —Å–≤–æ–∏ –ø—Ä–∏–ø–∞—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª —Ä–∞—Å—Ç—è–Ω—É—Ç—å –µ—â—ë –Ω–∞ —Ç—Ä–∏ —Ü–∏–∫–ª–∞",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–∞–¥–µ–µ—Ç—Å—è –Ω–µ —É–º–µ—Ä–µ—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ –ø–æ-—Ç—É–ø–æ–º—É",
                playerCount: 1
            },
            {
                string: "(Player1) –≥–æ–≤–æ—Ä–∏—Ç —Å–∞–º —Å —Å–æ–±–æ–π, –ø–æ–∫–∞ –Ω–µ –∑–∞—Å—ã–ø–∞–µ—Ç",
                playerCount: 1
            },
            {
                string: "(Player1) –∑–∞–≤–æ—Ä–æ–∂–µ–Ω–Ω–æ –º–µ—á—Ç–∞–µ—Ç, –∫–∞–∫ –±—É–¥–µ—Ç –æ—Ö–æ—Ç–∏—Ç—å—Å—è –∑–∞ –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª",
                playerCount: 1
            },
            {
                string: "(Player1) –∏–∑—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
                playerCount: 1
            },
            {
                string: "(Player1) –ø—Ä–æ–≤–æ–¥–∏—Ç –≤–µ—Å—å –¥–æ–∂–¥—å –≤ —Å–≤–µ—Ä—Ö—Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–∞–∫–æ–≥–æ-—Ç–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞",
                playerCount: 1
            },
            {
                string: "(Player1) –ø—Ä–æ–≤–æ–¥–∏—Ç –¥–æ–∂–¥—å –Ω–∞ –∫—Ä—ã—à–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –ª—é–±—É–µ—Ç—Å—è –∑–≤—ë–∑–¥–Ω—ã–º –Ω–µ–±–æ–º",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–µ —Å–ø–∏—Ç –∏ —á–∏—Ç–∞–µ—Ç —Ñ–∞–Ω—Ñ–∏–∫–∏ –≤–µ—Å—å –¥–æ–∂–¥—å",
                playerCount: 1
            },
            {
                string: "(Player1) –∑–∞–¥—É–º—ã–≤–∞–µ—Ç—Å—è –æ –í–µ–ª–∏–∫–æ–π –ü—Ä–æ–±–ª–µ–º–µ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
                playerCount: 1
            },
            {
                string: "(Player1) –≤—Å–ø–æ–º–∏–Ω–∞–µ—Ç –î—Ä–µ–≤–Ω–∏—Ö —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏",
                playerCount: 1
            },
            {
                string: "(Player1) –≤—ã—Ü–∞—Ä–∞–ø—ã–≤–∞–µ—Ç –∫–æ–ø—å—ë–º –Ω–∞ —Å—Ç–µ–Ω–µ —É–±–µ–∂–∏—â–∞: ¬´–ó–¥–µ—Å—å –±—ã–ª (Player1)¬ª",
                playerCount: 1
            },
            {
                string: "(Player1) —à–ª—ë—Ç —É–≥—Ä–æ–∑—ã —Å–º–µ—Ä—Ç–∏ —Å–≤–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é",
                playerCount: 1
            },
            {
                string: "(Player1) —Ä–∞–∑–≥–ª—è–¥—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–µ –Ω–∞–¥–ø–∏—Å–∏ –Ω–∞ —Å—Ç–µ–Ω–µ —Å–≤–æ–µ–≥–æ —É–±–µ–∂–∏—â–∞",
                playerCount: 1
            },
            {
                string: "(Player1) –º–æ–ª–∏—Ç—Å—è",
                playerCount: 1
            },
            {
                string: "(Player1) —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è –æ–¥–∏–Ω–æ–∫–æ –≤ —Å–≤–æ—ë–º –ø—É—Å—Ç–æ–º —É–±–µ–∂–∏—â–µ. –ö—Ç–æ-–Ω–∏–±—É–¥—å, –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–µ —Å –Ω–∏–º",
                playerCount: 1
            },
            {
                string: "(Player1) –∂–∞–ª–µ–µ—Ç –æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç—É–ø–∫–∞—Ö",
                playerCount: 1
            },
            {
                string: "(Player1) —Å—Ç—Ä–æ–∏—Ç –∏–∑ –ø–æ–¥—Ä—É—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ —Å–≤–æ—ë–º —É–±–µ–∂–∏—â–µ –º–∞–ª–µ–Ω—å–∫–∏–π –∞–ª—Ç–∞—Ä—å, –ø–æ—Å–≤—è—â—ë–Ω–Ω—ã–π –ò—Å–∫–∞—Ç–µ–ª—å–Ω–∏—Ü–µ",
                playerCount: 1
            },
            {
                string: "(Player1) –≤–µ—Å—å –¥–æ–∂–¥—å –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —è–∑—ã–∫ –î—Ä–µ–≤–Ω–∏—Ö",
                playerCount: 1
            },
            {
                string: "(Player1) –ø–æ–¥—Å–ª—É—à–∏–≤–∞–µ—Ç –Ω–æ—á–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–≤",
                playerCount: 1
            },
            {
                string: "(Player1) –ø—Ä–æ–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è –≤ —Ä–µ–≥–∏–æ–Ω–µ, –≥–¥–µ –Ω–µ –∏–¥—ë—Ç –¥–æ–∂–¥—å, –∏ –æ—Ö–æ—Ç–∏—Ç—Å—è –≤—Å—é –Ω–æ—á—å",
                playerCount: 1
            },
            {
                string: "(Player1) —Å–Ω—è—Ç—Å—è –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã",
                playerCount: 1
            },
            {
                string: "(Player1) –ø—Ä–æ—Å–∏—Ç —É –±–æ–≥–æ–≤ —Ä–∞–Ω–¥–æ–º–∞ —Ö–æ—Ä–æ—à–µ–π —É–¥–∞—á–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª",
                playerCount: 1
            },
            {
                string: "(Player1) –Ω–µ –Ω–∞–µ–¥–∞–µ—Ç—Å—è –∑–∞ —Ü–∏–∫–ª –∏ –∑–∞—Å—ã–ø–∞–µ—Ç –≥–æ–ª–æ–¥–Ω—ã–º",
                playerCount: 1
            },
            {
                string: "(Player1) —Ç–∞–Ω—Ü—É–µ—Ç –≤ —É–±–µ–∂–∏—â–µ",
                playerCount: 1
            },
            {
                string: "(Player1) –ø—Ä—ã–≥–∞–µ—Ç –ø–æ —Å—Ç–µ–Ω–∞–º —É–±–µ–∂–∏—â–∞ –∫–∞–∫ –æ–¥–µ—Ä–∂–∏–º—ã–π",
                playerCount: 1
            },
            {
                string: "(Player1) –∑–∞—Å—ã–ø–∞–µ—Ç –≤ —Ä–æ—Å–∫–æ—à–∏ –æ–≥—Ä–æ–º–Ω–æ–≥–æ —É–±–µ–∂–∏—â–∞ –≤–Ω–µ—à–Ω–∏—Ö –¥–∞–ª–µ–π",
                playerCount: 1
            },
            {
                string: "–ì–æ–ª–æ–¥–∞—é—â–∏–π (Player1) —É–±–∏–≤–∞–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –≤ —É–±–µ–∂–∏—â–µ –∏ –µ—Å—Ç –µ–≥–æ, –∑–∞—Ö–ª—ë–±—ã–≤–∞—è—Å—å —Å–ª–µ–∑–∞–º–∏",
                playerCount: 1
            },
            {
                string: "(Player1) —Å–æ—á–∏–Ω—è–µ—Ç –∫–∞–∫—É—é-—Ç–æ –º–µ–ª–æ–¥–∏—é, –Ω–∞–ø–µ–≤–∞—è –µ—ë —Å–µ–±–µ –ø–æ–¥ –Ω–æ—Å –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
                playerCount: 1
            },
            {
                string: "(Player1) –ø—Ä–æ—Å–∏—Ç —É —Å–≤–æ–µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–æ—â–∞–¥—ã",
                playerCount: 1
            },

            {
                string: "(Player1) –ø–æ—á—Ç–∏ —É–º–∏—Ä–∞–µ—Ç –æ—Ç —Ö–æ–ª–æ–¥–∞ –∏ –¥–æ–∂–¥—è, –Ω–æ (Player2) —Å–ø–∞—Å–∞–µ—Ç (Player1)",
                playerCount: 2
            },
            {
                string: "(Player1) –∑–∞—â–∏—â–∞–µ—Ç (Player2) –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å –µ–≥–æ",
                playerCount: 2
            },
            {
                string: "(Player1) —Ç–∏—Ö–æ –ø–ª–∞—á–µ—Ç –≤ —É–±–µ–∂–∏—â–µ, –∏ (Player2) –≤—Å—é –Ω–æ—á—å —É—Å–ø–æ–∫–∞–∏–≤–∞–µ—Ç –µ–≥–æ",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2), –æ–∫–∞–∑–∞–≤—à–∏—Å—å –≤ –æ–¥–Ω–æ–º —É–±–µ–∂–∏—â–µ, –¥–µ–ª—è—Ç—Å—è –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º —Å–≤–æ–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∏ –∑–∞—Å—ã–ø–∞—é—Ç –ø–æ–¥ —à—É–º –¥–æ–∂–¥—è, –ø—Ä–∏–∂–∞–≤—à–∏—Å—å –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –æ–¥–Ω–æ–º —É–±–µ–∂–∏—â–µ, –Ω–æ (Player2) –±–æ–∏—Ç—Å—è (Player1) –∏ –∑–∞—Å—ã–ø–∞–µ—Ç –≤ —Å–∞–º–æ–º –¥–∞–ª—å–Ω–µ–º —É–≥–ª—É —É–±–µ–∂–∏—â–∞",
                playerCount: 2
            },
            {
                string: "(Player1) –ø—Ä–∏—é—Ç–∏–ª (Player2) —É —Å–µ–±—è",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –ø–æ–¥—Ä–∞–ª–∏—Å—å –∑–∞ —É–±–µ–∂–∏—â–µ, –Ω–æ –≤ –∏—Ç–æ–≥–µ —Ä–µ—à–∏–ª–∏ —Å–ø–∞—Ç—å –≤–º–µ—Å—Ç–µ",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –≤–º–µ—Å—Ç–µ —Ä–∏—Å—É—é—Ç –Ω–∞ —Å—Ç–µ–Ω–∞—Ö —É–±–µ–∂–∏—â–∞",
                playerCount: 2
            },
            {
                string: "(Player1) –≤–µ—Å—å –¥–æ–∂–¥—å –º–∞–Ω–∏–∞–∫–∞–ª—å–Ω–æ –æ–±—ä—è—Å–Ω—è–µ—Ç (Player2), –ø–æ—á–µ–º—É —Å–ª–∏–∑–Ω–µ–∫–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç —Å—Ç—Ä–∞–¥–∞—Ç—å",
                playerCount: 2
            },
            {
                string: "(Player1) —Å–Ω–∏—Ç—Å—è, –∫–∞–∫ –æ–Ω —Å–ø–∏—Ç —Å (Player2)",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –∑–∞–≤–æ–¥—è—Ç –∫–æ—Ç—è—Ç",
                playerCount: 2
            },
            {
                string: "(Player1) –≤—Ä—ã–≤–∞–µ—Ç—Å—è –≤ —É–±–µ–∂–∏—â–µ (Player2) —Å –º—ë—Ä—Ç–≤—ã–º –¥–æ–ª–≥–æ–Ω–æ–≥–æ–º –≤ —Ä—É–∫–∞—Ö. –í –º–Ω–æ–≥–æ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º –º–æ–ª—á–∞–Ω–∏–∏ –æ–Ω–∏ –ø–µ—Ä–µ–∂–∏–¥–∞—é—Ç –¥–æ–∂–¥—å –≤–º–µ—Å—Ç–µ",
                playerCount: 2
            },
            {
                string: "(Player1) –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç (Player2) –ø–æ–≥—Ä—ã–∑—Ç—å –µ–≥–æ –≤–∫—É—Å–Ω—É—é –ª–∞–ø—É. (Player2) —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è",
                playerCount: 2
            },
            {
                string: "(Player1) —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —É–∂–∏–Ω –ø—Ä–∏ —Å–≤–µ—á–∞—Ö –¥–ª—è (Player2), –Ω–æ (Player2) —Ç–∞–∫ –∏ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) —Å–ø–æ—Ä—è—Ç –æ —Ç–æ–º, –∫–æ–º—É —Ö—É–∂–µ –∂–∏–≤—ë—Ç—Å—è",
                playerCount: 2
            },
            {
                string: "(Player1) –Ω–µ —Å–ø–∏—Ç –∏ –Ω–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ (Player2) –≤–µ—Å—å –¥–æ–∂–¥—å",
                playerCount: 2
            },
            {
                string: "(Player1) –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —É–±–∏–π—Å—Ç–≤–æ (Player2)",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) —Å—Å–æ—Ä—è—Ç—Å—è, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø—Ä–æ–≤–æ–¥—è—Ç –≤–µ—Å—å –¥–æ–∂–¥—å –ø–æ —Ä–∞–∑–Ω—ã–º —É–≥–ª–∞–º",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) —Å—Ç—Ä–æ—è—Ç –∫–æ–∑–Ω–∏",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –¥–µ–ª—è—Ç—Å—è —Å–ª—É—Ö–∞–º–∏",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) —Å–ø—è—Ç –≤–º–µ—Å—Ç–µ. (Player2) –¥–æ–ª–≥–æ –¥—É–º–∞–µ—Ç –æ —Ç–æ–º, —á—Ç–æ–±—ã —É–±–∏—Ç—å (Player1) –ø–æ—Å—Ä–µ–¥–∏ —Å–Ω–∞, –Ω–æ –≤ –∏—Ç–æ–≥–µ —Ä–µ—à–∞–µ—Ç —ç—Ç–æ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) —Å–ª—É—á–∞–π–Ω–æ –Ω–æ—á—É—é—Ç –≤ –æ–¥–Ω–æ–º –∏ —Ç–æ–º –∂–µ —É–±–µ–∂–∏—â–µ, –∏ (Player1) –ø—É–≥–∞—é—â–µ —Ä–∞–¥ —ç—Ç–æ–º—É",
                playerCount: 2
            },
            {
                string: "(Player1) –≤–ø—É—Å–∫–∞–µ—Ç (Player2) –≤ —Å–≤–æ—ë —É–±–µ–∂–∏—â–µ –≤–∑–∞–º–µ–Ω –Ω–∞ –≤—Å–µ –µ–≥–æ —Ü–µ–Ω–Ω–æ—Å—Ç–∏",
                playerCount: 2
            },
            {
                string: "(Player1) –Ω–∞–ø–∞–¥–∞–µ—Ç –Ω–∞ (Player2) –≤ —É–±–µ–∂–∏—â–µ, –Ω–æ –µ–≥–æ –∫–æ–ø—å—ë –≤—Ç—ã–∫–∞–µ—Ç—Å—è –≤ —Å—Ç–µ–Ω—É. –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–∂–¥—è –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤ –Ω–µ–ª–æ–≤–∫–æ–π —Ç–∏—à–∏–Ω–µ",
                playerCount: 2
            },
            {
                string: "(Player1) –æ–±–Ω–∏–º–∞–µ—Ç (Player2) –≤–æ —Å–Ω–µ. (Player2) –Ω–∏—á–µ–≥–æ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç",
                playerCount: 2
            },
            {
                string: "(Player1) –æ–±–Ω–∏–º–∞–µ—Ç (Player2) –≤–æ —Å–Ω–µ. (Player2) –µ–≥–æ –æ—Ç–ø–∏—Ö–∏–≤–∞–µ—Ç –∏ (Player1) –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è –≤ —Å–º—É—â–µ–Ω–∏–∏",
                playerCount: 2
            },
            {
                string: "(Player1) —Å–ª—É—á–∞–π–Ω–æ —Ä–∞–∑–±–∞–ª—Ç—ã–≤–∞–µ—Ç —á–µ–π-—Ç–æ —Å–µ–∫—Ä–µ—Ç (Player2) –∏ —É–≥—Ä–æ–∂–∞–µ—Ç (Player2) –∂–µ—Å—Ç–æ–∫–æ–π —Ä–∞—Å–ø—Ä–∞–≤–æ–π. (Player2) –≤ —Å—Ç—Ä–∞—Ö–µ –æ–±–µ—â–∞–µ—Ç –¥–µ—Ä–∂–∞—Ç—å —Ä–æ—Ç –Ω–∞ –∑–∞–º–∫–µ",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –≤–º–µ—Å—Ç–µ –ø—Ä–æ–≤–æ–¥—è—Ç –Ω–æ—á—å, –±–µ–≥–∞—è –ø–æ –∫—Ä—ã—à–µ –∫–∞–∫–æ–≥–æ-—Ç–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞",
                playerCount: 2
            },
            {
                string: "(Player1) —É–≥—Ä—é–º–æ –º–æ–ª—á–∏—Ç –Ω–∞ –ª—é–±—ã–µ –ø–æ–ø—ã—Ç–∫–∏ (Player2) –∑–∞–≤–µ—Å—Ç–∏ –±–µ—Å–µ–¥—É. (Player2) –æ–±–∏–∂–∞–µ—Ç—Å—è –∏ —Ä–µ—à–∞–µ—Ç –≤ –±—É–¥—É—â–µ–º —É–±–∏—Ç—å(Player1) –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
                playerCount: 2
            },
            {
                string: "(Player1) —É–∂–µ –¥—É–º–∞–µ—Ç, —á—Ç–æ –ª–∏—Ü–µ–∑—Ä–µ–ª —Å–º–µ—Ä—Ç—å (Player2), –∫–æ–≥–¥–∞ –º–µ—Ö–∞–Ω–∏–∑–º —É–±–µ–∂–∏—â–∞ –∑–∞—Ö–ª–æ–ø—ã–≤–∞–µ—Ç—Å—è –ø—Ä—è–º–æ –Ω–∞ –Ω—ë–º, –Ω–æ –Ω–∞ —É—Ç—Ä–æ (Player2) –∂–∏–≤ –∏ –∑–¥–æ—Ä–æ–≤",
                playerCount: 2
            },
            {
                string: "(Player1) –æ–±–Ω–∏–º–∞–µ—Ç (Player2) –≤–æ —Å–Ω–µ. (Player2) —Ä–µ—à–∞–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –≤–µ—â–∏ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å",
                playerCount: 2
            },
            {
                string: "(Player1) –≤—ã—Ü–∞—Ä–∞–ø—ã–≤–∞–µ—Ç –∫–æ–ø—å—ë–º –Ω–∞ —Å—Ç–µ–Ω–µ —É–±–µ–∂–∏—â–∞: ¬´(Player2) - –ª–æ—Ö¬ª",
                playerCount: 2
            },
            {
                string: "(Player1) –≤—ã—Ü–∞—Ä–∞–ø—ã–≤–∞–µ—Ç –∫–æ–ø—å—ë–º –Ω–∞ —Å—Ç–µ–Ω–µ —É–±–µ–∂–∏—â–∞: ¬´(Player2), –∂–µ–Ω–∏—Å—å –Ω–∞ –º–Ω–µ¬ª",
                playerCount: 2
            },
            {
                string: "–û–∫–∞–∑–∞–≤—à–∏–µ—Å—è –≤ –æ–¥–Ω–æ–º —É–±–µ–∂–∏—â–µ (Player1) –∏ (Player2) –∑–ª–æ–±–Ω–æ –¥–µ–ª—è—Ç –µ–≥–æ –Ω–∞ –¥–≤–µ –ø–æ–ª–æ–≤–∏–Ω—ã —Å –ø–æ–º–æ—â—å—é –ø–æ–¥—Ä—É—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –¥–µ–ª—è—Ç—Å—è –∏–¥–µ—è–º–∏ –æ–±—Ö–æ–¥–∞ —Ç–∞–±—É",
                playerCount: 2
            },
            {
                string: "(Player1) —Å–Ω—è—Ç—Å—è –∫–æ—à–º–∞—Ä—ã –æ (Player2)",
                playerCount: 2
            },
            {
                string: "(Player1) –º—É—Ä—á–∏—Ç –¥–ª—è (Player2)",
                playerCount: 2
            },
            {
                string: "(Player1) —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –ø—Ä–∏—Ç–≤–æ—Ä—è—Ç—å—Å—è —Å–ø—è—â–∏–º, —á—Ç–æ–±—ã –∑–∞—Å—Ç–∞—Ç—å –≤—Ä–∞—Å–ø–ª–æ—Ö –∏ —É–±–∏—Ç—å (Player2), –Ω–æ –∑–∞—Å—ã–ø–∞–µ—Ç –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É",
                playerCount: 2
            },
            {
                string: "(Player1) —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç (Player2), –Ω–µ —Ä–∞–∑–ª—é–±–∏–ª –±—ã –ª–∏ –æ–Ω –µ–≥–æ, –±—É–¥—å (Player1) –∫—Ä—é–∫-—á–µ—Ä–≤—ë–º. (Player2) –æ—Ç–≤–µ—á–∞–µ—Ç (Player1) —á—Ç–æ–±—ã –æ–Ω –∑–∞—Ç–∫–Ω—É–ª—Å—è –∏ —Å–ø–∞–ª",
                playerCount: 2
            },
            {
                string: "(Player1) –≤–µ—Å—å –¥–æ–∂–¥—å –¥–∏—Å–∫—É—Ç–∏—Ä—É–µ—Ç —Å (Player2) –æ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∏—Ö –º–∏—Ä–∞ –∏ —Å–ª—É—á–∞–π–Ω–æ –æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –∫—É–ª—å—Ç",
                playerCount: 2
            },
            {
                string: "(Player1) —Å–ª—É—á–∞–π–Ω–æ —Ä–∞–∑–±–∞–ª—Ç—ã–≤–∞–µ—Ç —á–µ–π-—Ç–æ —Å–µ–∫—Ä–µ—Ç (Player2), –∏ (Player2) —à–∞–Ω—Ç–∞–∂–∏—Ä—É–µ—Ç —ç—Ç–∏–º (Player1), –∑–∞—Å—Ç–∞–≤–ª—è—è —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Å–µ–±—è",
                playerCount: 2
            },
            {
                string: "(Player1) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –≥—Ä–∞–Ω–∏ –Ω–µ—Ä–≤–Ω–æ–≥–æ —Å—Ä—ã–≤–∞ –∏ –ø–æ—á—Ç–∏ —É–±–∏–≤–∞–µ—Ç (Player2) –≤ —É–±–µ–∂–∏—â–µ, –æ–¥–Ω–∞–∫–æ (Player2) —É–¥–∞—ë—Ç—Å—è –µ–≥–æ —É—Å–ø–æ–∫–æ–∏—Ç—å",
                playerCount: 2
            },
            {
                string: "(Player1) –Ω–∞—Å—Ç–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ –≥–æ—Ä–∏—Ç –∂–µ–ª–∞–Ω–∏–µ–º –ø–æ–±–µ–¥–∏—Ç—å, —á—Ç–æ –∑–∞—Å—Ç—Ä—è–≤—à–∏–π —Å –Ω–∏–º –≤ –æ–¥–Ω–æ–º —É–±–µ–∂–∏—â–µ (Player2) –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞ –Ω–µ–≥–æ –±–æ–ª–µ—Ç—å",
                playerCount: 2
            },
            {
                string: "(Player1) —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç (Player2) —Å–∫–∞–∑–∫–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
                playerCount: 2
            },
            {
                string: "(Player1) –∏–∑–¥–∞—ë—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∑–≤—É–∫–∏ –≤–æ —Å–Ω–µ –∏ (Player2) –Ω–µ –º–æ–∂–µ—Ç –∑–∞—Å–Ω—É—Ç—å –∏–∑-–∑–∞ –Ω–∏—Ö",
                playerCount: 2
            },
            {
                string: "(Player1) –¥–µ–ª–∏—Ç—Å—è —Å–ª—É—Ö–∞–º–∏ —Å (Player2), –∏ (Player2) –¥–µ–ª–∞–µ—Ç —É–¥–∏–≤–ª—ë–Ω–Ω–æ–µ –ª–∏—Ü–æ, –ø—Ä–∏ —ç—Ç–æ–º –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –∑–Ω–∞—è, —á—Ç–æ —ç—Ç–∏ —Å–ª—É—Ö–∏ –æ–Ω –∏ –Ω–∞—á–∞–ª —Ä–∞—Å–ø—É—Å–∫–∞—Ç—å",
                playerCount: 2
            },
            {
                string: "(Player1) —Å–ø–∞–∏–≤–∞–µ—Ç (Player2) –≤–∏–Ω–æ–º",
                playerCount: 2
            },
            {
                string: "(Player1) –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –æ—á–µ–Ω—å —Ç—ë–º–Ω–æ–º —É–±–µ–∂–∏—â–µ –∏ –Ω–µ –∑–∞–º–µ—á–∞–µ—Ç –ø—Ä—è—á—É—â–µ–≥–æ—Å—è —Ç–∞–º (Player2)",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –æ–¥–Ω–æ–º —É–±–µ–∂–∏—â–µ. –°–Ω–∞—á–∞–ª–∞ (Player1) –±–æ–∏—Ç—Å—è, –Ω–æ –ø–æ–∑–∂–µ —Ä–∞—Å—Å–ª–∞–±–ª—è–µ—Ç—Å—è –æ—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏ (Player2)",
                playerCount: 2
            },
            {
                string: "–ú–Ω–µ–Ω–∏–µ (Player1) –æ (Player2) –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –º–µ–Ω—è–µ—Ç—Å—è –≤ —Ö—É–¥—à—É—é —Å—Ç–æ—Ä–æ–Ω—É, –∫–æ–≥–¥–∞ –æ–Ω–∏ –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –æ–¥–Ω–æ–º –∏ —Ç–æ–º –∂–µ —É–±–µ–∂–∏—â–µ",
                playerCount: 2
            },
            {
                string: "(Player1) –ø—Ä–µ–¥–ª–æ–∂–∏–ª (Player2) –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ —Å–æ–∑–¥–∞–µ—Ç—Å—è –¥–æ–º–∞—à–Ω–∏–π –∂–µ–º—á—É–≥",
                playerCount: 2
            },
            {
                string: "(Player1) –ø–æ—è—Å–Ω—è–µ—Ç (Player2), —á—Ç–æ –±–æ–≥–∏–Ω—è –®–∫–≤–∞–ª –∏ –±–æ–≥–∏–Ω—è –ò—Å–∫–∞—Ç–µ–ª—å–Ω–∏—Ü–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–æ–µ–≤–∞–ª–∏ –∏ –≤—Å–µ–≥–¥–∞ –±—ã–ª–∏ –≤ —Å–æ—é–∑–µ. (Player2) —è—Ä–æ—Å—Ç–Ω–æ –æ—Ç—Ä–∏—Ü–∞–µ—Ç –¥–∞–Ω–Ω—É—é —Ç–µ–æ—Ä–∏—é",
                playerCount: 2
            },
            {
                string: "(Player1) –∏ (Player2) –≤—Å—é –Ω–æ—á—å —Å–ø–æ—Ä—è—Ç –æ —Ç–æ–º, —á–µ–º –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∏–Ω–∏–π —Ñ—Ä—É–∫—Ç",
                playerCount: 2
            },
            {
                string: "(Player1) –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è –ø–æ—Å—Ä–µ–¥–∏ –¥–æ–∂–¥—è –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç (Player2), –≥–æ—Ç–æ–≤–∞ –ª–∏ –∞–Ω–∫–µ—Ç–∞ –Ω–∞ –©–µ–ø–∫—É",
                playerCount: 2
            },
            {
                string: "(Player1) —Ä–µ—à–∞–µ—Ç —É–±–∏—Ç—å (Player2) –≤–æ –≤—Ä–µ–º—è –¥–æ–∂–¥—è, –Ω–æ —Ç–æ—Ç –Ω–µ–≤–µ—Ä–Ω–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –°–∏—Ç—É–∞—Ü–∏—è —Å–∫–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—É—é –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å—Ü–µ–Ω—É",
                playerCount: 2
            },
            {
                string: "(Player1) –∑–∞—Å—Ç—Ä—è–ª –≤ (Player2)",
                playerCount: 2
            },


            {
                string: "(Player1) –≤–∑–º–∞–ª–∏–≤–∞–µ—Ç—Å—è –≤–æ —Å–ª–∞–≤—É –ê–ª–µ–∫—Å–µ—è, –æ–≥–ª—É—à–∞—è —Ä—è–¥–æ–º —Å–∏–¥—è—â–∏—Ö (Player2) –∏ (Player3)",
                playerCount: 3
            },
            {
                string: "(Player1) –Ω–µ –≤–∏–¥–∏—Ç —Å–º—ã—Å–ª–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –±–æ—Ä–æ—Ç—å—Å—è –≤ –ì–ò, –Ω–æ (Player2) –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ —Ç–æ–º —Ä–∞–∑–µ, –∫–∞–∫ (Player3) –Ω–∞—Å–æ–ª–∏–ª –µ–º—É, –∏ (Player1) –∑–∞–≥–æ—Ä–∞–µ—Ç—Å—è –∏–¥–µ–µ–π –º–µ—Å—Ç–∏",
                playerCount: 3
            },
            {
                string: "(Player1), (Player2) –∏ (Player3) —Å–ø–æ—Ä—è—Ç, —á—å—è –∂–∏–∑–Ω—å —Ö—É–∂–µ. –í –∏—Ç–æ–≥–µ –≤—Å–µ —Å–æ–≥–ª–∞—à–∞—é—Ç—Å—è, —á—Ç–æ –Ω–µ—Å—á–∞—Å—Ç–Ω–µ–µ –≤—Å–µ–≥–æ (Player3) –∏ —É—Å–ø–æ–∫–∞–∏–≤–∞—é—Ç (Player3)",
                playerCount: 3
            },
            {
                string: "(Player1), (Player2) –∏ (Player3) —Å–ø—è—Ç –≤ –∫—É—á–µ",
                playerCount: 3
            },
            {
                string: "(Player1) –∏ (Player2) –Ω–µ –¥–æ–≤–µ—Ä—è—é—Ç (Player3) –≤ –∏—Ö —É–±–µ–∂–∏—â–µ –∏ —Å–ø—è—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏, —á—Ç–æ–±—ã –æ–Ω –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã—Ç–≤–æ—Ä–∏–ª",
                playerCount: 3
            },
            {
                string: "(Player1) –ø—Ä–∏—Ç–≤–æ—Ä—è–µ—Ç—Å—è, —á—Ç–æ —Å–ø–∏—Ç, –∏ –ø–æ–¥—Å–ª—É—à–∏–≤–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä (Player2) –∏ (Player3)",
                playerCount: 3
            },
            {
                string: "(Player1) –ø—ã—Ç–∞–µ—Ç—Å—è —É–±–µ–¥–∏—Ç—å –≤—Å–µ—Ö, —á—Ç–æ –í–µ–ª–∏–∫–∞—è –ó–∞–¥–∞—á–∞ - —á–µ–ø—É—Ö–∞, (Player2) –æ—Å—É–∂–¥–∞–µ—Ç –µ–≥–æ –∑–∞ –Ω–µ—É–≤–∞–∂–µ–Ω–∏–µ –∫ –î—Ä–µ–≤–Ω–∏–º, (Player3) –≤–æ–æ–±—â–µ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç, –æ —á–µ–º —Ä–µ—á—å",
                playerCount: 3
            },
            {
                string: "–û–∫–∞–∑–∞–≤—à–∏–µ—Å—è –≤ –æ–¥–Ω–æ–º —É–±–µ–∂–∏—â–µ (Player1), (Player2) –∏ (Player3) –≤–µ—Å—å –¥–æ–∂–¥—å –∏–≥—Ä–∞—é—Ç –≤ –∫–∞—Ä—Ç—ã",
                playerCount: 3
            },
            {
                string: "(Player1), (Player2) –∏ (Player3) –≤–µ—Å—å –¥–æ–∂–¥—å —Å–ø–æ—Ä—è—Ç –æ —Ç–æ–º, –ø–æ—á–µ–º—É –©–µ–ø–∫–∞ —É–º–µ—Ä–ª–∞ –æ—Ç –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è –∏ –Ω–∞—à–ª–∞ –ª–∏ –æ–Ω–∞ –µ–≥–æ –≤–æ–æ–±—â–µ",
                playerCount: 3
            },
            {
                string: "(Player1) –Ω–∞–ø–∞–¥–∞–µ—Ç –Ω–∞ (Player2) –≤ —É–±–µ–∂–∏—â–µ, –Ω–æ (Player2) –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç —É–±–µ–∂–¥–∞–µ—Ç (Player1) –Ω–µ —É–±–∏–≤–∞—Ç—å –µ–≥–æ –≤–∑–∞–º–µ–Ω –Ω–∞ —Ü–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ (Player3)",
                playerCount: 3
            },
            {
                string: "(Player1) –Ω–∞—Å—Ç–∏–≥–∞–µ—Ç –ø—Ä–∏—Å—Ç—É–ø —Å—Ç—ã–¥–∞, –∏ –æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–∑–≤–∏–Ω—è—Ç—å—Å—è –ø–µ—Ä–µ–¥ (Player2) –∏ (Player3) –∑–∞ –≤—Å—ë",
                playerCount: 3
            },
            {
                string: "(Player1) –∏ (Player2) —Å–µ–∫—Ä–µ—Ç–Ω–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –Ω–æ—á—å—é –Ω–∞ –∫—Ä—ã—à–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞. (Player3) —Å–ª—É—á–∞–π–Ω–æ –≤–∏–¥–∏—Ç –∏—Ö –∏ —Ä–µ—à–∞–µ—Ç –Ω–∞—á–∞—Ç—å —Ä–∞—Å–ø—É—Å–∫–∞—Ç—å —Å–ª—É—Ö–∏ –ø—Ä–æ –Ω–∏—Ö",
                playerCount: 3
            },
            {
                string: "(Player1) —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç (Player2) –∏ (Player3) —Å—Ç—Ä–∞—à–∏–ª–∫–∏ –ø—Ä–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ç–∞–±—É",
                playerCount: 3
            },
            {
                string: "(Player1) —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç (Player2) —Å–≤–æ–π –ø–ª–∞–Ω —É–±–∏–π—Å—Ç–≤–∞ (Player3). (Player2), –∫–∞–∫ –ª—É—á—à–∏–π –¥—Ä—É–≥ (Player3), –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–µ—Ç",
                playerCount: 3
            },
            {
                string: "(Player1) —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç—Å—è –æ—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ (Player2) –∏ (Player3), –ø–æ—Å–ª–µ —á–µ–≥–æ –¥–æ–ª–≥–æ —Å–∏–¥–∏—Ç –∏ –Ω–∞—Ç–∞—á–∏–≤–∞–µ—Ç –∫–æ–ø—å—ë",
                playerCount: 3
            },
            {
                string: "(Player1) —Å–ª—É—á–∞–π–Ω–æ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–∞ –Ω–æ–≥—É (Player2) –∏ –æ–±–≤–∏–Ω—è–µ—Ç –≤ —ç—Ç–æ–º (Player3). –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—Å–æ—Ä–∞",
                playerCount: 3
            },
            {
                string: "(Player1), (Player2) –∏ (Player3) —Ö–æ—Ç—è—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–µ–∞–Ω—Å –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç–µ—Ä–∞–ø–∏–∏, –Ω–æ —Ç–∞–∫ –∏ –Ω–µ –º–æ–≥—É—Ç —Ä–µ—à–∏—Ç—å, –∫—Ç–æ —Ç–µ—Ä–∞–ø–µ–≤—Ç",
                playerCount: 3
            },
            {
                string: "(Player1) –∑–∞–º–µ—á–∞–µ—Ç, —á—Ç–æ (Player2) —É–º–µ–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å, –∏ –≤–µ—Å—å –¥–æ–∂–¥—å –º–æ–ª–∏—Ç –µ–≥–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å (Player3) –≤ –∫–æ—Å—Ç—é–º–µ –≥–æ—Ä–Ω–∏—á–Ω–æ–π",
                playerCount: 3
            },
            {
                string: "(Player1) –≤–µ—Å—å –¥–æ–∂–¥—å –∂–∞–ª—É–µ—Ç—Å—è (Player2) –∏ (Player3) –Ω–∞ –Ω–æ–≤–∏—á–∫–æ–≤, –¥–∞–∂–µ –Ω–µ –∑–Ω–∞—é—â–∏—Ö –æ –ì–ò –∏–ª–∏ –ø–∞–Ω—Ç–µ–æ–Ω–µ –∏–ª–∏ –ò—Å–∫–∞—Ç–µ–ª—å–Ω–∏—Ü–µ –∏–ª–∏-",
                playerCount: 3
            },


            {
                string: "(Player1), (Player2), (Player3) –∏ (Player4) —É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç –ø–∏–∂–∞–º–Ω—É—é –≤–µ—á–µ—Ä–∏–Ω–∫—É –≤ —É–±–µ–∂–∏—â–µ",
                playerCount: 4
            },
            {
                string: "(Player1), (Player2), (Player3) –∏ (Player4) –æ–±—Å—É–∂–¥–∞—é—Ç –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é –≤–æ–π–Ω—É –±–æ–≥–∏–Ω–∏ –®–∫–≤–∞–ª –∏ –±–æ–≥–∞ –°—Ç–µ–ø–∞–Ω–∞, –≤ –∏—Ç–æ–≥–µ –≤—Å—ë –ø–µ—Ä–µ—Ä–∞—Å—Ç–∞–µ—Ç –≤ –¥—Ä–∞–∫—É",
                playerCount: 4
            },
            {
                string: "(Player1) –¥–æ–Ω–æ—Å–∏—Ç –¥–æ (Player2) —Å–ª—É—Ö–∏ –æ —Ç–æ–º, —á—Ç–æ (Player3) –∏ (Player4) –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è",
                playerCount: 4
            },
            {
                string: "(Player1) –¥–æ–Ω–æ—Å–∏—Ç –¥–æ (Player2) —Å–ª—É—Ö–∏ –æ —Ç–æ–º, —á—Ç–æ (Player3) –Ω–µ–¥–∞–≤–Ω–æ —á—É—Ç—å –Ω–µ —É–±–∏–ª (Player4)",
                playerCount: 4
            },
            {
                string: "(Player1) —Ö–æ—á–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç—å —É–±–µ–∂–∏—â–µ –Ω–∞ —á–∞—Å—Ç–∏, –Ω–æ (Player2), (Player3) –∏ (Player4) –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç –µ–≥–æ —Å–ø–∞—Ç—å –≤ –∫—É—á–µ –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º–∏",
                playerCount: 4
            },
            {
                string: "(Player1) –æ—Ç—á–∞—è–Ω–Ω–æ –ø—ã—Ç–∞–µ—Ç—Å—è —É–±–∏—Ç—å (Player2); (Player3) –∏ (Player4) –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–∏–ª–µ–ø–∏—Ç—å –µ–≥–æ –∫ —Å—Ç–µ–Ω–∫–µ —É–±–µ–∂–∏—â–∞",
                playerCount: 4
            },
            {
                string: "(Player1), (Player2), (Player3) –∏ (Player4) —Ä–µ—à–∞—é—Ç —Å—ã–≥—Ä–∞—Ç—å –≤ –º–æ–Ω–æ–ø–æ–ª–∏—é, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞",
                playerCount: 4
            },


            {
                string: "(Player1), (Player2), (Player3), (Player4), (Player5) –∏ (Player6) –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –∫—Ä–æ—Ö–æ—Ç–Ω–æ–º —É–±–µ–∂–∏—â–µ",
                playerCount: 6
            }
        ],
        lethal: [
            {
                string: "(Player1-Died) –ª–æ–∂–∏—Ç—Å—è —Å–ø–∞—Ç—å –≥–æ–ª–æ–¥–Ω—ã–º —É–∂–µ –≤—Ç–æ—Ä–æ–π —Ü–∏–∫–ª –∏ —É–º–∏—Ä–∞–µ—Ç –æ—Ç –≥–æ–ª–æ–¥–∞",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ü—Ä–æ–≥–æ–ª–æ–¥–∞–ª—Å—è`;
                }
            },
            {
                string: "(Player1-Died) –Ω–µ –∑–∞–º–µ—á–∞–µ—Ç —Å–∫–æ–ª–æ–ø–µ–Ω–¥—Ä—É –≤ —É–≥–ª—É —É–±–µ–∂–∏—â–∞ –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å–º–µ—Ä—Ç–µ–ª—å–Ω—É—é –¥–æ–∑—É —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–û–±–Ω—è–ª—Å—è —Å –∫—Ä–∞—Å–Ω–æ–π —Å–∫–æ–ª–æ–ø–µ–Ω–¥—Ä–æ–π`;
                }
            },
            {
                string: "(Player1-Died) —É–º–∏—Ä–∞–µ—Ç, –æ–±–Ω–∞—Ä—É–∂–∏–≤, —á—Ç–æ –µ–≥–æ —É–±–µ–∂–∏—â–µ –Ω–µ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –¥–æ–∂–¥—è",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ù–µ –≤—ã–¥–µ—Ä–∂–∞–ª –≤–Ω–µ–∑–∞–ø–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é`;
                }
            },
            {
                string: "(Player1-Died) –≤–∏—Å–∏—Ç –Ω–∞ —Ä–æ–≥–∞—Ö –æ–ª–µ–Ω—è –∏ —É–º–∏—Ä–∞–µ—Ç –æ—Ç –¥–æ–∂–¥—è",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ü–æ–∑–Ω–∞–ª –º–µ—Ö–∞–Ω–∏–∫—É –æ–ª–µ–Ω–µ–π`;
                }
            },
            {
                string: "(Player1-Died) —Ä–∏—Å—É–µ—Ç –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—É –Ω–∞ –ø–æ–ª—É —É–±–µ–∂–∏—â–∞ —Å–æ —Å–∫—É–∫–∏, –Ω–æ –∏–∑ –Ω–µ—ë –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ó–æ–ª–æ—Ç–æ–π –°—Ç–∞–ª–∫–µ—Ä –∏ –ø–æ–≥–ª–æ—â–∞–µ—Ç (Player1-Died)",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ó–∞–Ω–∏–º–∞–ª—Å—è —Ö–∞–ª–∞—Ç–Ω—ã–º –æ–∫–∫—É–ª—å—Ç–∏–∑–º–æ–º`;
                }
            },
            {
                string: "(Player1-Died) –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ–º —É–±–µ–∂–∏—â–µ —Å –≥—Ä—É–ø–ø–æ–π –º—É—Å–æ—Ä—â–∏–∫–æ–≤. –ò—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –∏ –∫–æ–≥–¥–∞ –æ–Ω–∏ —Ä–µ—à–∞—é—Ç –Ω–∞–ø–∞—Å—Ç—å, (Player1-Died) –Ω–µ –º–æ–∂–µ—Ç –∑–∞—â–∏—Ç–∏—Ç—å—Å—è",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ü–µ—Ä–µ—Å–ø–∞–ª —Å –º—É—Å–æ—Ä—â–∏–∫–∞–º–∏`;
                }
            },
            {
                string: "(Player1-Died) –ø—Ä–∏–≤–æ–¥–∏—Ç –≤ —É–±–µ–∂–∏—â–µ –ø—Ä–∏—Ä—É—á–µ–Ω–Ω–æ–≥–æ —è—â–µ—Ä–∞, –Ω–µ –∑–Ω–∞—è, —á—Ç–æ —è—â–µ—Ä –≤—Å—ë –µ—â—ë –≥–æ–ª–æ–¥–Ω—ã–π. –ù–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª –∂–∏–≤—ã–º –≤—ã—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —è—â–µ—Ä",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ü–ª–æ—Ö–æ –æ–±—Ä–∞—â–∞–ª—Å—è —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏`;
                }
            },
            {
                string: "(Player1-Died) –Ω–µ —É—Å–ø–µ–≤–∞–µ—Ç –Ω–∞–π—Ç–∏ —É–±–µ–∂–∏—â–µ –≤–æ–≤—Ä–µ–º—è –∏ –ø–æ–≥–∏–±–∞–µ—Ç –ø–æ–¥ –¥–æ–∂–¥—ë–º",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–°–º—ã–ª–æ –¥–æ–∂–¥—ë–º`;
                }
            },
            {
                string: "(Player1-Died) –ø–æ—á—Ç–∏ –∑–∞–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–º—É—é –≤—ã—Å–æ–∫—É—é —Ç–æ—á–∫—É –º–∏—Ä–∞, –Ω–æ –ø–∞–¥–∞–µ—Ç –∏ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ù–µ –¥–æ—Å—Ç–∏–≥ –≤—ã—Å–æ—Ç`;
                }
            },
            {
                string: "(Player1-Died) —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–≤–æ—ë–º —É–±–µ–∂–∏—â–µ —Å—Ç–æ–ª—å–∫–æ —Ö–ª–∞–º–∞, —á—Ç–æ –≤ –∏—Ç–æ–≥–µ –Ω–µ –≤–ª–µ–∑–∞–µ—Ç –≤–Ω—É—Ç—Ä—å –∏ –ø–æ–≥–∏–±–∞–µ—Ç –ø–æ–¥ –¥–æ–∂–¥—ë–º",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–°—Ç—Ä–∞–¥–∞–ª –ø–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å—Å—Ç–≤–æ–º`;
                }
            },
            {
                string: "(Player1-Died) —Ç–æ–Ω–µ—Ç –≤ –∑–∞—Ç–æ–ø–ª–µ–Ω–Ω–æ–π –¥–æ–∂–¥—ë–º –∫–æ–º–Ω–∞—Ç–µ –ø–æ –ø—É—Ç–∏ –∫ —É–±–µ–∂–∏—â—É",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–£—Ç–æ–Ω—É–ª`;
                }
            },
            {
                string: "(Player1-Died) –≥—É–ª—è–µ—Ç –Ω–æ—á—å—é –ø–æ –∫—Ä—ã—à–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞, –Ω–æ –Ω–µ–¥–æ–æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ–ø–∞—Å–Ω–æ—Å—Ç—å —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –∏ –ø–æ–≥–∏–±–∞–µ—Ç",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª —Å—ä–µ–¥–µ–Ω —É–∂–∞—Å–∞–º–∏ –Ω–æ—á–∏`;
                }
            },
            {
                string: "(Player1-Died) –ø—Ä–æ–≤–æ–¥–∏—Ç –≤—Å—ë –≤—Ä–µ–º—è –≤ –ì–ª—É–±–∏–Ω–∞—Ö, –≥–¥–µ –Ω–µ –∏–¥—ë—Ç –¥–æ–∂–¥—å, –Ω–æ –∑–∞—Ç–µ–º –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ –æ—Ç—Ç—É–¥–∞ –Ω–µ –≤—ã–±—Ä–∞—Ç—å—Å—è, –∏ –∏–¥—ë—Ç –≤–æ–∑–Ω–æ—Å–∏—Ç—å—Å—è",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ü–æ–º–µ—Ä –æ—Ç —Ç—É–ø–æ—Å—Ç–∏`;
                }
            },
            {
                string: "(Player1-Died) –≤—Å–ø–æ–º–∏–Ω–∞–µ—Ç –≤—Å–µ —Ç–µ —Ä–∞–∑—ã, –∫–∞–∫ –æ—à–∏–±–∞–ª—Å—è –∏–ª–∏ –ø–æ–∑–æ—Ä–∏–ª—Å—è –∑–∞ –∂–∏–∑–Ω—å, –∏ —É–º–∏—Ä–∞–µ—Ç –æ—Ç –∫—Ä–∏–Ω–∂–∞",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–± –æ—Ç –∫—Ä–∏–Ω–∂–∞`;
                }
            },
            {
                string: "(Player1-Died) –∑–∞—Å—Ç—Ä–µ–≤–∞–µ—Ç –≤ –ø—Ä–æ—Ö–æ–¥–µ –≤ —É–±–µ–∂–∏—â–µ –∏ –ø–æ–≥–∏–±–∞–µ—Ç",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ó–∞—Å—Ç—Ä—è–ª –≤ –ø—Ä–æ—Ö–æ–¥–µ`;
                }
            },
            {
                string: "(Player1-Died) –±—Ä–æ—Å–∞–µ—Ç –¥—ã–º–æ–≤—É—é –±–æ–º–±—É –≤ —É–±–µ–∂–∏—â–µ –∏ –∑–∞–¥—ã—Ö–∞–µ—Ç—Å—è –æ—Ç –æ–±–∏–ª–∏—è —Å–ø–æ—Ä",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–± –æ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –≤–æ–∑–¥—É—Ö–∞`;
                }
            },
            {
                string: "(Player1-Died) –Ω–µ –º–æ–∂–µ—Ç —É—Å–Ω—É—Ç—å –∏ —Ä–µ—à–∞–µ—Ç –ø–æ—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –∂–µ–º—á—É–≥–æ–º, –ø—ã—Ç–∞—è—Å—å –ø—Ä–æ–≥–ª–æ—Ç–∏—Ç—å 10 —à—Ç—É–∫. –ù–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª –æ–Ω –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —É–±–µ–∂–∏—â–∞",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ì–ª–æ—Ç–∞–ª –∂–µ–º—á—É–≥`;
                }
            },
            {
                string: "–£–±–µ–∂–∏—â–µ (Player1-Died) –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã–º –∏ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª. (Player1-Died) –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –∂–¥–∞—Ç—å —Å–≤–æ–µ–π —Å–º–µ—Ä—Ç–∏",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ó–∞—Å–Ω—É–ª –≤ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ–º —É–±–µ–∂–∏—â–µ`;
                }
            },
            {
                string: "–£ (Player1-Died) –Ω–µ –ø—Ä–æ–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–≥—Ä–æ–≤–æ–π —Å–æ–Ω –∏ –æ–Ω –æ—Å—Ç–∞—ë—Ç—Å—è –≤ —É–±–µ–∂–∏—â–µ –Ω–∞–≤—Å–µ–≥–¥–∞",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player1, `–ó–∞–±–∞–≥–∞–ª`)
                }
            },
            {
                string: "(Player1-Died) –ø–µ—Ä–µ–∂–∏–¥–∞–µ—Ç –¥–æ–∂–¥—å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞, –±—É–¥—É—á–∏ —É–≤–µ—Ä–µ–Ω–Ω—ã–º, —á—Ç–æ —Ç–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ. –û–Ω —Ç—É—Ç –∂–µ —É—ë–±—ã–≤–∞–µ—Ç—Å—è –æ–± —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫—É—é –∫–∞—Ç—É—à–∫—É",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player1, `–ü–æ–ª—É—á–∏–ª —Å–º–µ—Ä—Ç–µ–ª—å–Ω—É—é –¥–æ–∑—É —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞`)
                }
            },
            {
                string: "(Player1-Died) –ø–æ–¥–∂–∞—Ä–∏–≤–∞–µ—Ç—Å—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π –±—É—Ä–µ–π –≤ –ø–æ–¥–≤–µ—Å–µ –∫–∞–∫–æ–≥–æ-—Ç–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player1, `–∏ –∑–∞–ø—ë–∫—Å—è –∫–∞–∫ –∫—É—Ä–æ—á–∫–∞ –≥—Ä–∏–ª—å`)
                }
            },
            {
                string: "(Player1-Died) –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–ª–∞—Ç–∞—Ç—å —Ä–∞–Ω—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞ —Ü–∏–∫–ª, –Ω–æ –¥–µ–ª–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ö—É–∂–µ –∏ —É–º–∏—Ä–∞–µ—Ç –æ—Ç –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏—è",
                playerCount: 1,
                howManyDeaths: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player1, `–ë—ã–ª –ø–ª–æ—Ö–∏–º –≤—Ä–∞—á–æ–º`)
                }
            },


            {
                string: "(Player1) –∏ (Player2-Died) –¥–µ—Ä—É—Ç—Å—è –∑–∞ —É–±–µ–∂–∏—â–µ; (Player1) —É–±–∏–≤–∞–µ—Ç (Player2-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–ø—É—Å—Ç–∏—Ç—å (Player2-Died) –≤ —É–±–µ–∂–∏—â–µ, –∏ (Player2-Died) —É–º–∏—Ä–∞–µ—Ç",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–°–º—ã–ª–æ –¥–æ–∂–¥–µ–º (–ø–æ—Ç–æ–º—É —á—Ç–æ –µ–≥–æ –Ω–µ –ø—É—Å—Ç–∏–ª –±—è–∫–∞ <strong><font color="ffff00">` + player1.name + `</font></strong>!!!)`;
                }
            },
            {
                string: "(Player1) —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–π —Å—Ç—Ä–∞—à–Ω—ã–π —Å–µ–∫—Ä–µ—Ç (Player2-Died). (Player2-Died) —Ä–µ—à–∞–µ—Ç, —á—Ç–æ —É–º–µ—Ä–µ—Ç—å –ø–æ–¥ –¥–æ–∂–¥—ë–º –ª—É—á—à–µ, —á–µ–º –æ—Å—Ç–∞—Ç—å—Å—è –≤ —É–±–µ–∂–∏—â–µ",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–£–∑–Ω–∞–ª —Å—Ç—Ä–∞—à–Ω—ã–π —Å–µ–∫—Ä–µ—Ç <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –ø—Ä–æ–≤–æ–¥–∏—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ—Å–ª–µ–¥—É—è (Player2) –∏ –Ω–µ —É—Å–ø–µ–≤–∞–µ—Ç –¥–æ–±–µ–∂–∞—Ç—å –¥–æ —É–±–µ–∂–∏—â–∞",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç–∞–ª–∫–µ—Ä–∏–ª –∑–∞ <strong><font color="ffff00">` + player2.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—É–Ω–¥—É –≤—Ä—ã–≤–∞–µ—Ç—Å—è –≤ —É–±–µ–∂–∏—â–µ, –≥–¥–µ —É–∂–µ —Å–∏–¥–∏—Ç (Player2). –¢–∞–∫–æ–µ —Å–æ—Å–µ–¥—Å—Ç–≤–æ (Player2) –Ω–µ –ø–æ –¥—É—à–µ, –∏ (Player1-Died) –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —É–±–∏—Ç",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–ü—ã—Ç–∞–ª—Å—è —Å—Ç–∞—Ç—å —Å–æ—Å–µ–¥–æ–º <strong><font color="ffff00">` + player2.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) –ø—Ä–∏–±–∏–≤–∞–µ—Ç (Player2-Died) –∫–æ–ø—å—ë–º –∫ —Å—Ç–µ–Ω–µ –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç (Player2-Died) —É–º–∏—Ä–∞—Ç—å –æ—Ç –¥–æ–∂–¥—è",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª –±—Ä—É—Ç–∞–ª—å–Ω–æ —É–±–∏—Ç <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) –∏ (Player2-Died) —Å–ø—è—Ç –≤–º–µ—Å—Ç–µ, –Ω–æ –ø–æ—Å—Ä–µ–¥–∏ –¥–æ–∂–¥—è (Player1) –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è –∏ —É–±–∏–≤–∞–µ—Ç (Player2-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player1.name + `</font></strong> –≤–æ —Å–Ω–µ`;
                }
            },
            {
                string: "(Player1) –ø—Ä—è—á–µ—Ç—Å—è –≤ —É–±–µ–∂–∏—â–µ –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É–±–∏–≤–∞–µ—Ç –∑–∞—à–µ–¥—à–µ–≥–æ —Ç—É–¥–∞ (Player2-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–í–Ω–µ–∑–∞–ø–Ω–æ –±—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –∏ (Player2) –∏–≥—Ä–∞—é—Ç –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ —É–±–µ–∂–∏—â–µ. (Player1-Died) –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–ù–µ –≤—ã–∏–≥—Ä–∞–ª –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞ –ø—Ä–æ—Ç–∏–≤ <strong><font color="ffff00">` + player2.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) –∏ (Player2-Died) –∏–≥—Ä–∞—é—Ç –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ —É–±–µ–∂–∏—â–µ. (Player1) –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç, –Ω–æ –ø—Ä–æ—Å—Ç–æ —É–±–∏–≤–∞–µ—Ç (Player2-Died), —á—Ç–æ–±—ã –∑–∞–Ω—è—Ç—å —É–±–µ–∂–∏—â–µ",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–í—ã–∏–≥—Ä–∞–ª –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞ –ø—Ä–æ—Ç–∏–≤ <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –æ–±–Ω–∏–º–∞–µ—Ç (Player2) –≤–æ —Å–Ω–µ. (Player2) –ø—É–≥–∞–µ—Ç—Å—è –∏ –ø—Ä–æ–±–∏–≤–∞–µ—Ç –≥–æ–ª–æ–≤—É (Player1-Died) –∫–æ–ø—å—ë–º",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–î–æ–æ–±–Ω–∏–º–∞–ª—Å—è —Å <strong><font color="ffff00">` + player2.name + `</font></strong>`;
                }
            },
            {
                string: "–ì–æ–ª–æ–¥–Ω—ã–π (Player1) –≤—Ä—ã–≤–∞–µ—Ç—Å—è –≤ —É–±–µ–∂–∏—â–µ (Player2-Died) –∏ —É–±–∏–≤–∞–µ—Ç –µ–≥–æ, —á—Ç–æ–±—ã —Å—ä–µ—Å—Ç—å",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–°—Ç–∞–ª –Ω–æ—á–Ω—ã–º –ø–µ—Ä–µ–∫—É—Å–æ–º <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç (Player2) –æ —Å–≤–æ–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö, –Ω–æ (Player2) —É—Å—Ç–∞–µ—Ç –æ—Ç –Ω—ã—Ç—å—è –∏ —É–±–∏–≤–∞–µ—Ç (Player1-Died) —á—Ç–æ–±—ã –∑–∞—Å–Ω—É—Ç—å –≤ –ø–æ–∫–æ–µ",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–ó–∞–¥–æ–ª–±–∞–ª <strong><font color="ffff00">` + player2.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –ø—Ä–∏—Ç–≤–æ—Ä—è–µ—Ç—Å—è —Å–ø—è—â–∏–º, —á—Ç–æ–±—ã –∑–∞—Å—Ç–∞—Ç—å –≤—Ä–∞—Å–ø–ª–æ—Ö (Player2-Died). (Player2-Died) –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ. –ß—É—Ç—å –ø–æ–∑–∂–µ –æ–Ω–∏ –æ–±–∞ –Ω–∞–ø–∞–¥–∞—é—Ç –Ω–∞ –∏ —É–±–∏–≤–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞",
                playerCount: 2,
                howManyDeaths: 2,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–ü–æ–ø—ã—Ç–∞–ª—Å—è –æ–±—Ö–∏—Ç—Ä–∏—Ç—å <strong><font color="ffff00">` + player2.name + `</font></strong>, –ø–æ–∫–∞ –æ–Ω –ø—ã—Ç–∞–ª—Å—è –æ–±—Ö–∏—Ç—Ä–∏—Ç—å –µ–≥–æ`;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–ü–æ–ø—ã—Ç–∞–ª—Å—è –æ–±—Ö–∏—Ç—Ä–∏—Ç—å <strong><font color="ffff00">` + player1.name + `</font></strong>, –ø–æ–∫–∞ –æ–Ω –ø—ã—Ç–∞–ª—Å—è –æ–±—Ö–∏—Ç—Ä–∏—Ç—å –µ–≥–æ`;
                }
            },
            {
                string: "(Player1) –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç (Player2-Died) –≤ —Å–≤–æ—ë —É–±–µ–∂–∏—â–µ, –Ω–æ (Player2-Died) –ø—Ä–µ–¥–ø–æ—á—ë–ª –±—ã —É–º–µ—Ä–µ—Ç—å –ø–æ–¥ –¥–æ–∂–¥—ë–º —á–µ–º –Ω–æ—á–µ–≤–∞—Ç—å —Å (Player1)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–ü–æ–≥–∏–± –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–∏–≤–µ—Ä–µ–¥–ª–∏–≤–æ—Å—Ç–∏`;
                }
            },
            {
                string: "(Player1) –Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è —Å–æ—Å–µ–¥–∏ –≤ —É–±–µ–∂–∏—â–µ, –Ω–æ –Ω—Ä–∞–≤—è—Ç—Å—è –¥–µ–Ω—å–≥–∏, —Ç–∞–∫ —á—Ç–æ –æ–Ω —É–±–∏–≤–∞–µ—Ç –∏ –ø—Ä–æ–¥–∞–µ—Ç (Player2-Died) –Ω–∞ –æ—Ä–≥–∞–Ω—ã",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;


                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª –ø—Ä–æ–¥–∞–Ω –Ω–∞ –æ—Ä–≥–∞–Ω—ã. –ó–∞ –¥–µ—Ç–∞–ª—è–º–∏ –ø–∏—à–∏—Ç–µ <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–ø—É—Å–∫–∞—Ç—å (Player2) –≤ —É–±–µ–∂–∏—â–µ, —Ç–∞–∫ —á—Ç–æ (Player2) –ø—Ä–æ—Å—Ç–æ —É–±–∏–≤–∞–µ—Ç –µ–≥–æ",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–û—Ç–∫–∞–∑–∞–ª <strong><font color="ffff00">` + player2.name + `</font></strong> –≤—Ö–æ–¥ –≤ —É–±–µ–∂–∏—â–µ`;
                }
            },
            {
                string: "(Player1) —Ö–æ—á–µ—Ç –ø–æ–¥—Ä—É–∂–∏—Ç—å—Å—è —Å –æ–∫–∞–∑–∞–≤—à–∏–º—Å—è —Å –Ω–∏–º –≤ –æ–¥–Ω–æ–º —É–±–µ–∂–∏—â–µ (Player2-Died), –Ω–æ –æ–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–µ–π, –∏ (Player1) —É–±–∏–≤–∞–µ—Ç –µ–≥–æ",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–∫–æ–≤–∞–ª –Ω–∞ <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) –Ω–∞–ø–∞–¥–∞–µ—Ç –Ω–∞ (Player2-Died) –≤ —É–±–µ–∂–∏—â–µ –∏, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –º–æ–ª—å–±—ã –æ –ø–æ—â–∞–¥–µ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ —Ä–∞–¥–∏ –∂–∏–∑–Ω–∏, —É–±–∏–≤–∞–µ—Ç –µ–≥–æ",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª –±–µ—Å–ø–æ—â–∞–¥–Ω–æ —É–±–∏—Ç <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –∏ (Player2-Died) –º–µ—à–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —É–±–µ–∂–∏—â–∞, –æ–¥–Ω–∞–∫–æ –≤ –∏—Ç–æ–≥–µ –æ–±–∞ –ø–æ–≥–∏–±–∞—é—Ç",
                playerCount: 2,
                howManyDeaths: 2,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `<strong><font color="ffff00">` + player2.name + `</font></strong> –º–µ—à–∞–ª –∏—Å–∫–∞—Ç—å —É–±–µ–∂–∏—â–µ`;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `<strong><font color="ffff00">` + player1.name + `</font></strong> –º–µ—à–∞–ª –∏—Å–∫–∞—Ç—å —É–±–µ–∂–∏—â–µ`;
                }
            },
            {
                string: "(Player1-Died) —Ä–µ—à–∞–µ—Ç —Å–æ–±–ª–∞–∑–Ω–∏—Ç—å (Player2), –Ω–æ (Player2) –Ω–µ –∏–∑ —Ä–æ–±–∫–æ–≥–æ –¥–µ—Å—è—Ç–∫–∞, –∏ –∑–∞–ø–∏–Ω—ã–≤–∞–µ—Ç (Player1-Died) –¥–æ —Å–º–µ—Ä—Ç–∏",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–°–æ–±–ª–∞–∑–Ω—è–ª <strong><font color="ffff00">` + player2.name + `</font></strong>`
                }
            },
            {
                string: "–ü—å—è–Ω—ã–π (Player1-Died) —Ä–µ—à–∞–µ—Ç –ø–æ—Ö–≤–∞—Å—Ç–∞—Ç—å—Å—è —Å–∏–ª–æ–π (Player2-Died) –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∑–∞—Å–æ–≤—ã —É–±–µ–∂–∏—â–∞ –≤—Ä—É—á–Ω—É—é. –û–±–∞ –ø–æ–≥–∏–±–∞—é—Ç –º—É—á–∏—Ç–µ–ª—å–Ω–æ–π —Å–º–µ—Ä—Ç—å—é –ø–æ–¥ –≤–æ–¥–æ–π",
                playerCount: 2,
                howManyDeaths: 2,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;


                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≥–∏–± –æ—Ç –ø—å—è–Ω—Å—Ç–≤–∞`;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–°—Ç–∞–ª –∂–µ—Ä—Ç–≤–æ–π –ø—å—è–Ω—Å—Ç–≤–∞ <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) —à—É—Ä—à–∏—Ç –∑–∞–ø–∞—Å–∞–º–∏ –µ–¥—ã, –æ—Ç —á–µ–≥–æ (Player2) –±–µ—Å–∏—Ç—Å—è –∏ –Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–µ—Ä—ã –ø–æ —É–±–∏–π—Å—Ç–≤—É (Player1-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–ù–µ–≤–æ–ª—å–Ω–æ –≤—ã–±–µ—Å–∏–ª <strong><font color="ffff00">` + player2.name + `</font></strong>`
                }
            },
            {
                string: "(Player1-Died) —É–º–∏—Ä–∞–µ—Ç –æ—Ç —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—É–ø–∞, –∫–æ–≥–¥–∞ (Player2) –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç \"–Ω–µ–º–Ω–æ–≥–æ\" —Å–±–ª–∏–∑–∏—Ç—å—Å—è ",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ù–µ –≤—ã–¥–µ—Ä–∂–∞–ª –ø–∏–∫–∞–Ω—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è`
                }
            },
            {
                string: "(Player1) –≤–∏–¥–∏—Ç —Ä–∞–Ω–µ–Ω–æ–≥–æ (Player2-Died), –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∞–º–æ–º—É –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —É–±–µ–∂–∏—â–∞ –∏ –º–æ–ª—è—â–µ–≥–æ –æ –ø–æ–º–æ—â–∏, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–≥–æ —É–º–∏—Ä–∞—Ç—å –ø–æ–¥ –¥–æ–∂–¥–µ–º",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–ü–æ–≥–∏–± –æ—Ç —Ä–∞–≤–Ω–æ–¥—É—à–∏—è <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) –≥–æ—Ä—è—á–æ —Å–ø–æ—Ä–∏—Ç —Å (Player2-Died) –æ –≤–∫—É—Å–µ –Ω–µ–π—Ä–æ–Ω–æ–≤ –∏ —É–¥–∞—Ä—è–µ—Ç –µ–≥–æ –≥–æ–ª–æ–≤—É –æ —Å—Ç–µ–Ω—É —É–±–µ–∂–∏—â–∞, —É–±–∏–≤–∞—è (Player2-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–ò–º–µ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏—è —Å <strong><font color="ffff00">` + player1.name + `</font></strong> –Ω–∞ –∫—Ä–∞–π–Ω–µ –≤–∞–∂–Ω—ã–µ —Ç–µ–º—ã`;
                }
            },
            {
                string: "(Player1) –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è –ø–æ—Å—Ä–µ–¥–∏ –¥–æ–∂–¥—è –∏ –≤–∏–¥–∏—Ç, –∫–∞–∫ (Player2-Died) –ø–æ—Ä—Ç–∏—Ç –µ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ. (Player2-Died) –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —É–±–µ–∂–∏—â–∞ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–ü–æ—Ä—Ç–∏–ª —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –ª–µ–∑–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫ (Player2), –Ω–µ –¥–∞–≤–∞—è –µ–º—É —É—Å–Ω—É—Ç—å, –∏ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏–±–∏—Ç –∫ —Å—Ç–µ–Ω–µ –∫–æ–ø—å—ë–º",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–ó–∞–¥–æ–ª–±–∞–ª <strong><font color="ffff00">` + player2.name + `</font></strong>`
                }
            },
            {
                string: "(Player1-Died) –∏ (Player2) –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –æ–¥–Ω–æ–º —É–±–µ–∂–∏—â–µ –±–µ–∑ –æ—Ä—É–∂–∏—è. (Player1-Died) –¥—É–º–∞–µ—Ç —á—Ç–æ –æ–Ω –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–æ (Player2) –≤—Å—ë —Ä–∞–≤–Ω–æ —É–º—É–¥—Ä—è–µ—Ç—Å—è –ø—Ä–∏–∫–æ–Ω—á–∏—Ç—å –µ–≥–æ",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª —É–±–∏—Ç –∫—Ä–æ–≤–æ–∂–¥–∞–Ω—ã–º –Ω—Ä–∞–≤–æ–º <strong><font color="ffff00">` + player2.name + `</font></strong>`
                }
            },
            {
                string: "(Player1-Died) –ø–ª–æ—Ö–æ —Å–ø–∏—Ç—Å—è. –ë–ª–∞–≥–æ, (Player2) –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞ –ø–æ–º–æ—â—å –∏ –≤—ã—Ä—É—á–∞–µ—Ç –¥—Ä—É–≥–∞ –æ–¥–Ω–∏–º —Ç–æ—á–Ω—ã–º —É–¥–∞—Ä–æ–º –∫–æ–ø—å—è –ø–æ –≥–æ–ª–æ–≤–µ",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Å–æ–≤–µ—Ç–æ–º <strong><font color="ffff00">` + player2.name + `</font></strong> –ø—Ä–æ—Ç–∏–≤ –±–µ—Å—Å–æ–Ω–Ω–∏—Ü—ã`
                }
            },
            {
                string: "(Player1-Died) –ø–æ–º–æ–≥–∞–µ—Ç (Player2) –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —É–±–µ–∂–∏—â–∞, –Ω–æ –∑–∞—Ç–µ–º (Player2) –ø—Ä–µ–¥–∞–µ—Ç –∏ —É–±–∏–≤–∞–µ—Ç (Player1-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª –ø—Ä–µ–¥–∞–Ω <strong><font color="ffff00">` + player2.name + `</font></strong>`
                }
            },
            {
                string: "(Player1) –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —è—á–µ–µ–∫ –≥–æ–ª–æ–¥–∞ –¥–ª—è –≥–∏–±–µ—Ä–Ω–∞—Ü–∏–∏. –ö —Å—á–∞—Å—Ç—å—é, –≤–∫—É—Å–Ω—ã–π –∏ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–π (Player2-Died) —Ç—É—Ç –∫–∞–∫ —Ç—É—Ç",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player2, `–°—Ç–∞–ª –Ω–æ—á–Ω—ã–º –ø–µ—Ä–µ–∫—É—Å–æ–º <strong><font color="ffff00">` + player1.name + `</font></strong>`, player1);
                }
            },
            {
                string: "(Player1-Died) –≤–µ—Å—å –¥–æ–∂–¥—å —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç (Player2). –û–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–ª–æ—Ö–æ, –∏ —Ä–∞–∑—ä—è—Ä—ë–Ω–Ω—ã–π (Player2) —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —à–µ—é (Player1-Died)",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player1, `–ö–æ–Ω—á–∏–ª–∏—Å—å —Ö–∏—Ö–∞–Ω—å–∫–∏-—Ö–∞—Ö–æ–Ω—å–∫–∏`, player2);
                }
            },            {
                string: "(Player1-Died) –≤—ã—á–µ—Ä—á–∏–≤–∞–µ—Ç –Ω–∞ —Å—Ç–µ–Ω–µ –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –ø—ã—Ç–∞—è—Å—å –ø—Ä–æ—Å—á–∏—Ç–∞—Ç—å —à–∞–Ω—Å —Å–≤–æ–µ–π –ø–æ–±–µ–¥—ã. (Player2) –±—ã—Å—Ç—Ä–æ –≤—ã—á–∏—Å–ª—è–µ—Ç —Ä–æ–≤–Ω—ã–π –∏ –∫—Ä–∞—Å–∏–≤—ã–π –Ω–æ–ª—å, –ø—Ä–æ–±–∏–≤–∞—è —á–µ—Ä–µ–ø (Player1-Died) –∫–æ–ø—å—ë–º",
                playerCount: 2,
                howManyDeaths: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player1, `–û–∫–∞–∑–∞–ª—Å—è —Ö—É–∂–µ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ —á–µ–º <strong><font color="ffff00">` + player2.name + `</font></strong>`, player2);
                }
            },


            {
                string: "–ù–∞–π–¥—è —É–±–µ–∂–∏—â–µ, (Player1) –Ω–∞—Ç—ã–∫–∞–µ—Ç—Å—è —Ç–∞–º –Ω–∞ —Ç—Ä—É–ø (Player2-Died) –∏ –ø–æ—Ç—Ä—ë–ø–∞–Ω–Ω–æ–≥–æ (Player3)",
                playerCount: 3,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player3.kills++;
                    player3.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player3.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died), (Player2) –∏ (Player3) –Ω–æ—á—É—é—Ç –≤–º–µ—Å—Ç–µ. (Player1-Died) –ø—ã—Ç–∞–µ—Ç—Å—è —É–≥–æ–≤–æ—Ä–∏—Ç—å (Player2) —É–±–∏—Ç—å (Player3) –≤–æ —Å–Ω–µ, –Ω–æ (Player2) –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –∏ —É–±–∏–≤–∞–µ—Ç (Player1-Died)",
                playerCount: 3,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–ù–µ –¥–æ–≥–æ–≤–æ—Ä–∏–ª—Å—è —Å <strong><font color="ffff00">` + player2.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) –∂–¥—ë—Ç, –ø–æ–∫–∞ (Player2-Died) –∏ (Player3-Died) —É—Å–Ω—É—Ç, —á—Ç–æ–±—ã —Ç–∏—Ö–æ —É–±–∏—Ç—å –∏—Ö",
                playerCount: 3,
                howManyDeaths: 2,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player1.name + `</font></strong> –≤–æ —Å–Ω–µ`;

                    placements.push(player3);
                    player1.kills++;
                    player1.hasKilled.push(player3.name);
                    player3.alive = false;
                    player3.killedBy = `–ë—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player1.name + `</font></strong> –≤–æ —Å–Ω–µ`;
                }
            },
            {
                string: "(Player1-Died), (Player2-Died) –∏ (Player3-Died) –∏–≥—Ä–∞—é—Ç –≤–µ—Å—å –¥–æ–∂–¥—å –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É‚Ä¶ –Ω–æ –≤–µ–¥—å –∫–æ–ø—å—ë –≤—Å–µ–≥–¥–∞ –ø–æ–ø–∞–¥–∞–µ—Ç",
                playerCount: 3,
                howManyDeaths: 3,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;


                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ì–µ–Ω–∏–∞–ª—å–Ω–æ —Å—ã–≥—Ä–∞–ª –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–ø—å—è`;

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–ì–µ–Ω–∏–∞–ª—å–Ω–æ —Å—ã–≥—Ä–∞–ª –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–ø—å—è`;

                    placements.push(player3);
                    player3.alive = false;
                    player3.killedBy = `–ì–µ–Ω–∏–∞–ª—å–Ω–æ —Å—ã–≥—Ä–∞–ª –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–ø—å—è`;
                }
            },
            {
                string: "(Player1) —Ä–µ—à–∞–µ—Ç —Å–ø–æ–∏—Ç—å (Player2-Died) –∏ (Player3-Died), –Ω–æ –ø–µ—Ä–µ–±–∞—Ä—â–∏–≤–∞–µ—Ç, –æ—Ç—á–µ–≥–æ (Player2-Died) –∏ (Player3-Died) —Å–º–µ—Ä—Ç–µ–ª—å–Ω–æ —Ç—Ä–∞–≤—è—Ç—Å—è –ø–æ–¥ –∑–∞–¥—É–º—á–∏–≤—ã–π –≤–∑–≥–ª—è–¥ (Player1)",
                playerCount: 3,
                howManyDeaths: 2,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–ü–µ—Ä–µ–ø–∏–ª –≤–º–µ—Å—Ç–µ —Å <strong><font color="ffff00">` + player3.name + `</font></strong>`;

                    placements.push(player3);
                    player1.kills++;
                    player1.hasKilled.push(player3.name);
                    player3.alive = false;
                    player3.killedBy = `–ü–µ—Ä–µ–ø–∏–ª –≤–º–µ—Å—Ç–µ —Å <strong><font color="ffff00">` + player2.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) —É–≤–µ—Ä—è–µ—Ç (Player2-Died) –∏ (Player3-Died), —á—Ç–æ –∑–Ω–∞–µ—Ç –ø—É—Ç—å –¥–æ —É–±–µ–∂–∏—â–∞ –∫–∞–∫ —Å–≤–æ–∏ –ø—è—Ç—å –ø–∞–ª—å—Ü–µ–≤, –Ω–æ –æ–Ω–∏ —Ç–∞–∫ –∏ –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç –µ–≥–æ",
                playerCount: 3,
                howManyDeaths: 3,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–û—Ç—Ä–∏—Ü–∞–ª —Å–≤–æ–π —Ç–æ–ø–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫—Ä–µ—Ç–∏–Ω–∏–∑–º`;

                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–°–ª–µ–ø–æ –¥–æ–≤–µ—Ä–∏–ª—Å—è <strong><font color="ffff00">` + player1.name + `</font></strong>`;

                    placements.push(player3);
                    player3.alive = false;
                    player3.killedBy = `–°–ª–µ–ø–æ –¥–æ–≤–µ—Ä–∏–ª—Å—è <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "–í —É–±–µ–∂–∏—â–µ (Player1-Died), (Player2-Died) –∏ (Player3-Died) –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ø–∞–ª–∫–∞. (Player1-Died) –∫–∏–¥–∞–µ—Ç –±–æ–º–±—É –∏ –≤–∑—Ä—ã–≤–∞–µ—Ç –≤—Å–µ—Ö —Å—Ä–∞–∑—É",
                playerCount: 3,
                howManyDeaths: 3,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ó–∞–≥–æ—Ä–µ–ª—Å—è –≤–∑—Ä—ã–≤–Ω–æ–π –∏–¥–µ–µ–π`;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–ü–æ–¥—Ö–≤–∞—Ç–∏–ª –≤–∑—Ä—ã–≤–Ω—É—é –∏–¥–µ—é <strong><font color="ffff00">` + player1.name + `</font></strong>`;

                    placements.push(player3);
                    player1.kills++;
                    player1.hasKilled.push(player3.name);
                    player3.alive = false;
                    player3.killedBy = `–ü–æ–¥—Ö–≤–∞—Ç–∏–ª –≤–∑—Ä—ã–≤–Ω—É—é –∏–¥–µ—é <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1), (Player2) –∏ (Player3-Died) –ø–µ—Ä–µ–∂–∏–¥–∞—é—Ç –¥–æ–∂–¥—å –≤–º–µ—Å—Ç–µ. (Player1) —É–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç (Player2) —É–±–∏—Ç—å (Player3-Died) –≤–æ —Å–Ω–µ",
                playerCount: 3,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player3);
                    player1.kills++;
                    player1.hasKilled.push(player3.name);
                    player2.kills++;
                    player2.hasKilled.push(player3.name);
                    player3.alive = false;
                    player3.killedBy = `–ë—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player1.name + `</font></strong> –∏ <strong><font color="ffff00">` + player2.name + `</font></strong> –≤–æ —Å–Ω–µ`
                }
            },
            {
                string: "(Player1) –ø—Ä–∏–≤–æ–¥–∏—Ç –≤ —É–±–µ–∂–∏—â–µ —Å–≤–æ–µ–≥–æ —Ä—É—á–Ω–æ–≥–æ —è—â–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–¥–æ—Å—Ç–Ω–æ —Å—ä–µ–¥–∞–µ—Ç —É–∂–µ –ø—Ä—è—á—É—â–∏—Ö—Å—è —Ç–∞–º (Player2-Died) –∏ (Player3-Died)",
                playerCount: 3,
                howManyDeaths: 2,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–ü–æ–∫–æ—Ä–º–∏–ª —Ä—É—á–Ω–æ–≥–æ —è—â–µ—Ä–∞ <strong><font color="ffff00">` + player1.name + `</font></strong>`;

                    placements.push(player3);
                    player1.kills++;
                    player1.hasKilled.push(player3.name);
                    player3.alive = false;
                    player3.killedBy = `–ü–æ–∫–æ—Ä–º–∏–ª —Ä—É—á–Ω–æ–≥–æ —è—â–µ—Ä–∞ <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1), (Player2-Died) –∏ (Player3-Died) –Ω–∞—Ö–æ–¥—è—Ç —É–±–µ–∂–∏—â–µ –≤–º–µ—Å—Ç–µ. (Player1) –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Ä–∞—Ç–∞ –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –Ω–∏–º–∏, –æ—Å—Ç–∞–≤–ª—è—è –∏—Ö —É–º–∏—Ä–∞—Ç—å.",
                playerCount: 3,
                howManyDeaths: 2,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player2);
                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª –ø—Ä–µ–¥–∞–Ω <strong><font color="ffff00">` + player1.name + `</font></strong>`;

                    placements.push(player3);
                    player1.kills++;
                    player1.hasKilled.push(player3.name);
                    player3.alive = false;
                    player3.killedBy = `–ë—ã–ª –ø—Ä–µ–¥–∞–Ω <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1) –∏ (Player2) —Å–µ–∫—Ä–µ—Ç–Ω–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –Ω–æ—á—å—é –Ω–∞ –∫—Ä—ã—à–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞. (Player3-Died) —Å–ª—É—á–∞–π–Ω–æ –≤–∏–¥–∏—Ç –∏—Ö, –Ω–æ –≤—ã–¥–∞—ë—Ç —Å–≤–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –∏ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —É–±–∏—Ç",
                playerCount: 3,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player3);
                    player1.kills++;
                    player1.hasKilled.push(player3.name);
                    player2.kills++;
                    player2.hasKilled.push(player3.name);
                    player3.alive = false;
                    player3.killedBy = `–®–ø–∏–æ–Ω–∏–ª –∑–∞ <strong><font color="ffff00">` + player1.name + `</font></strong> –∏ <strong><font color="ffff00">` + player2.name + `</font></strong>`
                }
            },
            {
                string: "(Player1-Died), (Player2-Died) –∏ (Player3-Died) –≤—ã–≥–æ–Ω—è—é—Ç –¥—Ä—É–≥-–¥—Ä—É–≥–∞ –∏–∑ —É–±–µ–∂–∏—â–∞. –î–æ–∂–¥—å —Å–º—ã–≤–∞–µ—Ç –≤—Å–µ—Ö —Ç—Ä–æ–∏—Ö",
                playerCount: 3,
                howManyDeaths: 3,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    theFunnyKillFunction(player1, `–í–∏–¥–∏—Ç–µ –¥–≤–æ–∏—Ö —Å–ª–µ–≤–∞? –í–æ—Ç –¥–∞`, player2, player3);
                    theFunnyKillFunction(player2, `–í–∏–¥–∏—Ç–µ –¥–≤–æ–∏—Ö –ø–æ –±–æ–∫–∞–º? –í–æ—Ç –¥–∞`, player1, player3);
                    theFunnyKillFunction(player3, `–í–∏–¥–∏—Ç–µ –¥–≤–æ–∏—Ö —Å–ø—Ä–∞–≤–∞? –í–æ—Ç –¥–∞`, player1, player2);
                }
            },

            {
                string: "(Player1-Died) –∏ (Player2) –æ—Ç–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤–ø—É—Å—Ç–∏—Ç—å (Player3-Died) –∏ (Player4) –≤ —É–±–µ–∂–∏—â–µ. (Player1-Died) –∏ (Player3-Died) –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —É–±–∏—Ç—ã, (Player2) –∏ (Player4) –∑–∞—Å—ã–ø–∞—é—Ç –≤–º–µ—Å—Ç–µ",
                playerCount: 4,
                howManyDeaths: 2,
                updateData: function (player1, player2, player3, player4) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player2.kills++;
                    player2.hasKilled.push(player1.name);
                    player4.kills++;
                    player4.hasKilled.push(player1.name);
                    player1.alive = false;
                    player1.killedBy = `–ë—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player2.name + `</font></strong> –∏ <strong><font color="ffff00">` + player4.name + `</font></strong> –≤ –ø–µ—Ä–µ–ø–∞–ª–∫–µ –∑–∞ —É–±–µ–∂–∏—â–µ`;

                    placements.push(player3);
                    player2.kills++;
                    player2.hasKilled.push(player3.name);
                    player4.kills++;
                    player4.hasKilled.push(player3.name);
                    player3.alive = false;
                    player3.killedBy = `–ë—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player2.name + `</font></strong> –∏ <strong><font color="ffff00">` + player4.name + `</font></strong> –≤ –ø–µ—Ä–µ–ø–∞–ª–∫–µ –∑–∞ —É–±–µ–∂–∏—â–µ`;
                }
            },
            {
                string: "(Player1-Died), (Player2-Died) –∏ (Player3-Died) –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç (Player4-Died) –≤–µ—Å—Ç–∏ –∏—Ö –∫ —É–±–µ–∂–∏—â—É, –Ω–æ –æ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∏—Ö –≤ —Ç—É–ø–∏–∫ –∏ –≤—Å—é –≥—Ä—É–ø–ø—É —Å–º—ã–≤–∞–µ—Ç –¥–æ–∂–¥—ë–º",
                playerCount: 4,
                howManyDeaths: 4,
                updateData: function (player1, player2, player3, player4) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    player4.kills++;
                    player4.hasKilled.push(player1.name);
                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ü–æ–≤—ë–ª—Å—è –Ω–∞ —É–ª–æ–≤–∫—É <strong><font color="ffff00">` + player4.name + `</font></strong>`;

                    player4.kills++;
                    player4.hasKilled.push(player2.name);
                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–ü–æ–≤—ë–ª—Å—è –Ω–∞ —É–ª–æ–≤–∫—É <strong><font color="ffff00">` + player4.name + `</font></strong>`;

                    player4.kills++;
                    player4.hasKilled.push(player3.name);
                    placements.push(player3);
                    player3.alive = false;
                    player3.killedBy = `–ü–æ–≤—ë–ª—Å—è –Ω–∞ —É–ª–æ–≤–∫—É <strong><font color="ffff00">` + player4.name + `</font></strong>`;

                    placements.push(player4);
                    player4.alive = false;
                    player4.killedBy = `–ü—Ä–∏–≤—ë–ª <strong><font color="ffff00">` + player1.name + `</font></strong>, <strong><font color="ffff00">` + player2.name + `</font></strong> –∏ <strong><font color="ffff00">` + player3.name + `</font></strong> –≤ —Ç—É–ø–∏–∫`;
                }
            },
            {
                string: "(Player1-Died), (Player2), (Player3) –∏ (Player4) –ø–µ—Ä–µ–∂–∏–¥–∞—é—Ç –¥–æ–∂–¥—å –≤–º–µ—Å—Ç–µ, –Ω–æ —É–±–µ–∂–∏—â–µ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –º–∞–ª–µ–Ω—å–∫–æ–µ, —á—Ç–æ (Player1-Died) –∑–∞–¥—ã—Ö–∞–µ—Ç—Å—è –ø–æ–¥ –≤–µ—Å–æ–º –≤—Å–µ–π –≥—Ä—É–ø–ø—ã",
                playerCount: 4,
                howManyDeaths: 1,
                updateData: function (player1, player2, player3, player4) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;

                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ó–∞–¥–æ—Ö–Ω—É–ª—Å—è –ø–æ–¥ –≤–µ—Å–æ–º <strong><font color="ffff00">` + player2.name + `</font></strong>, <strong><font color="ffff00">` + player3.name + `</font></strong> –∏ <strong><font color="ffff00">` + player4.name + `</font></strong>`;
                }
            },
            {
                string: "(Player1-Died) –æ—à–∏–±–∞–µ—Ç—Å—è –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö, –ø—Ä–æ–∏–∑–≤–æ–¥—è –±–æ–º–±—É –º—É—Å–æ—Ä—â–∏–∫–æ–≤ –≤ —É–±–µ–∂–∏—â–µ, –æ—Ç—á–µ–≥–æ –≤–∑—Ä—ã–≤–∞–µ—Ç —Å–µ–±—è, (Player2-Died), (Player3-Died), (Player4-Died) –∏ (Player5-Died)",
                playerCount: 5,
                howManyDeaths: 5,
                updateData: function (player1, player2, player3, player4, player5) {
                    currentCharacterNumber -= this.howManyDeaths;
                    diedThisCycle += this.howManyDeaths;


                    placements.push(player1);
                    player1.alive = false;
                    player1.killedBy = `–ß—É—Ç—å-—á—É—Ç—å –æ—à–∏–±—Å—è –≤ —Ä–∞—Å—á—ë—Ç–∞—Ö`;

                    player1.kills++;
                    player1.hasKilled.push(player2.name);
                    placements.push(player2);
                    player2.alive = false;
                    player2.killedBy = `–õ–∏—Ü–µ–∑—Ä–µ–ª –æ—à–∏–±–∫—É <strong><font color="ffff00">` + player1.name + `</font></strong>`;

                    player1.kills++;
                    player1.hasKilled.push(player3.name);
                    placements.push(player3);
                    player3.alive = false;
                    player3.killedBy = `–õ–∏—Ü–µ–∑—Ä–µ–ª –æ—à–∏–±–∫—É <strong><font color="ffff00">` + player1.name + `</font></strong>`;

                    player1.kills++;
                    player1.hasKilled.push(player4.name);
                    placements.push(player4);
                    player4.alive = false;
                    player4.killedBy = `–õ–∏—Ü–µ–∑—Ä–µ–ª –æ—à–∏–±–∫—É <strong><font color="ffff00">` + player1.name + `</font></strong>`;

                    player1.kills++;
                    player1.hasKilled.push(player5.name);
                    placements.push(player5);
                    player5.alive = false;
                    player5.killedBy = `–õ–∏—Ü–µ–∑—Ä–µ–ª –æ—à–∏–±–∫—É <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                }
            }
        ],
        revival: [
            {
                string: "(Player1-Rev) –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è –≤ —Ö–æ–ª–æ–¥–Ω–æ–º –ø–æ—Ç—É –æ—Ç –∫–æ—à–º–∞—Ä–∞",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "–ù–æ–≤–æ–æ–∂–∏–≤—à–∏–π (Player1-Rev) –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–Ω—è—Ç—å –≤ –∫–∞–∫–æ–º –æ–Ω —Ä–µ–≥–∏–æ–Ω–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–≤–µ—Ç —Å—Ç–µ–Ω —É–±–µ–∂–∏—â–∞",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –≥—Ä—É—Å—Ç–∏—Ç –∏–∑-–∑–∞ —É–ø–∞–≤—à–µ–π –∫–∞—Ä–º—ã",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –≤—ã—Ä–∞—Å—Ç–∞–µ—Ç –∏–∑ –ø–æ–ª–∞ —É–±–µ–∂–∏—â–∞",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –ø—Ä–æ–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è —Å–∫–≤–æ–∑—å –ø–æ—Ç–æ–ª–æ–∫ —É–±–µ–∂–∏—â–∞",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –∂–∏–∑–Ω–∏... –ø—Ä—è–º–æ –ø–æ–¥ –¥–æ–∂–¥—ë–º. –ß–∏—Å—Ç–æ –∏–∑ –∂–∞–ª–æ—Å—Ç–∏, –†–í–ì–ò –ø–æ–∑–≤–æ–ª—è—é—Ç –æ–∂–∏—Ç—å –µ–º—É –µ—â—ë —Ä–∞–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –¥—Ä–æ–ø–∞–µ—Ç—Å—è",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –∂–µ–ª–∞–µ—Ç –≤—Å–µ–º –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –¥–∞—ë—Ç \"–≤–∑—è—Ç–∫—É\" —Å–æ–∑–¥–∞—Ç–µ–ª—é –†–í–ì–ò –∏ –∫–∞–∫ –Ω–∏ –≤ —á–µ–º –Ω–µ –±—ã–≤–∞–ª–æ –ø–µ—Ä–µ—Ä–æ–∂–¥–∞–µ—Ç—Å—è –≤ —É–±–µ–∂–∏—â–µ",
                playerCount: 1,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },

            {
                string: "(Player1-Rev) –≤–æ–∑—Ä–æ–∂–¥–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ–º —É–±–µ–∂–∏—â–µ —Å–æ —Å–ø—è—â–∏–º (Player2); –Ω–∞ —É—Ç—Ä–æ (Player2) –≤ –∫—Ä–∞–π–Ω–µ–π —Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–ø–∞–≤—à–∏—Ö —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –∏ –∑–∞–ø–∞—Å–æ–≤",
                playerCount: 2,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç—Å—è –∏–∑ –ø–µ–Ω—Ç–∞–≥—Ä–∞–º–º—ã, —Å–æ —Å–∫—É–∫–∏ –Ω–∞—á–µ—Ä—á–µ–Ω–Ω–æ–π –∑–Ω–∞—Ç–Ω–æ –æ—Ö—Ä–µ–Ω–µ–≤–∞—é—â–∏–º (Player2)",
                playerCount: 2,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –≤—Å–µ–ª—è–µ—Ç—Å—è –≤ –∫–æ—Ç—ë–Ω–∫–∞ (Player2) –ø–æ–∫–∞ —Ç–æ—Ç —Å–ø–∏—Ç, –≤–æ–∑–≤—Ä–∞—â–∞—è—Å—å –≤ –∏–≥—Ä—É",
                playerCount: 2,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫ (Player2) –≤–æ —Å–Ω–µ. –ù–∞ —É—Ç—Ä–æ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ –±—ã–ª –Ω–µ —Å–æ–Ω",
                playerCount: 2,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –≤—Ä—ã–≤–∞–µ—Ç—Å—è –≤ —É–±–µ–∂–∏—â–µ (Player2) –ø—Ä—è–º–æ –ø–æ—Å—Ä–µ–¥–∏ –¥–æ–∂–¥—è. (Player2) –∫–ª—è–Ω–µ—Ç—Å—è, —á—Ç–æ –≤–∏–¥–µ–ª –µ–≥–æ –º—ë—Ä—Ç–≤—ã–º —ç—Ç–∏–º —Ü–∏–∫–ª–æ–º",
                playerCount: 2,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            },

            {
                string: "(Player1-Rev) –æ–∂–∏–≤–∞–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è –∏—Å–∫—É—Å–Ω–æ –ø—Ä–æ–≤—ë–¥–µ–Ω–Ω–æ–º—É —Ä–∏—Ç—É–∞–ª—É (Player2-Died), —á—Ç–æ –∂–µ—Ä—Ç–≤—É–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∂–∏–∑–Ω—å—é –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ",
                playerCount: 2,
                howManyDeaths: 1,
                howManyRevivals: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    player2.alive = false;
                    player2.killedBy = `–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª —Å–æ–±–æ–π —Ä–∞–¥–∏ <strong><font color="ffff00">` + player1.name + `</font></strong>`

                    placements.push(player2);
                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player1-Rev) –≤–æ–∑—Ä–æ–∂–¥–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ–º —É–±–µ–∂–∏—â–µ —Å–æ —Å–ø—è—â–∏–º (Player2-Died) –∏ –ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∞–Ω—Å–æ–º –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–∫–æ–Ω—á–∏—Ç—å –µ–≥–æ",
                playerCount: 2,
                howManyDeaths: 1,
                howManyRevivals: 1,
                updateData: function (player1, player2) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;
                    player1.kills++;
                    player1.hasKilled.push(player2.name);

                    player2.alive = false;
                    player2.killedBy = `–ë—ã–ª —É–±–∏—Ç –æ–∂–∏–≤—à–∏–º <strong><font color="ffff00">` + player1.name + `</font></strong>`

                    placements.push(player2);
                    placements = placements.filter(o => o.name !== player1.name);
                }
            },
            {
                string: "(Player2) –∏ (Player3) –¥–µ–ª—è—Ç—Å—è —Å–ª—É—Ö–∞–º–∏ –æ —Ç–æ–º, —á—Ç–æ (Player1-Rev) - –º—ë—Ä—Ç–≤—ã–π –ª–æ—Ö. (Player1-Rev) –≤–æ–∑—Ä–æ–∂–¥–∞–µ—Ç—Å—è —á–∏—Å—Ç–æ –Ω–∞–∑–ª–æ –∏–º",
                playerCount: 3,
                howManyDeaths: 0,
                howManyRevivals: 1,
                updateData: function (player1, player2, player3) {
                    currentCharacterNumber -= this.howManyDeaths;
                    currentCharacterNumber += this.howManyRevivals;
                    diedThisCycle += this.howManyDeaths;

                    player1.alive = true;
                    player1.revived++;
                    player1.oldKilledBys.push(player1.killedBy);
                    player1.killedBy = undefined;

                    placements = placements.filter(o => o.name !== player1.name);
                }
            }
        ]
    }
}*/

/*var eventsRandom = [
    {
        used: false,
        string: `–í–Ω–µ–∑–∞–ø–Ω–æ –Ω–∞ —Ñ–æ–Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä–∞—Ç—å –∑–∞–º–µ–¥–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Kayava...<br>"–Ø –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –ø–∞—Ä—É –∏–ª–∏ —É–º–µ—Ä–µ—Ç—å"`,
        eventGenus: {
            regular: function () {
                var eventObject = decideEventObject(eventsRandom[0][`eventGenus`][`array`][`regular`]);

                var playerCount = eventObject.playerCount;

                var players = decidePlayers(playerCount);
                currentUnusedCharacterNumber -= playerCount;

                if (playerCount === 1) var eventString = replacePlaceholderName(eventObject.string, players[0].name)
                else if (playerCount === 2) var eventString = replacePlaceholderName(eventObject.string, players[0].name, players[1].name)
                else if (playerCount === 3) var eventString = replacePlaceholderName(eventObject.string, players[0].name, players[1].name, players[2].name)
                else if (playerCount === 4) var eventString = replacePlaceholderName(eventObject.string, players[0].name, players[1].name, players[2].name, players[3].name)
                else if (playerCount === 5) var eventString = replacePlaceholderName(eventObject.string, players[0].name, players[1].name, players[2].name, players[3].name, players[4].name)
                else if (playerCount === 6) var eventString = replacePlaceholderName(eventObject.string, players[0].name, players[1].name, players[2].name, players[3].name, players[4].name, players[5].name);
                console.log(eventString, players);

                if (playerCount === 1) var eventImage = makeImages(players[0].image)
                else if (playerCount === 2) var eventImage = makeImages(players[0].image, players[1].image)
                else if (playerCount === 3) var eventImage = makeImages(players[0].image, players[1].image, players[2].image)
                else if (playerCount === 4) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image)
                else if (playerCount === 5) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image)
                else if (playerCount === 6) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image, players[5].image);

                var event = eventImage + eventString + `<br><br>`;

                return event;
            },
            lethal: function () {
                do var eventObject = decideEventObject(eventsRandom[0][`eventGenus`][`array`][`lethal`])
                while (eventObject.howManyDeaths >= currentCharacterNumber);

                var playerCount = eventObject.playerCount;

                var players = decidePlayers(playerCount);
                currentUnusedCharacterNumber -= playerCount;

                if (playerCount === 1) var eventString = replacePlaceholderName(eventObject.string, players[0].name)
                else if (playerCount === 2) var eventString = replacePlaceholderName(eventObject.string, players[0].name, players[1].name)
                else if (playerCount === 3) var eventString = replacePlaceholderName(eventObject.string, players[0].name, players[1].name, players[2].name)
                else if (playerCount === 4) var eventString = replacePlaceholderName(eventObject.string, players[0].name, players[1].name, players[2].name, players[3].name)
                else if (playerCount === 5) var eventString = replacePlaceholderName(eventObject.string, players[0].name, players[1].name, players[2].name, players[3].name, players[4].name)
                else if (playerCount === 6) var eventString = replacePlaceholderName(eventObject.string, players[0].name, players[1].name, players[2].name, players[3].name, players[4].name, players[5].name);
                console.log(eventString, players);

                if (playerCount === 1) var eventImage = makeImages(players[0].image)
                else if (playerCount === 2) var eventImage = makeImages(players[0].image, players[1].image)
                else if (playerCount === 3) var eventImage = makeImages(players[0].image, players[1].image, players[2].image)
                else if (playerCount === 4) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image)
                else if (playerCount === 5) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image)
                else if (playerCount === 6) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image, players[5].image);

                var event = eventImage + eventString + `<br><br>`;

                eventObject.updateData.apply(eventObject, players);

                return event;
            },
            revival: function () {
                var eventObject = decideEventObject(eventsRandom[0][`eventGenus`][`array`][`revival`]);

                var playerCount = eventObject.playerCount;

                var revivedPlayers = decideRevivedPlayers(eventObject.howManyRevivals);
                if (revivedPlayers == "stop") return "stop";
                var justPlayers = decidePlayers(playerCount - eventObject.howManyRevivals);

                var players = revivedPlayers.concat(justPlayers);

                currentUnusedCharacterNumber -= playerCount - eventObject.howManyRevivals;

                if (playerCount === 1) var eventString = replacePlaceholderName(eventObject.string, players[0].name)
                else if (playerCount === 2) var eventString = replacePlaceholderName(eventObject.string, players[0].name, players[1].name)
                else if (playerCount === 3) var eventString = replacePlaceholderName(eventObject.string, players[0].name, players[1].name, players[2].name)
                else if (playerCount === 4) var eventString = replacePlaceholderName(eventObject.string, players[0].name, players[1].name, players[2].name, players[3].name)
                else if (playerCount === 5) var eventString = replacePlaceholderName(eventObject.string, players[0].name, players[1].name, players[2].name, players[3].name, players[4].name)
                else if (playerCount === 6) var eventString = replacePlaceholderName(eventObject.string, players[0].name, players[1].name, players[2].name, players[3].name, players[4].name, players[5].name);
                console.log(eventString, players);

                if (playerCount === 1) var eventImage = makeImages(players[0].image)
                else if (playerCount === 2) var eventImage = makeImages(players[0].image, players[1].image)
                else if (playerCount === 3) var eventImage = makeImages(players[0].image, players[1].image, players[2].image)
                else if (playerCount === 4) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image)
                else if (playerCount === 5) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image)
                else if (playerCount === 6) var eventImage = makeImages(players[0].image, players[1].image, players[2].image, players[3].image, players[4].image, players[5].image);

                var event = eventImage + eventString + `<br><br>`;

                eventObject.updateData.apply(eventObject, players);

                return event;
            },
            array: {
                regular: [
                    {
                        string: "(Player1) –æ—Å—Ç—Ä–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ –ò–Ω–≤–∞ –∏ —Å–æ –∑–ª–æ–±–æ–π —É–±–∏–≤–∞–µ—Ç –µ–≥–æ",
                        playerCount: 1
                    },
                    {
                        string: "(Player1) –∑–∞–≤–æ–¥–∏—Ç —Ç—Ä–∏–¥—Ü–∞—Ç—å —Å–µ–º—å –∫–æ—Ç—è—Ç —Å –ò–Ω–≤–æ–º, –ø–æ—Å–ª–µ —á–µ–≥–æ –ò–Ω–≤ –Ω–∞–≤—Å–µ–≥–¥–∞ –ø—Ä–æ–ø–∞–¥–∞–µ—Ç, —É–π–¥—è –∑–∞ —Ñ—Ä—É–∫—Ç–∞–º–∏",
                        playerCount: 1
                    },
                    {
                        string: "(Player1) –æ–∫–∞–∑–∞–ª—Å—è –Ω–∞—Å—Ç–æ–ª—å–∫–æ –Ω–µ—Å–∏–º–ø–∞—Ç–∏—á–Ω—ã–º, —á—Ç–æ –¥–∞–∂–µ –ò–Ω–≤ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –∏–∑–±–µ–≥–∞—Ç—å –µ–≥–æ–µ—ë",
                        playerCount: 1
                    },
                    {
                        string: "(Player1) –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–∞–∂–µ —Å–ª–∏—à–∫–æ–º –Ω–∞–ø–æ—Ä–∏—Å—Ç—ã–º –∏ –ò–Ω–≤ —Å–±–µ–≥–∞–µ—Ç",
                        playerCount: 1
                    },
                    {
                        string: "(Player1) –ø—É–≥–∞–µ—Ç—Å—è –ò–Ω–≤–∞ –∏ —É–±–∏–≤–∞–µ—Ç –µ–≥–æ",
                        playerCount: 1
                    },
                    {
                        string: "(Player1) –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ/–Ω–µ—ë —É–∂–µ –µ—Å—Ç—å –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞, –Ω–æ –ò–Ω–≤ –Ω–µ –æ—Ç—Å—Ç–∞—ë—Ç –∏ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —É–±–∏—Ç",
                        playerCount: 1
                    },
                    {
                        string: "(Player1) –≤–µ–∑—ë—Ç —Å —Ç–µ–º, —á—Ç–æ–±—ã –Ω–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –ò–Ω–≤–∞",
                        playerCount: 1
                    },
                    {
                        string: "(Player1) –≤–∏–¥–∏—Ç –ò–Ω–≤–∞ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –∏ —Ä–µ—à–∞–µ—Ç —É–±–µ–∂–∞—Ç—å",
                        playerCount: 1
                    },
                    {
                        string: "–ò–Ω–≤ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥–∞—Ä–∏—Ç—å (Player1) —Ç—Ä—É—Å—ã, –Ω–æ (Player1) –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è",
                        playerCount: 1
                    },
                    {
                        string: "–ò–Ω–≤ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç (Player1) –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å—Å—è, –Ω–æ (Player1) –Ω–µ —É–º–µ–µ—Ç",
                        playerCount: 1
                    },
                    {
                        string: "–ò–Ω–≤ –¥–∞—Ä–∏—Ç (Player1) —è–π—Ü–æ, –Ω–æ (Player1) –Ω–µ –∑–Ω–∞–µ—Ç, —á—Ç–æ —Å –Ω–∏–º –¥–µ–ª–∞—Ç—å. –ò–Ω–≤ –∑–ª–∏—Ç—Å—è –∏ —É—Ö–æ–¥–∏—Ç —Å–æ —Å–≤–∏–¥–∞–Ω–∏—è",
                        playerCount: 1
                    },
                    {
                        string: "(Player1) —Ç–∞–∫ —Å–∏–ª—å–Ω–æ —Ö–æ—á–µ—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è —Å –ò–Ω–≤–æ–º, —á—Ç–æ —Ç–æ—Ç –ø—É–≥–∞–µ—Ç—Å—è –∏ —Ç–∏—Ö–æ —É–±–µ–≥–∞–µ—Ç",
                        playerCount: 1
                    },
                    {
                        string: "(Player1) –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ò–Ω–≤—É –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –ø—Ä—è—Ç–∫–∏ –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–±–µ–≥–∞–µ—Ç –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–æ—Ç –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≥–ª–∞–∑–∞",
                        playerCount: 1
                    },
                    {
                        string: "–ò–Ω–≤ –ø–æ—á—Ç–∏ –∑–∞–≤–æ—ë–≤—ã–≤–∞–µ—Ç —Å–µ—Ä–¥—Ü–µ (Player1), –Ω–æ –¥–µ–ª–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∏ (Player1) –æ–±–∏–∂–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ–≥–æ, —É—Ö–æ–¥—è —Å–æ —Å–≤–∏–¥–∞–Ω–∏—è",
                        playerCount: 1
                    },
                    {
                        string: "–£ –ò–Ω–≤–∞ –∏ (Player1) –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∑–∞–≤–µ—Å—Ç–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –æ–¥–Ω–∞–∫–æ –æ–Ω–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–º–∏ –¥—Ä—É–∑—å—è–º–∏ –∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–º–µ—Å—Ç–µ —á–µ—Ä–µ–∑ —É–π–º—É –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π",
                        playerCount: 1
                    },
                    {
                        string: "–ò–Ω–≤ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É (Player1), –Ω–µ –¥–∞–º–∞ –ª–∏ –æ–Ω, –∏ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —É–±–∏—Ç",
                        playerCount: 1
                    },
                    {
                        string: "(Player1) –∑–∞–º–∞–Ω–∏–≤–∞–µ—Ç –ò–Ω–≤–∞ –∫ —Å–µ–±–µ –¥–æ–º–æ–π –∏ –ø—Ä–æ–¥–∞–µ—Ç –µ–≥–æ –Ω–∞ –æ—Ä–≥–∞–Ω—ã",
                        playerCount: 1
                    },
                    {
                        string: "(Player1) —É–±–µ–∂–¥–∞–µ—Ç –ò–Ω–≤–∞ –≤–æ–∑–Ω–µ—Å—Ç–∏—Å—å, –Ω–æ —Ç–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≤–∏–¥–µ —É–∂–∞—Å–Ω–æ–≥–æ –û—Ç–≥–æ–ª–æ—Å–∫–∞ –≤—Ç–æ—Ä–æ–π –∫–∞—Ä–º—ã. –°–ø–∞—Å–µ–Ω–∏—è –Ω–µ—Ç",
                        playerCount: 1
                    },
                    {
                        string: "(Player1) –∏ –ò–Ω–≤ –Ω–æ—á—É—é—Ç –≤–º–µ—Å—Ç–µ –≤ –æ–¥–Ω–æ–º —É–±–µ–∂–∏—â–µ ;)",
                        playerCount: 1
                    },
                    {
                        string: "(Player1) —Ü–µ–ª—É–µ—Ç—Å—è —Å –ò–Ω–≤–æ–º. (Player2) –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–∏–º–æ –∏ —Ä–∞—Å–ø–ª–∞–∫–∏–≤–∞–µ—Ç—Å—è –æ—Ç —É–≤–∏–¥–µ–Ω–Ω–æ–≥–æ",
                        playerCount: 2
                    },
                    {
                        string: "(Player1) –¥—É–º–∞–µ—Ç, —á—Ç–æ –∏–¥—ë—Ç –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ —Å –ò–Ω–≤–æ–º, –Ω–æ –ø–æ–ø–∞–¥–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–∞–Ω–∫ –∏ –ø–æ–ª—É—á–∞–µ—Ç –Ω–µ–ª–æ–≤–∫—É—é –≤—Å—Ç—Ä–µ—á—É —Å (Player2) ",
                        playerCount: 2
                    },
                    {
                        string: "(Player1) –ø–µ—Ä–µ–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª—é–±–æ–≤—å—é –∫ –ò–Ω–≤—É, –Ω–æ –ø—É—Ç–∞–µ—Ç—Å—è –∏ —Ü–µ–ª—É–µ—Ç (Player2)",
                        playerCount: 2
                    },
                    {
                        string: "–ò–Ω–≤ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å (Player1), –Ω–æ –µ–≥–æ —Ç—É—Ç –∂–µ —É–±–∏–≤–∞–µ—Ç —Ä–µ–≤–Ω–∏–≤—ã–π (Player2)",
                        playerCount: 2
                    },
                    {
                        string: "(Player1) —Ä–∞–∑–≤–æ–¥–∏—Ç—Å—è —Å (Player2) —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –ø–∞—Ä–æ–π –ò–Ω–≤–∞",
                        playerCount: 2
                    },
                    {
                        string: "(Player1) –ø–æ–ø–∞–¥–∞–µ—Ç—Å—è –ò–Ω–≤—É, –Ω–æ –±—ã—Å—Ç—Ä–æ —Ç–æ–ª–∫–∞–µ—Ç (Player2) –∫ –Ω–µ–º—É –≤–º–µ—Å—Ç–æ —Å–µ–±—è",
                        playerCount: 2
                    },
                    {
                        string: "–ò–Ω–≤ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–º—É—Ç–∏—Ç—å —Å (Player1), –Ω–æ –∫–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ (Player1) –∏ (Player2) –Ω–∞—á–∏–Ω–∞—é—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è",
                        playerCount: 2
                    },
                    {
                        string: "(Player1), (Player2) –∏ –ò–Ω–≤ –æ–±—Ä–∞–∑—É—é—Ç –ø–æ–ª–∏–∫—É–ª—É",
                        playerCount: 2
                    },
                    {
                        string: "(Player1) –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å –ò–Ω–≤–∞ —Å (Player2), –Ω–æ (Player2) –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –ø–æ—Ç–æ–º—É –∫–∞–∫ –≤–ª—é–±–ª—ë–Ω –≤ (Player3)",
                        playerCount: 3
                    }
                ],
                lethal: [
                    {
                        string: "–ò–Ω–≤ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç (Player1) –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ, –≤—Å–ª–µ–¥—Å—Ç–≤–∏–µ —á–µ–≥–æ (Player1-Died) —É–º–∏—Ä–∞–µ—Ç",
                        playerCount: 1,
                        howManyDeaths: 1,
                        updateData: function (player1) {
                            currentCharacterNumber -= this.howManyDeaths;
                            diedThisCycle += this.howManyDeaths;

                            placements.push(player1);
                            player1.alive = false;
                            player1.killedBy = `–ü–æ—à—ë–ª –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ –ò–Ω–≤–∞`;
                        }
                    },
                    {
                        string: "(Player1-Died) –∏ –ò–Ω–≤ —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–æ–¥—è—Ç –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–µ –∏ –≤–ª—é–±–ª—è—é—Ç—Å—è –¥—Ä—É–≥ –≤ –¥—Ä—É–≥–∞. –Ø–π—Ü–æ —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö –≤ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ –∏ –æ–Ω–∏ –∂–∏–≤—É—Ç —Å—á–∞—Å—Ç–ª–∏–≤–æ –¥–æ –∫–æ–Ω—Ü–∞",
                        playerCount: 1,
                        howManyDeaths: 1,
                        updateData: function (player1) {
                            currentCharacterNumber -= this.howManyDeaths;
                            diedThisCycle += this.howManyDeaths;

                            placements.push(player1);
                            player1.alive = false;
                            player1.killedBy = `–°—á–∞—Å—Ç–ª–∏–≤–æ –∂–∏–≤—ë—Ç —Å –ò–Ω–≤–æ–º`;
                        }
                    },
                    {
                        string: "–ò–Ω–≤ –¥–∞—Ä–∏—Ç —Ü–≤–µ—Ç—ã (Player1-Died), –Ω–æ —É (Player1-Died) –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–∏—Ö –∞–ª–ª–µ—Ä–≥–∏—è, –∏ (Player1-Died) –ø–æ–≥–∏–±–∞–µ—Ç —Å—Ç—Ä–∞—à–Ω–æ–π —Å–º–µ—Ä—Ç—å—é",
                        playerCount: 1,
                        howManyDeaths: 1,
                        updateData: function (player1) {
                            currentCharacterNumber -= this.howManyDeaths;
                            diedThisCycle += this.howManyDeaths;

                            placements.push(player1);
                            player1.alive = false;
                            player1.killedBy = `–ü–æ–≥–∏–± –æ—Ç –∞–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–æ–π —Ä–µ–∞–∫—Ü–∏–∏`;
                        }
                    },
                    {
                        string: "(Player1-Died) –ø–æ—á—Ç–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—å –µ–≥–æ –ø–∞—Ä–æ–π, –Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –Ω–µ—É–¥–∞—á–µ –ò–Ω–≤–∞, —Å –Ω–µ–±–∞ –ø–∞–¥–∞–µ—Ç –ª–µ–≤–∏–∞—Ñ–∞–Ω, –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ —É–±–∏–≤–∞—è (Player1-Died)",
                        playerCount: 1,
                        howManyDeaths: 1,
                        updateData: function (player1) {
                            currentCharacterNumber -= this.howManyDeaths;
                            diedThisCycle += this.howManyDeaths;

                            placements.push(player1);
                            player1.alive = false;
                            player1.killedBy = `–ë—ã–ª —Ä–∞–∑–¥–∞–≤–ª–µ–Ω –Ω–µ–±–µ—Å–Ω—ã–º –ª–µ–≤–∏–∞—Ñ–∞–Ω–æ–º`;
                        }
                    },
                    {
                        string: "(Player1-Died), –Ω–µ –≤–µ—Ä—è, —á—Ç–æ –∫–æ—Ç—ã –º–æ–≥—É—Ç —Å—Ç—Ä–∞–¥–∞—Ç—å, —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å–µ—Ä–¥—Ü–µ –ò–Ω–≤—É. –í –∏—Ç–æ–≥–µ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —è–π—Ü–æ, —á—Ç–æ–±—ã –ø–æ–∫–æ–Ω—á–∏—Ç—å —Å –∂–∏–∑–Ω—å—é –∏ –æ—Ç–æ–º—Å—Ç–∏—Ç—å (Player1-Died)",
                        playerCount: 1,
                        howManyDeaths: 1,
                        updateData: function (player1) {
                            currentCharacterNumber -= this.howManyDeaths;
                            diedThisCycle += this.howManyDeaths;

                            placements.push(player1);
                            player1.alive = false;
                            player1.killedBy = `–†–∞–∑–±–∏–ª –ò–Ω–≤—É —Å–µ—Ä–¥—Ü–µ`;
                        }
                    },
                    {
                        string: "(Player1-Died) –æ—Ç–±–∏—Ä–∞–µ—Ç —è–π—Ü–æ —É –ò–Ω–≤–∞ –∏ –≤–∑—Ä—ã–≤–∞–µ—Ç –µ–≥–æ, –≤—ã–∑—ã–≤–∞—è —Ä–∞–∑–ª–æ–º –≤—Å–µ–ª–µ–Ω–Ω–æ–π, –∫—Ä–∞—Ö –∑–∞–∫–æ–Ω–æ–≤ —Ñ–∏–∑–∏–∫–∏ –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å–º–µ—Ä—Ç—å",
                        playerCount: 1,
                        howManyDeaths: 1,
                        updateData: function (player1) {
                            currentCharacterNumber -= this.howManyDeaths;
                            diedThisCycle += this.howManyDeaths;

                            placements.push(player1);
                            player1.alive = false;
                            player1.killedBy = `–í–∑–æ—Ä–≤–∞–ª —è–π—Ü–æ –ò–Ω–≤–∞`;
                        }
                    },
                    {
                        string: "(Player1-Died) —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –ø–æ–π—Ç–∏ –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ —Å –ò–Ω–≤–æ–º, –æ–¥–Ω–∞–∫–æ —Å–∞–º–∞ –≤—Å–µ–ª–µ–Ω–Ω–∞—è –ø—Ä–æ—Ç–∏–≤ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ò–Ω–≤ –Ω–∞—à–µ–ª —Å–≤–æ–µ —Å—á–∞—Å—Ç—å–µ, –∏ —É–±–∏–≤–∞–µ—Ç (Player1-Died)",
                        playerCount: 1,
                        howManyDeaths: 1,
                        updateData: function (player1) {
                            currentCharacterNumber -= this.howManyDeaths;
                            diedThisCycle += this.howManyDeaths;

                            placements.push(player1);
                            player1.alive = false;
                            player1.killedBy = `–°—Ç–∞–ª –∂–µ—Ä—Ç–≤–æ–π –ø–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –Ω–µ–≤–µ–∑–µ–Ω–∏—è –ò–Ω–≤–∞`;
                        }
                    },
                    {
                        string: "–ò–Ω–≤ —Å–ª—É—á–∞–π–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å–µ—Ä–¥—Ü–µ (Player1-Died). –ë—É–∫–≤–∞–ª—å–Ω–æ. –ö—Ä–æ–≤–∏ –±—ã–ª–æ –º–Ω–æ–≥–æ",
                        playerCount: 1,
                        howManyDeaths: 1,
                        updateData: function (player1) {
                            currentCharacterNumber -= this.howManyDeaths;
                            diedThisCycle += this.howManyDeaths;

                            placements.push(player1);
                            player1.alive = false;
                            player1.killedBy = `–ü–æ–≥–∏–± –æ—Ç —Ä–∞–∑–±–∏—Ç–æ–≥–æ —Å–µ—Ä–¥—Ü–∞`;
                        }
                    },
                    {
                        string: "(Player1-Died) –∏ –ò–Ω–≤ –≥—É–ª—è—é—Ç –≤–º–µ—Å—Ç–µ, –∫–∞–∫ –≤–¥—Ä—É–≥ –Ω–∞ –Ω–∏—Ö —Å–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è 83 –∫—Ä–∞—Å–Ω—ã—Ö —Å–∫–æ–ª–æ–ø–µ–Ω–¥—Ä—ã",
                        playerCount: 1,
                        howManyDeaths: 1,
                        updateData: function (player1) {
                            currentCharacterNumber -= this.howManyDeaths;
                            diedThisCycle += this.howManyDeaths;

                            placements.push(player1);
                            player1.alive = false;
                            player1.killedBy = `–ü–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è —Å 83-–µ–º—è –∫—Ä–∞—Å–Ω—ã–º–∏ —Å–∫–æ–ª–æ–ø–µ–Ω–¥—Ä–∞–º–∏`;
                        }
                    },
                    {
                        string: "(Player1-Died) —Ç—Ä–∞–≤–∏—Ç—Å—è –µ–¥–æ–π –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–∏ —Å –ò–Ω–≤–æ–º –∏ —É–º–∏—Ä–∞–µ—Ç",
                        playerCount: 1,
                        howManyDeaths: 1,
                        updateData: function (player1) {
                            currentCharacterNumber -= this.howManyDeaths;
                            diedThisCycle += this.howManyDeaths;

                            placements.push(player1);
                            player1.alive = false;
                            player1.killedBy = `–û—Ç—Ä–∞–≤–∏–ª—Å—è –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–∏ —Å –ò–Ω–≤–æ–º`;
                        }
                    },
                    {
                        string: "(Player1-Died) –∏ –ò–Ω–≤ –∏–¥—É—Ç –≤–æ–∑–Ω–æ—Å–∏—Ç—å—Å—è –≤–º–µ—Å—Ç–µ –≤ –∑–Ω–∞–∫ —Å–≤–æ–µ–π –≤–µ—á–Ω–æ–π –ª—é–±–≤–∏, –Ω–æ —Å–≤–∞–ª–∏–≤–∞—é—Ç—Å—è –≤ –†—É–±–∏–∫–æ–Ω",
                        playerCount: 1,
                        howManyDeaths: 1,
                        updateData: function (player1) {
                            currentCharacterNumber -= this.howManyDeaths;
                            diedThisCycle += this.howManyDeaths;

                            placements.push(player1);
                            player1.alive = false;
                            player1.killedBy = `–ó–∞—Å—Ç—Ä—è–ª —Å –ò–Ω–≤–æ–º –≤ –ø—É—Å—Ç–æ—Ç–µ`;
                        }
                    },
                    {
                        string: "–ò–Ω–≤ —Ñ–ª–∏—Ä—Ç—É–µ—Ç —Å (Player1-Died), –∏ —Ç–æ—Ç —Ö–æ—á–µ—Ç –∫–æ–µ-—á—Ç–æ –µ–º—É –ø–æ–∫–∞–∑–∞—Ç—å, –Ω–æ —Å–ª—É—á–∞–π–Ω–æ –¥–∞–≤–∏—Ç—Å—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä—É–∫–æ–π",
                        playerCount: 1,
                        howManyDeaths: 1,
                        updateData: function (player1) {
                            currentCharacterNumber -= this.howManyDeaths;
                            diedThisCycle += this.howManyDeaths;

                            placements.push(player1);
                            player1.alive = false;
                            player1.killedBy = `–ù–µ—É–¥–∞—á–Ω–æ –ø–æ–∫–∞–∑–∞–ª —Ñ–æ–∫—É—Å`;
                        }
                    },
                    {
                        string: "–ò–Ω–≤ –∫—Ä–∞—Å—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥ (Player1-Died) —Å–≤–æ–∏–º–∏ —è–π—Ü–∞–º–∏ —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏, –Ω–æ (Player1-Died) —Å–ª—É—á–∞–π–Ω–æ –¥–µ—Ç–æ–Ω–∏—Ä—É–µ—Ç –∏—Ö",
                        playerCount: 1,
                        howManyDeaths: 1,
                        updateData: function (player1) {
                            currentCharacterNumber -= this.howManyDeaths;
                            diedThisCycle += this.howManyDeaths;

                            placements.push(player1);
                            player1.alive = false;
                            player1.killedBy = `–ü–æ—Ç—Ä–æ–≥–∞–ª —è–π—Ü–æ –ò–Ω–≤–∞`;
                        }
                    },
                    {
                        string: "–ò–Ω–≤ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞—Å—Ç–æ–ª—å–∫–æ –≥–æ—Ä—è—á–∏–º, —á—Ç–æ (Player1-Died) —Ä–∞—Å–ø–ª–∞–≤–ª—è–µ—Ç—Å—è",
                        playerCount: 1,
                        howManyDeaths: 1,
                        updateData: function (player1) {
                            currentCharacterNumber -= this.howManyDeaths;
                            diedThisCycle += this.howManyDeaths;

                            placements.push(player1);
                            player1.alive = false;
                            player1.killedBy = `–ù–µ –≤—ã–¥–µ—Ä–∂–∞–ª –≤—ã—Å–æ–∫–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã`;
                        }
                    },

                    {
                        string: "(Player1) —Ç—Ä–µ–±—É–µ—Ç –æ—Ç –ò–Ω–≤–∞ –¥–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –ª—é–±–æ–≤—å, —É–±–∏–≤ (Player2-Died)",
                        playerCount: 2,
                        howManyDeaths: 1,
                        updateData: function (player1, player2) {
                            currentCharacterNumber -= this.howManyDeaths;
                            diedThisCycle += this.howManyDeaths;

                            placements.push(player2);
                            player1.kills++;
                            player1.hasKilled.push(player2.name);
                            player2.alive = false;
                            player2.killedBy = `–ë—ã–ª —É–±–∏—Ç –ò–Ω–≤–æ–º, –Ω–∞–Ω—è—Ç—ã–º <strong><font color="ffff00">` + player1.name + `</font></strong>`;
                        }
                    },
                    {
                        string: "(Player1-Died) –∏–¥–µ—Ç –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ —Å –ò–Ω–≤–æ–º, –Ω–æ (Player2) —É–±–∏–≤–∞–µ—Ç –µ–≥–æ - –Ω–µ –∏–∑-–∑–∞ —Ä–µ–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø–æ–¥–æ–±–Ω–æ–≥–æ, –æ–¥–Ω–∞–∫–æ –ø–æ –∑–∞–∫–æ–Ω—É –ø–æ–¥–ª–æ—Å—Ç–∏ –ò–Ω–≤–∞",
                        playerCount: 2,
                        howManyDeaths: 1,
                        updateData: function (player1, player2) {
                            currentCharacterNumber -= this.howManyDeaths;
                            diedThisCycle += this.howManyDeaths;

                            placements.push(player1);
                            player2.kills++;
                            player2.hasKilled.push(player1.name);
                            player1.alive = false;
                            player1.killedBy = `–ë—ã–ª —É–±–∏—Ç <strong><font color="ffff00">` + player2.name + `</font></strong> –ø–æ –∑–∞–∫–æ–Ω—É –ø–æ–¥–ª–æ—Å—Ç–∏ –ò–Ω–≤–∞`;
                        }
                    },
                    {
                        string: "(Player1-Died) —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫—É–ª—å—Ç –≤ —á–µ—Å—Ç—å –ò–Ω–≤–∞, –Ω–æ –µ–≥–æ —Å–∂–∏–≥–∞–µ—Ç (Player2), –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –ò—Å–∫–∞—Ç–µ–ª—å–Ω–∏—Ü—ã",
                        playerCount: 2,
                        howManyDeaths: 1,
                        updateData: function (player1, player2) {
                            currentCharacterNumber -= this.howManyDeaths;
                            diedThisCycle += this.howManyDeaths;

                            placements.push(player1);
                            player2.kills++;
                            player2.hasKilled.push(player1.name);
                            player1.alive = false;
                            player1.killedBy = `–ù–∞—Ä–≤–∞–ª—Å—è –Ω–∞ –∫—É–ª—å—Ç–∏—Å—Ç–∞ <strong><font color="ffff00">` + player2.name + `</font></strong>`;
                        }
                    },
                    {
                        string: "(Player1-Died) –∏ (Player2-Died) –≤—ã—Å–ª–µ–∂–∏–≤–∞—é—Ç –ò–Ω–≤–∞ —Å —Ü–µ–ª—å—é —É–±–∏—Ç—å, –Ω–æ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—é—Ç –≤ —Å—Ö–≤–∞—Ç–∫–µ –ø—Ä–æ—Ç–∏–≤ –Ω–µ–≥–æ –∏ –ø–æ–≥–∏–±–∞—é—Ç",
                        playerCount: 2,
                        howManyDeaths: 2,
                        updateData: function (player1, player2) {
                            currentCharacterNumber -= this.howManyDeaths;
                            diedThisCycle += this.howManyDeaths;

                            placements.push(player1);
                            player1.alive = false;
                            player1.killedBy = `–ë—ã–ª —É–±–∏—Ç –ò–Ω–≤–æ–º`;
                            placements.push(player2);
                            player2.alive = false;
                            player2.killedBy = `–ë—ã–ª —É–±–∏—Ç –ò–Ω–≤–æ–º`;
                        }
                    },

                    {
                        string: "(Player1-Died), (Player2-Died) –∏ (Player3-Died) –æ—á–µ–Ω—å –∂–µ–ª–∞—é—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è —Å –ò–Ω–≤–æ–º, –Ω–æ —Ç–∞–∫ –∏ –Ω–µ —Ä–µ—à–∞—é—Ç, –∫—Ç–æ –∏–∑ –Ω–∏—Ö —Ç—Ä–æ–∏—Ö –¥–æ—Å—Ç–æ–π–Ω–µ–µ, –∏ –≤ –±–∏—Ç–≤–µ —É–±–∏–≤–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞",
                        playerCount: 3,
                        howManyDeaths: 3,
                        updateData: function (player1, player2, player3) {
                            currentCharacterNumber -= this.howManyDeaths;
                            diedThisCycle += this.howManyDeaths;

                            placements.push(player1);
                            placements.push(player2);
                            placements.push(player3);

                            player1.kills++;
                            player1.kills++;
                            player1.hasKilled.push(player2.name);
                            player1.hasKilled.push(player3.name);

                            player2.kills++;
                            player2.kills++;
                            player2.hasKilled.push(player1.name);
                            player2.hasKilled.push(player3.name);

                            player3.kills++;
                            player3.kills++;
                            player3.hasKilled.push(player1.name);
                            player3.hasKilled.push(player2.name);

                            player1.alive = false;
                            player1.killedBy = `–ë–æ—Ä–æ–ª—Å—è –∑–∞ —Å–µ—Ä–¥—Ü–µ –ò–Ω–≤–∞ —Å <strong><font color="ffff00">` + player2.name + `</font></strong> –∏ <strong><font color="ffff00">` + player3.name + `</font></strong>`;
                            player2.alive = false;
                            player2.killedBy = `–ë–æ—Ä–æ–ª—Å—è –∑–∞ —Å–µ—Ä–¥—Ü–µ –ò–Ω–≤–∞ —Å <strong><font color="ffff00">` + player1.name + `</font></strong> –∏ <strong><font color="ffff00">` + player3.name + `</font></strong>`;
                            player3.alive = false;
                            player3.killedBy = `–ë–æ—Ä–æ–ª—Å—è –∑–∞ —Å–µ—Ä–¥—Ü–µ –ò–Ω–≤–∞ —Å <strong><font color="ffff00">` + player1.name + `</font></strong> –∏ <strong><font color="ffff00">` + player2.name + `</font></strong>`;
                        }
                    }
                ]
            }
        }
    }
]*/




// ---- –§–£–ù–ö–¶–ò–ò-–°–¢–†–ê–ù–ò–ß–ö–û–ë–ò–õ–î–ï–†–´ -----
// –∞

function htmlCharacterRowBuilder() {
    var html = "";

    var fullRows = Math.floor(initialCharacterNumber / 6);
    var notFullRows = initialCharacterNumber % 6;

    function itits(pronoun) {
        if (pronoun === "it") return "its"
        if (pronoun === "IT") return "ITS"
        else return pronoun
    }

    if (initialCharacterNumber % 6 === 0) {
        for (var i = 0; i < initialCharacterNumber / 6; i++) {
            html += `<table class="tribute">
            <tr>
               <td valign="top"><img src="` + characters[i * 6].image + `" height="90" width="90" /></td>
               <td valign="top"><img src="` + characters[i * 6 + 1].image + `" height="90" width="90" /></td>
               <td valign="top"><img src="` + characters[i * 6 + 2].image + `" height="90" width="90" /></td>
               <td valign="top"><img src="` + characters[i * 6 + 3].image + `" height="90" width="90" /></td>
               <td valign="top"><img src="` + characters[i * 6 + 4].image + `" height="90" width="90" /></td>
               <td valign="top"><img src="` + characters[i * 6 + 5].image + `" height="90" width="90" /></td>
            </tr>
            <tr>
               <td valign="top">` + characters[i * 6].name + `<br>` + characters[i * 6].pronoun[0] + `/` + itits(characters[i * 6].pronoun[1]) + `</td>
               <td valign="top">` + characters[i * 6 + 1].name + `<br>` + characters[i * 6 + 1].pronoun[0] + `/` + itits(characters[i * 6 + 1].pronoun[1]) + `</td>
               <td valign="top">` + characters[i * 6 + 2].name + `<br>` + characters[i * 6 + 2].pronoun[0] + `/` + itits(characters[i * 6 + 2].pronoun[1]) + `</td>
               <td valign="top">` + characters[i * 6 + 3].name + `<br>` + characters[i * 6 + 3].pronoun[0] + `/` + itits(characters[i * 6 + 3].pronoun[1]) + `</td>
               <td valign="top">` + characters[i * 6 + 4].name + `<br>` + characters[i * 6 + 4].pronoun[0] + `/` + itits(characters[i * 6 + 4].pronoun[1]) + `</td>
               <td valign="top">` + characters[i * 6 + 5].name + `<br>` + characters[i * 6 + 5].pronoun[0] + `/` + itits(characters[i * 6 + 5].pronoun[1]) + `</td>
            </tr>
            </table>
    <br/>`;
        }
        return html;
    } else {

        for (var i = 0; i < fullRows; i++) {
            html += `<table class="tribute">
            <tr>
               <td valign="top"><img src="` + characters[i * 6].image + `" height="90" width="90" /></td>
               <td valign="top"><img src="` + characters[i * 6 + 1].image + `" height="90" width="90" /></td>
               <td valign="top"><img src="` + characters[i * 6 + 2].image + `" height="90" width="90" /></td>
               <td valign="top"><img src="` + characters[i * 6 + 3].image + `" height="90" width="90" /></td>
               <td valign="top"><img src="` + characters[i * 6 + 4].image + `" height="90" width="90" /></td>
               <td valign="top"><img src="` + characters[i * 6 + 5].image + `" height="90" width="90" /></td>
            </tr>
            <tr>
               <td valign="top">` + characters[i * 6].name + `<br>` + characters[i * 6].pronoun[0] + `/` + itits(characters[i * 6].pronoun[1]) + `</td>
               <td valign="top">` + characters[i * 6 + 1].name + `<br>` + characters[i * 6 + 1].pronoun[0] + `/` + itits(characters[i * 6 + 1].pronoun[1]) + `</td>
               <td valign="top">` + characters[i * 6 + 2].name + `<br>` + characters[i * 6 + 2].pronoun[0] + `/` + itits(characters[i * 6 + 2].pronoun[1]) + `</td>
               <td valign="top">` + characters[i * 6 + 3].name + `<br>` + characters[i * 6 + 3].pronoun[0] + `/` + itits(characters[i * 6 + 3].pronoun[1]) + `</td>
               <td valign="top">` + characters[i * 6 + 4].name + `<br>` + characters[i * 6 + 4].pronoun[0] + `/` + itits(characters[i * 6 + 4].pronoun[1]) + `</td>
               <td valign="top">` + characters[i * 6 + 5].name + `<br>` + characters[i * 6 + 5].pronoun[0] + `/` + itits(characters[i * 6 + 5].pronoun[1]) + `</td>
            </tr>
            </table>
    <br/>`;
        }
        if (notFullRows === 1) {
            html += `<table class="tribute">
        <tr>
           <td valign="top"><img src="` + characters[i * 6].image + `" height="90" width="90" /></td>
        </tr>
        <tr>
           <td valign="top">` + characters[i * 6].name + `<br>` + characters[i * 6].pronoun[0] + `/` + itits(characters[i * 6].pronoun[1]) + `</td>
        </tr>
        </table>
    <br/>`
        } else if (notFullRows === 2) {
            html += `<table class="tribute">
        <tr>
           <td valign="top"><img src="` + characters[i * 6].image + `" height="90" width="90" /></td>
           <td valign="top"><img src="` + characters[i * 6 + 1].image + `" height="90" width="90" /></td>
        </tr>
        <tr>
           <td valign="top">` + characters[i * 6].name + `<br>` + characters[i * 6].pronoun[0] + `/` + itits(characters[i * 6].pronoun[1]) + `</td>
           <td valign="top">` + characters[i * 6 + 1].name + `<br>` + characters[i * 6 + 1].pronoun[0] + `/` + itits(characters[i * 6 + 1].pronoun[1]) + `</td>
        </tr>
        </table>
    <br/>`
        } else if (notFullRows === 3) {
            html += `<table class="tribute">
        <tr>
           <td valign="top"><img src="` + characters[i * 6].image + `" height="90" width="90" /></td>
           <td valign="top"><img src="` + characters[i * 6 + 1].image + `" height="90" width="90" /></td>
           <td valign="top"><img src="` + characters[i * 6 + 2].image + `" height="90" width="90" /></td>
        </tr>
        <tr>
           <td valign="top">` + characters[i * 6].name + `<br>` + characters[i * 6].pronoun[0] + `/` + itits(characters[i * 6].pronoun[1]) + `</td>
           <td valign="top">` + characters[i * 6 + 1].name + `<br>` + characters[i * 6 + 1].pronoun[0] + `/` + itits(characters[i * 6 + 1].pronoun[1]) + `</td>
           <td valign="top">` + characters[i * 6 + 2].name + `<br>` + characters[i * 6 + 2].pronoun[0] + `/` + itits(characters[i * 6 + 2].pronoun[1]) + `</td>
        </tr>
        </table>
    <br/>`
        } else if (notFullRows === 4) {
            html += `<table class="tribute">
        <tr>
           <td valign="top"><img src="` + characters[i * 6].image + `" height="90" width="90" /></td>
           <td valign="top"><img src="` + characters[i * 6 + 1].image + `" height="90" width="90" /></td>
           <td valign="top"><img src="` + characters[i * 6 + 2].image + `" height="90" width="90" /></td>
           <td valign="top"><img src="` + characters[i * 6 + 3].image + `" height="90" width="90" /></td>
        </tr>
        <tr>
           <td valign="top">` + characters[i * 6].name + `<br>` + characters[i * 6].pronoun[0] + `/` + itits(characters[i * 6].pronoun[1]) + `</td>
           <td valign="top">` + characters[i * 6 + 1].name + `<br>` + characters[i * 6 + 1].pronoun[0] + `/` + itits(characters[i * 6 + 1].pronoun[1]) + `</td>
           <td valign="top">` + characters[i * 6 + 2].name + `<br>` + characters[i * 6 + 2].pronoun[0] + `/` + itits(characters[i * 6 + 2].pronoun[1]) + `</td>
           <td valign="top">` + characters[i * 6 + 3].name + `<br>` + characters[i * 6 + 3].pronoun[0] + `/` + itits(characters[i * 6 + 3].pronoun[1]) + `</td>
        </tr>
        </table>
    <br/>`
        } else {
            html += `<table class="tribute">
        <tr>
           <td valign="top"><img src="` + characters[i * 6].image + `" height="90" width="90" /></td>
           <td valign="top"><img src="` + characters[i * 6 + 1].image + `" height="90" width="90" /></td>
           <td valign="top"><img src="` + characters[i * 6 + 2].image + `" height="90" width="90" /></td>
           <td valign="top"><img src="` + characters[i * 6 + 3].image + `" height="90" width="90" /></td>
           <td valign="top"><img src="` + characters[i * 6 + 4].image + `" height="90" width="90" /></td>
        </tr>
        <tr>
           <td valign="top">` + characters[i * 6].name + `<br>` + characters[i * 6].pronoun[0] + `/` + itits(characters[i * 6].pronoun[1]) + `</td>
           <td valign="top">` + characters[i * 6 + 1].name + `<br>` + characters[i * 6 + 1].pronoun[0] + `/` + itits(characters[i * 6 + 1].pronoun[1]) + `</td>
           <td valign="top">` + characters[i * 6 + 2].name + `<br>` + characters[i * 6 + 2].pronoun[0] + `/` + itits(characters[i * 6 + 2].pronoun[1]) + `</td>
           <td valign="top">` + characters[i * 6 + 3].name + `<br>` + characters[i * 6 + 3].pronoun[0] + `/` + itits(characters[i * 6 + 3].pronoun[1]) + `</td>
           <td valign="top">` + characters[i * 6 + 4].name + `<br>` + characters[i * 6 + 4].pronoun[0] + `/` + itits(characters[i * 6 + 4].pronoun[1]) + `</td>
        </tr>
        </table>
    <br/>`
        }
        return html;
    }
}    // —Å—Ç—Ä–æ–∏—Ç —Ä—è–¥—ã –≤ –º–µ–Ω—é—à–∫–µ

function titleChanger(title) {
    var titleHolder = document.getElementById("titleHolder");
    titleHolder.innerHTML = `<div id = "title"> ` + title + `</div> `;
    currentState = title;
} // –º–µ–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

function declareWinner() {
    var winner = getRandomAliveCharacter();
    var winnerDeclaration = `<table class="one">
    <tbody>
       <tr>
          <td><img src="` + winner.image + `" height="90" width="90"></td>
       </tr>
    </tbody>
 </table>
 <br>
 –ü–æ–±–µ–¥–∏—Ç–µ–ª—å - ` + winner.name + `!!!!!!!!!<br>`
    return winnerDeclaration;
}

function declarePlacements() {
    placements.push(getRandomAliveCharacter());
    placements.reverse();

    var html = "";

    var fullRows = Math.floor(initialCharacterNumber / 4);
    var notFullRows = initialCharacterNumber % 4;
    
    function itits(pronoun) {
        if (pronoun === "it") return "its"
        if (pronoun === "IT") return "ITS"
        else return pronoun
    }

    html += `<table class="tribute">
            <tr>
               <td valign="top"><img src="` + placements[0].image + `" height="90" width="90" /></td>
               <td valign="top"><img src="` + placements[1].image + `" height="90" width="90" /></td>
               <td valign="top"><img src="` + placements[2].image + `" height="90" width="90" /></td>
               <td valign="top"><img src="` + placements[3].image + `" height="90" width="90" /></td>
            </tr>
            <tr>
               <td valign="top"><strong><font color="ffff00">` + placements[0].name + `</font></strong><br>` + placements[0].pronoun[0] + `/` + itits(placements[0].pronoun[1]) + `<br>` + `Winner` + `<br>` + hasKills(placements[0]) + `</td>
               <td valign="top"><strong><font color="ffff00">` + placements[1].name + `</font></strong><br>` + placements[1].pronoun[0] + `/` + itits(placements[1].pronoun[1]) + `<br>` + `2nd Place` + `<br>` + hasKills(placements[1]) + `<br>` + placements[1].killedBy + `</td>
               <td valign="top"><strong><font color="ffff00">` + placements[2].name + `</font></strong><br>` + placements[2].pronoun[0] + `/` + itits(placements[2].pronoun[1]) + `<br>` + `3rd Place` + `<br>` + hasKills(placements[2]) + `<br>` + placements[2].killedBy + `</td>
               <td valign="top"><strong><font color="ffff00">` + placements[3].name + `</font></strong><br>` + placements[3].pronoun[0] + `/` + itits(placements[3].pronoun[1]) + `<br>` + `4th Place` + `<br>` + hasKills(placements[3]) + `<br>` + placements[3].killedBy + `</td>
            </tr>
            </table>
    <br/>`;

    for (var i = 1; i < fullRows; i++) {
        html += `<table class="tribute">
            <tr>
               <td valign="top"><img src="` + placements[i * 4].image + `" height="90" width="90" /></td>
               <td valign="top"><img src="` + placements[i * 4 + 1].image + `" height="90" width="90" /></td>
               <td valign="top"><img src="` + placements[i * 4 + 2].image + `" height="90" width="90" /></td>
               <td valign="top"><img src="` + placements[i * 4 + 3].image + `" height="90" width="90" /></td>
            </tr>
            <tr>
               <td valign="top"><strong><font color="ffff00">` + placements[i * 4].name + `</font></strong><br>` + placements[i * 4].pronoun[0] + `/` + itits(placements[i * 4].pronoun[1]) + `<br>` + (i * 4 + 1) + `th Place` + `<br>` + hasKills(placements[i * 4]) + `<br>` + placements[i * 4].killedBy + `</td>
               <td valign="top"><strong><font color="ffff00">` + placements[i * 4 + 1].name + `</font></strong><br>` + placements[i * 4 + 1].pronoun[0] + `/` + itits(placements[i * 4 + 1].pronoun[1]) + `<br>` + (i * 4 + 2) + `th Place` + `<br>` + hasKills(placements[i * 4 + 1]) + `<br>` + placements[i * 4 + 1].killedBy + `</td>
               <td valign="top"><strong><font color="ffff00">` + placements[i * 4 + 2].name + `</font></strong><br>` + placements[i * 4 + 2].pronoun[0] + `/` + itits(placements[i * 4 + 2].pronoun[1]) + `<br>` + (i * 4 + 3) + `th Place` + `<br>` + hasKills(placements[i * 4 + 2]) + `<br>` + placements[i * 4 + 2].killedBy + `</td>
               <td valign="top"><strong><font color="ffff00">` + placements[i * 4 + 3].name + `</font></strong><br>` + placements[i * 4 + 3].pronoun[0] + `/` + itits(placements[i * 4 + 3].pronoun[1]) + `<br>` + (i * 4 + 4) + `th Place` + `<br>` + hasKills(placements[i * 4 + 3]) + `<br>` + placements[i * 4 + 3].killedBy + `</td>
            </tr>
            </table>
    <br/>`;
    }
    if (notFullRows === 1) {
        html += `<table class="tribute">
        <tr>
        <td valign="top"><img src="` + placements[i * 4].image + `" height="90" width="90" /></td>
        </tr>
        <tr>
        <td valign="top"><strong><font color="ffff00">` + placements[i * 4].name + `</font></strong><br>` + placements[i * 4].pronoun[0] + `/` + itits(placements[i * 4].pronoun[1]) + `<br>` + (i * 4 + 1) + `th Place` + `<br>` + hasKills(placements[i * 4]) + `<br>` + placements[i * 4].killedBy + `</td>
        </tr>
        </table>
    <br/>`
    } else if (notFullRows === 2) {
        html += `<table class="tribute">
        <tr>
        <td valign="top"><img src="` + placements[i * 4].image + `" height="90" width="90" /></td>
        <td valign="top"><img src="` + placements[i * 4 + 1].image + `" height="90" width="90" /></td>
        </tr>
        <tr>
        <td valign="top"><strong><font color="ffff00">` + placements[i * 4].name + `</font></strong><br>` + placements[i * 4].pronoun[0] + `/` + itits(placements[i * 4].pronoun[1]) + `<br>` + (i * 4 + 1) + `th Place` + `<br>` + hasKills(placements[i * 4]) + `<br>` + placements[i * 4].killedBy + `</td>
        <td valign="top"><strong><font color="ffff00">` + placements[i * 4 + 1].name + `</font></strong><br>` + placements[i * 4 + 1].pronoun[0] + `/` + itits(placements[i * 4 + 1].pronoun[1]) + `<br>` + (i * 4 + 2) + `th Place` + `<br>` + hasKills(placements[i * 4 + 1]) + `<br>` + placements[i * 4 + 1].killedBy + `</td>
        </tr>
        </table>
    <br/>`
    } else if (notFullRows === 3) {
        html += `<table class="tribute">
        <tr>
        <td valign="top"><img src="` + placements[i * 4].image + `" height="90" width="90" /></td>
        <td valign="top"><img src="` + placements[i * 4 + 1].image + `" height="90" width="90" /></td>
        <td valign="top"><img src="` + placements[i * 4 + 2].image + `" height="90" width="90" /></td>
        </tr>
        <tr>
        <td valign="top"><strong><font color="ffff00">` + placements[i * 4].name + `</font></strong><br>` + placements[i * 4].pronoun[0] + `/` + itits(placements[i * 4].pronoun[1]) + `<br>` + (i * 4 + 1) + `th Place` + `<br>` + hasKills(placements[i * 4]) + `<br>` + placements[i * 4].killedBy + `</td>
        <td valign="top"><strong><font color="ffff00">` + placements[i * 4 + 1].name + `</font></strong><br>` + placements[i * 4 + 1].pronoun[0] + `/` + itits(placements[i * 4 + 1].pronoun[1]) + `<br>` + (i * 4 + 2) + `th Place` + `<br>` + hasKills(placements[i * 4 + 1]) + `<br>` + placements[i * 4 + 1].killedBy + `</td>
        <td valign="top"><strong><font color="ffff00">` + placements[i * 4 + 2].name + `</font></strong><br>` + placements[i * 4 + 2].pronoun[0] + `/` + itits(placements[i * 4 + 2].pronoun[1]) + `<br>` + (i * 4 + 3) + `th Place` + `<br>` + hasKills(placements[i * 4 + 2]) + `<br>` + placements[i * 4 + 2].killedBy + `</td>
        </tr>
        </table>
    <br/>`
    }
    return html;
}

function declareKillPlacements() {
    var html = `<td width="45%"><u><strong>KILLS::</strong></u><br><br>`
    var characterPlacement = sortCharactersByKills();
    for (var i = 0; i < characterPlacement.length; i++) {
        html += characterPlacement[i].kills + `::'<font color="ffff00">` + characterPlacement[i].name + `</font>';KILLED::'<font color="aaaaaa">` + getKillArray(characterPlacement[i]) + `</font>'<br>`;
    }
    html += `</td>`;
    return html;
}

function declareRevivedPlacementsAndOther() {
    var html = `<td width="55%"><u><strong>REVIVALS::</strong></u><br><br>`
    var characterPlacement = sortCharactersByRevivals();
    for (var i = 0; i < characterPlacement.length; i++) {
        html += characterPlacement[i].revived + `::'<font color="ffff00">` + characterPlacement[i].name + `</font>';DEATH CAUSES::'<font color="aaaaaa">` + getKilledBysArray(characterPlacement[i]) + `</font>'<br>`;
    }
    /* html += `<br><br><u><strong>–ü—Ä–æ—á–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</strong></u><br><br>–ò–Ω–¥–µ–∫—Å –ø–∞—Ä–∞—Ñ–∏–Ω–æ–≤: ` + paraffinIndex;
    if (paraffinIndex != 0) html += ` (<font color="aaaaaa">` + paraffinCycles.join(', ') + `</font>)<br>`;
    else html += `<br>`;*/
    html += `</td>`;
    return html;
}

function declareOtherPlacements() {
    var html = `<table class="summary" width="800px"><tbody>`;
    html += declareKillPlacements();
    html += declareRevivedPlacementsAndOther();
    html += `</tbody></table>`;
    return html;
}

function savePage(name, insert, addThing) { 
    var titleHolder = document.getElementById("titleHolder");
    var content = document.getElementById('content'); 
    var htmlTitleHolder = titleHolder.innerHTML; 
    var htmlContent = content.innerHTML;

    var html = [];
    html.push(htmlTitleHolder);
    html.push(htmlContent);

    localStorage.setItem(name, JSON.stringify(html)); 

    if (insert != undefined) { 
        var sideLeft = document.getElementById("sideLeft"); 

        var newLink = document.createElement("ul");


        if (addThing == `1`) newLink.innerHTML += `-<br>`; 
        newLink.innerHTML += `<a href="#" onclick="goToPage('` + name + `')" class="navbar2">` + insert + `</a><br>`; 
        if (addThing != undefined && addThing != `1`) newLink.innerHTML += `-<br>`;

        sideLeft.appendChild(newLink);
    };
}

function goToPage(name) {
    var html = JSON.parse(localStorage.getItem(name));
    var htmlTitleHolderToInsert = html[0];
    var htmlContentToInsert = html[1];

    var content = document.getElementById("content")
    var titleHolder = document.getElementById("titleHolder")

    content.innerHTML = htmlContentToInsert;
    titleHolder.innerHTML = htmlTitleHolderToInsert; 
}










//////////////////////////////////////////////// —Ç—É—Ç —Ç–∏–ø–∞ –¥–≤–∏–∂–æ–∫???? —ç–∞—ç–∞ //////////////////////////////////////////////////////////////

console.log("%c---", 'color: #666666');
console.log("%c---", 'color: #666666');
console.log("%c---", 'color: #666666');
console.log("%c---", 'color: #666666');


function theMenu() {
    console.log('%c---  THE MENU  ---', 'background: #0000b3; color: #cce6ff')
    var htmlContentToInsert = htmlCharacterRowBuilder() + `<a href = "#" onclick = "theGenerate()">proceed.</a> `;
    var content = document.getElementById("content");
    content.innerHTML = htmlContentToInsert;

    savePage(`theMenu`, `!!__PARTICIPANTS__!!`, `0`);

    console.log('%cTHE MENU - ENDED', 'background: #006600; color: #66ff99');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');
} // –º–µ–Ω—é—Ö–∞


function theRace() {
    console.log('%c---  THE COLLAPSE   ---', 'background: #0000b3; color: #cce6ff')
    updateDataBeforeUse();
    titleChanger("!!__THE_COLLAPSE__!!");

    var htmlContentToInsert = `Out of nowhere, every corner of the embassy erupts in a signal of pain and rage. The frightened qou are given an order through distorted words of the... groundsmind?<br/><i><font color='ff0066'>KILL and dont BE KILLED!! only 1 of u ll get a chance to survive >:]</font></i><br><br>` + generateEvents(eventRace) + declareTheDiedThisCycleNumber() + `<br/><a href = "#" onclick = "goToPage('1')"> proceed.</a> `;
    var content = document.getElementById("content");
    content.innerHTML = htmlContentToInsert;

    savePage(`theRace`, `!!__THE_COLLAPSE__!!`);

    console.log('%cTHE RACE - ENDED', 'background: #006600; color: #66ff99');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');
} // —Å–∞–º—ã–π —Å—Ç–∞—Ä—Ç –≥–∏


function theCycle(hasTheEventAlreadyHappened) {
    updateDataBeforeUse();
    if (currentCharacterNumber === 1) {
        return true;
    } else if ((cycleNumber >= safeCycles && Math.random() < chanceRandomEvent) && hasTheEventAlreadyHappened != true) {
        chanceRandomEvent = decreaseRandomEventChanceTo;
        theEvent();
        return false;
    };
    if (cycleNumber >= safeCycles && increaseRandomEventChanceWithTime === true) chanceRandomEvent += increaseRandomEventChanceBy;
    cycleNumber++;
    magicPageNumber++;

    console.log('%c---  CYCLE ' + cycleNumber + '   ---', 'background: #0000b3; color: #cce6ff');


    titleChanger("!!__WINK_" + cycleNumber + "__!!");

    var htmlContentToInsert = generateEvents(eventCycle) + declareTheDiedThisCycleNumber() + `<br/><a href = "#" onclick = "goToPage('` + (parseInt(magicPageNumber) + 1) + `')"> proceed.</a> `;
    var content = document.getElementById("content");
    content.innerHTML = htmlContentToInsert;

    savePage(magicPageNumber, `!!__WINK_` + cycleNumber + "__!!", 1);

    console.log('%c---  CYCLE ' + cycleNumber + ' - ENDED   ---', 'background: #006600; color: #66ff99');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');
} // —Ü–∏–∫–ª—ã –∞–∫–∞ –¥–Ω–∏


/*function theRain() {
    updateDataBeforeUse();
    if (currentCharacterNumber === 1) {

        return true;
    }
    rainNumber++;
    magicPageNumber++;
    console.log('%c---   RAIN ' + rainNumber + '   ---', 'background: #0000b3; color: #cce6ff');


    titleChanger("–î–æ–∂–¥—å " + rainNumber);

    var htmlContentToInsert = generateEvents(eventRain) + declareTheDiedThisCycleNumber() + `<br/><a href = "#" onclick = "goToPage('` + (parseInt(magicPageNumber) + 1) + `')"> proceed.</a> `;
    var content = document.getElementById("content");
    content.innerHTML = htmlContentToInsert;

    savePage(magicPageNumber, `–î–æ–∂–¥—å ` + rainNumber);

    console.log('%c---   RAIN ' + rainNumber + ' - ENDED   ---', 'background: #006600; color: #66ff99');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');
}*/


function theEvent() {
    magicPageNumber++;
    console.log('%c---   RANDOM EVENT   ---', 'background: #0000b3; color: #cce6ff');

    var eventData = decideEventGenus();
    var eventGenus = eventData.eventGenus;


    titleChanger("!!__RANDOM_EVENT__!!");

    var htmlContentToInsert = eventData.string + `<br><br>` + generateEvents(eventGenus) + declareTheDiedThisCycleNumber() + `<br/><a href = "#" onclick = "goToPage('` + (parseInt(magicPageNumber) + 1) + `')"> proceed.</a> `;
    var content = document.getElementById("content");
    content.innerHTML = htmlContentToInsert;

    savePage(magicPageNumber, `!!__RANDOM_EVENT__!!`, `1`)
    console.log('%c---   RANDOM EVENT - ENDED   ---', 'background: #006600; color: #66ff99');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');

    theCycle(true);
}


function theWinner() {
    console.log('%c--   THE WINNER   ---', 'background: #0000b3; color: #cce6ff');

    doubleCheck();
    magicPageNumber++;

    titleChanger("!!!!!!!!");

    var htmlContentToInsert = declareWinner() + `<br/><a href = "#" onclick = "goToPage('thePlacements')"> proceed.</a> `;
    var content = document.getElementById("content");
    content.innerHTML = htmlContentToInsert;

    savePage(magicPageNumber, `!!!!!!!!`, `1`);
    console.log('%c---   THE WINNER - ENDED   ---', 'background: #006600; color: #66ff99');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');
}


function thePlacements() {
    console.log('%c---   THE PLACEMENTS   ---', 'background: #0000b3; color: #cce6ff');

    doubleCheck();
    titleChanger("!!__RANKINGS__!!");

    var htmlContentToInsert = declarePlacements() + declareOtherPlacements() + `<br/><a href = "#" onclick = "location.reload()"> reload the page and play again!</a> `;
    var content = document.getElementById("content");
    content.innerHTML = htmlContentToInsert;

    savePage(`thePlacements`, `!!__RANKINGS__!!`);

    console.log('%c---   THE PLACEMENTS - ENDED   ---', 'background: #006600; color: #66ff99');
    console.log('%cParaffin Index: ' + paraffinIndex, 'background: #006600; color: #66ff99');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');
    console.log("%c---", 'color: #666666');
}


function theGenerate() {
    if (generated == true) {
        goToPage(`theRace`);
        return;
    }
    theRace();
    do {
        i = theCycle();
        // i = theRain();
    } while (i != true)
    theWinner();
    thePlacements();
    goToPage(`theRace`);
    console.log("*–¥–µ–ª–∞–µ—Ç –∫–æ—Ñ–µ –∫–≤–∞–º–±—É*")
    generated = true;
}


window.onload = localStorage.clear();
window.onload = theMenu();
